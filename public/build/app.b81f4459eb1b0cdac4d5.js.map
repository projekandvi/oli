{"version":3,"sources":["webpack:///app.b81f4459eb1b0cdac4d5.js","webpack:///./resources/assets/js/app.js","webpack:///./node_modules/bootstrap/dist/js/npm.js","webpack:///./node_modules/bootstrap/js/transition.js","webpack:///./node_modules/bootstrap/js/alert.js","webpack:///./node_modules/bootstrap/js/button.js","webpack:///./node_modules/bootstrap/js/carousel.js","webpack:///./node_modules/bootstrap/js/collapse.js","webpack:///./node_modules/bootstrap/js/dropdown.js","webpack:///./node_modules/bootstrap/js/modal.js","webpack:///./node_modules/bootstrap/js/tooltip.js","webpack:///./node_modules/bootstrap/js/popover.js","webpack:///./node_modules/bootstrap/js/scrollspy.js","webpack:///./node_modules/bootstrap/js/tab.js","webpack:///./node_modules/bootstrap/js/affix.js","webpack:///./node_modules/jquery-ui/ui/widget.js","webpack:///./node_modules/jquery-ui/ui/version.js","webpack:///./node_modules/sparklines/source/sparkline.js","webpack:///./resources/assets/node_modules/superclick/superclick.js","webpack:///./resources/assets/node_modules/progressbar/progressbar.js","webpack:///./resources/assets/node_modules/input-switch/inputswitch-alt.js","webpack:///./resources/assets/node_modules/slidebars/slidebars.js","webpack:///./resources/assets/node_modules/content-box/contentbox.js","webpack:///./resources/assets/node_modules/overlay/overlay.js","webpack:///./resources/assets/node_modules/datatable/datatable.js","webpack:///./resources/assets/node_modules/datatable/datatable-bootstrap.js","webpack:///./resources/assets/node_modules/js-init/layout.js","webpack:///./resources/assets/node_modules/js-init/widgets-init.js"],"names":["webpackJsonp","121","module","__webpack_exports__","__webpack_require__","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0_jquery__","__WEBPACK_IMPORTED_MODULE_1_jquery_migrate__","n","__WEBPACK_IMPORTED_MODULE_2_bootstrap__","__WEBPACK_IMPORTED_MODULE_3_jquery_ui__","__WEBPACK_IMPORTED_MODULE_4_sparklines__","__WEBPACK_IMPORTED_MODULE_5_bootstrap_select__","__WEBPACK_IMPORTED_MODULE_6_moment__","124","exports","125","jQuery","$","transitionEnd","el","document","createElement","transEndEventNames","WebkitTransition","MozTransition","OTransition","transition","name","undefined","style","end","fn","emulateTransitionEnd","duration","called","$el","this","one","callback","trigger","support","setTimeout","event","special","bsTransitionEnd","bindType","delegateType","handle","e","target","is","handleObj","handler","apply","arguments","call","126","Plugin","option","each","$this","data","Alert","dismiss","on","close","VERSION","TRANSITION_DURATION","prototype","removeElement","$parent","detach","remove","selector","attr","replace","preventDefault","length","closest","Event","isDefaultPrevented","removeClass","hasClass","old","alert","Constructor","noConflict","127","options","Button","toggle","setState","element","$element","extend","DEFAULTS","isLoading","loadingText","state","d","val","resetText","proxy","addClass","prop","removeAttr","changed","$input","find","toggleClass","button","$btn","first","test","type","128","Carousel","action","slide","to","interval","pause","cycle","$indicators","paused","sliding","$active","$items","keyboard","keydown","documentElement","wrap","tagName","which","prev","next","clearInterval","setInterval","getItemIndex","item","parent","children","index","getItemForDirection","direction","active","activeIndex","delta","itemIndex","eq","pos","that","$next","isCycling","relatedTarget","slideEvent","$nextIndicator","slidEvent","offsetWidth","join","carousel","clickHandler","href","$target","slideIndex","window","$carousel","129","getTargetFromTrigger","$trigger","Collapse","id","transitioning","getParent","addAriaAndCollapsedClass","dimension","show","activesData","actives","startEvent","complete","scrollSize","camelCase","hide","offsetHeight","i","isOpen","collapse","130","clearMenus","backdrop","contains","Dropdown","isActive","insertAfter","stopPropagation","dropdown","131","_relatedTarget","Modal","$body","body","$dialog","$backdrop","isShown","originalBodyPad","scrollbarWidth","ignoreBackdropClick","remote","load","BACKDROP_TRANSITION_DURATION","checkScrollbar","setScrollbar","escape","resize","appendTo","scrollTop","adjustDialog","enforceFocus","off","hideModal","has","handleUpdate","resetAdjustments","resetScrollbar","removeBackdrop","animate","doAnimate","currentTarget","focus","callbackRemove","modalIsOverflowing","scrollHeight","clientHeight","css","paddingLeft","bodyIsOverflowing","paddingRight","fullWindowWidth","innerWidth","documentElementRect","getBoundingClientRect","right","Math","abs","left","clientWidth","measureScrollbar","bodyPad","parseInt","scrollDiv","className","append","removeChild","modal","showEvent","132","Tooltip","enabled","timeout","hoverState","inState","init","animation","placement","template","title","delay","html","container","viewport","padding","getOptions","$viewport","isFunction","click","hover","constructor","Error","triggers","split","eventIn","eventOut","enter","leave","_options","fixTitle","getDefaults","getDelegateOptions","defaults","key","obj","self","tip","clearTimeout","isInStateTrue","hasContent","inDom","ownerDocument","$tip","tipId","getUID","setContent","autoToken","autoPlace","top","display","getPosition","actualWidth","actualHeight","orgPlacement","viewportDim","bottom","width","calculatedOffset","getCalculatedOffset","applyPlacement","prevHoverState","offset","height","marginTop","marginLeft","isNaN","setOffset","using","props","round","getViewportAdjustedDelta","isVertical","arrowDelta","arrowOffsetPosition","replaceArrow","arrow","getTitle","$e","isBody","elRect","isSvg","SVGElement","elOffset","scroll","outerDims","viewportPadding","viewportDimensions","topEdgeOffset","bottomEdgeOffset","leftEdgeOffset","rightEdgeOffset","o","prefix","random","getElementById","$arrow","enable","disable","toggleEnabled","destroy","removeData","tooltip","133","Popover","content","getContent","popover","134","ScrollSpy","$scrollElement","offsets","targets","activeTarget","process","refresh","getScrollHeight","max","offsetMethod","offsetBase","isWindow","map","$href","sort","a","b","push","maxScroll","activate","clear","parents","parentsUntil","scrollspy","$spy","135","Tab","$ul","$previous","hideEvent","tab","136","Affix","checkPosition","checkPositionWithEventLoop","affixed","unpin","pinnedOffset","RESET","getState","offsetTop","offsetBottom","position","targetHeight","initializing","colliderTop","colliderHeight","getPinnedOffset","affix","affixType","137","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","factory","widgetUuid","widgetSlice","Array","slice","cleanData","orig","elems","events","elem","_data","triggerHandler","widget","base","existingConstructor","basePrototype","proxiedPrototype","namespace","fullName","Widget","isArray","concat","expr","toLowerCase","_createWidget","version","_proto","_childConstructors","_super","_superApply","args","returnValue","__super","__superApply","widgetEventPrefix","widgetName","widgetFullName","child","childPrototype","bridge","input","inputIndex","inputLength","hasOwnProperty","isPlainObject","object","isMethodCall","methodValue","instance","charAt","jquery","pushStack","get","error","_init","defaultElement","classes","disabled","create","uuid","eventNamespace","bindings","hoverable","focusable","classesElementLookup","_on","defaultView","parentWindow","_getCreateOptions","_create","_setOptionDisabled","_trigger","_getCreateEventData","noop","_destroy","_removeClass","parts","curOption","shift","pop","_setOptions","_setOption","_setOptionClasses","classKey","elements","currentElements","_classes","keys","add","_toggleClass","processClassString","checkOption","current","unique","not","full","match","extra","_untrackClassesElement","inArray","_addClass","suppressDisabledCheck","handlers","delegateElement","handlerProxy","guid","eventName","_off","_delay","_hoverable","mouseenter","mouseleave","_focusable","focusin","focusout","originalEvent","method","defaultEffect","effect","hasOptions","effectName","isEmptyObject","effects","easing","queue","138","ui","139","root","specific","general","Sparkline","innerHTML","canvas","firstChild","context","getContext","ratio","devicePixelRatio","onmousemove","showTooltip","bind","getY","minValue","maxValue","offsetY","range","drawDot","radius","color","x","y","beginPath","fillStyle","arc","PI","fill","offsetX","layerX","dotRadius","points","minmax","c","min","lineColor","lineWidth","startColor","endColor","maxColor","minColor","draw","sparkline","minX","maxX","dot","strokeStyle","moveTo","lineTo","stroke","indexOf","142","methods","bcClass","menuClass","anchorClass","menuArrowClass","toggleMenuClasses","superclick","$menu","cssArrows","setPathToCurrent","pathClass","pathLevels","activeClass","filter","toggleAnchorClass","$li","toggleTouchAction","touchAction","func","siblings","over","out","retainPath","$path","onIdle","getMenu","instant","speed","speedOut","onBeforeHide","stop","animationOut","onHide","onBeforeShow","onShow","$liHasUl","onDestroy","reset","toArray","reverse","op","onInit","opacity","143","progress","percent","progressBarWidth","bar","144","simpleCheckbox","newElementClass","activeElementClass","newObj","class","145","slidebars","initialise","settings","disableOver","windowWidth","hideControlClasses","$controls","$site","leftActive","rightActive","$left","$right","scrollLock","amount","side","$slide","substr","properties","open","proceed","eventHandler","siteClose","supportTransition","supportTransform","MozTransform","WebkitTransform","OTransform","transform","ua","navigator","userAgent","android","iOS","resizedWindowWidth","reInit","resetCSS","location","146","ready","ev","switchParent","switchTarget","slideToggle","fadeIn","fadeOut","animationEFFECT","animationTARGET","slideUp","147","loadertheme","loaderopacity","loaderstyle","loader","refreshParent","loaderTheme","loaderOpacity","loaderStyle","148","_fnHungarianMap","newKey","hungarian","_hungarianMap","_fnCamelToHungarian","src","user","force","hungarianKey","_fnLanguageCompat","lang","DataTable","oLanguage","zeroRecords","sZeroRecords","sEmptyTable","_fnMap","sLoadingRecords","sInfoThousands","sThousands","decimal","sDecimal","_addNumericSort","_fnCompatOpts","_fnCompatMap","searchCols","aoSearchCols","ien","models","oSearch","_fnCompatCols","_fnBrowserDetect","browser","oBrowser","overflow","bScrollOversize","bScrollbarLeft","_fnReduce","start","inc","isSet","_fnAddColumn","oSettings","nTh","oDefaults","column","iCol","aoColumns","oCol","oColumn","sTitle","aDataSort","mData","idx","aoPreSearchCols","_fnColumnOptions","oOptions","oClasses","th","sWidthOrig","t","mDataProp","sType","_sManualType","sClass","iDataSort","mDataSrc","_fnGetObjectDataFn","mRender","attrTest","_bAttrSrc","fnGetData","rowData","meta","innerData","fnSetData","_fnSetObjectDataFn","oFeatures","bSort","bSortable","sSortableNone","bAsc","asSorting","bDesc","sSortingClass","sSortableAsc","sSortingClassJUI","sSortJUIAscAllowed","sSortableDesc","sSortJUIDescAllowed","sSortable","sSortJUI","_fnAdjustColumnSizing","bAutoWidth","columns","_fnCalculateColumnWidths","iLen","sWidth","oScroll","sY","sX","_fnScrollDraw","_fnCallbackFire","_fnVisibleToColumnIndex","iMatch","aiVis","_fnGetColumns","_fnColumnIndexToVisible","iPos","_fnVisbleColumns","sParam","_fnColumnTypes","j","jen","k","ken","col","detectedType","cache","aoData","types","ext","detect","_fnGetCellData","_fnApplyColumnDefs","aoColDefs","aoCols","jLen","kLen","def","aTargets","_fnAddData","aDataIn","nTr","anTds","iRow","oData","oRow","_aData","_fnSetCellData","aiDisplayMaster","bDeferRender","_fnCreateTr","_fnAddTr","trs","row","_fnGetRowElements","cells","_fnNodeToDataIndex","_DT_RowIndex","_fnNodeToColumnIndex","anCells","rowIdx","colIdx","iDraw","defaultContent","sDefaultContent","cellData","iDrawError","_fnLog","_fnSplitObjNotation","str","s","mSource","_","fetchData","arrayNotation","funcNotation","innerSrc","__reArray","__reFn","splice","substring","setData","aLast","_fnGetDataMaster","_pluck","_fnClearTable","aiDisplay","_fnDeleteIndex","iTarget","iTargetIndex","_fnInvalidateRow","cell","childNodes","_aSortData","_aFilterData","cols","_fnRowAttributes","contents","tds","td","getAttribute","cellProcess","trim","nodeName","toUpperCase","nextSibling","nTrIn","nTd","sCellType","bVisible","appendChild","parentNode","fnCreatedCell","oInstance","setAttribute","tr","DT_RowId","DT_RowClass","__rowc","_unique","DT_RowData","_fnBuildHead","thead","nTHead","tfoot","nTFoot","createHeader","iTabIndex","sTableId","_fnSortAttachListener","_fnRenderer","_fnDetectHeader","aoHeader","sHeaderTH","sFooterTH","aoFooter","nTf","_fnDrawHead","aoSource","bIncludeHidden","nLocalTr","iRowspan","iColspan","aoLocal","aApplied","iColumns","_fnDraw","aPreDraw","_fnProcessingDisplay","anRows","iRowCount","asStripeClasses","iStripes","oLang","aoOpenRows","iInitDisplayStart","bServerSide","_fnDataSource","bDrawing","_iDisplayStart","fnRecordsDisplay","iDisplayStart","iDisplayEnd","fnDisplayEnd","bDeferLoading","bDestroying","_fnAjaxUpdate","iStart","iEnd","iDataIndex","nRow","sStripe","_sRowStripe","sZero","fnRecordsTotal","valign","colSpan","sRowEmpty","nTBody","bSorted","bFiltered","_fnReDraw","holdPosition","features","bFilter","_fnSort","_fnFilterComplete","oPreviousSearch","_drawHold","_fnAddOptionsHtml","table","nTable","holding","insertBefore","insert","sWrapper","sNoFooter","nHolding","nTableWrapper","nTableReinsertBefore","featureNode","cOption","nNewNode","cNext","sAttr","aDom","sDom","sJUIHeader","sJUIFooter","aSplit","bPaginate","bLengthChange","_fnFeatureHtmlLength","_fnFeatureHtmlFilter","bProcessing","_fnFeatureHtmlProcessing","_fnFeatureHtmlTable","bInfo","_fnFeatureHtmlInfo","_fnFeatureHtmlPaginate","feature","aoFeatures","cFeature","fnInit","aanFeatures","replaceWith","aLayout","nThead","nCell","l","iColShifted","iColumn","bUnique","nTrs","_fnGetUniqueThs","nHeader","aReturn","bSortCellsTop","_fnBuildAjax","tmp","rbracket","ajaxData","ajax","newData","baseAjax","success","json","sError","oApi","dataType","sServerMethod","xhr","thrown","log","readyState","oAjaxData","fnServerData","sAjaxSource","jqXHR","url","bAjaxDataGet","_fnAjaxParameters","_fnAjaxUpdateDraw","dataProp","columnSearch","columnCount","preSearch","preColSearch","_fnSortFlatten","displayStart","displayLength","_iDisplayLength","param","order","search","sSearch","regex","bRegex","sName","searchable","bSearchable","orderable","dir","legacy","compat","modern","recordsTotal","rocordsFiltered","_iRecordsTotal","_iRecordsDisplay","_fnAjaxDataSrc","_bInitComplete","_fnInitComplete","dataSrc","sAjaxDataProp","aaData","tableId","language","previousSearch","sFilterInput","f","sFilter","searchFn","bSmart","bCaseInsensitive","jqFilter","sSearchPlaceholder","_fnThrottle","keyCode","activeElement","oInput","iForce","oPrevSearch","aoPrevSearch","fnSaveFilter","oFilter","fnRegex","bEscapeRegex","_fnFilter","_fnFilterColumn","_fnFilterCustom","filters","displayRows","rows","searchStr","smart","caseInsensitive","rpSearch","_fnFilterCreateSearch","invalidated","prevSearch","displayMaster","_fnFilterData","_sFilterRow","_fnEscapeRegex","word","RegExp","sVal","_re_escape_regex","filterData","fomatters","wasInvalidated","toString","__filter_div","__filter_div_textContent","textContent","innerText","_fnSearchToCamel","_fnSearchToHung","tid","nodes","sInfo","aoDrawCallback","_fnUpdateInfo","total","sInfoEmpty","sInfoFiltered","sInfoPostFix","_fnInfoMacros","fnInfoCallback","formatter","fnFormatNumber","len","vis","all","ceil","_fnInitialise","iAjaxStart","bInitialised","_fnStringToCss","aData","_fnLengthChange","_fnLengthOverflow","menu","aLengthMenu","d2","lengths","select","aria-controls","sLengthSelect","Option","div","sLength","sLengthMenu","outerHTML","sPaginationType","plugin","pager","redraw","node","sPaging","p","visRecords","page","pages","buttons","fnUpdate","_fnPageChange","records","floor","r","sProcessing","scrollX","scrollY","caption","captionSide","_captionSide","headerClone","cloneNode","footerClone","footer","_div","size","scroller","sScrollWrapper","sScrollHead","border","sScrollHeadInner","box-sizing","sXInner","sScrollBody","sScrollFoot","sScrollFootInner","scrollHead","scrollBody","scrollFoot","scrollLeft","nScrollHead","nScrollBody","nScrollFoot","headerTrgEls","footerTrgEls","headerSrcEls","footerSrcEls","headerCopy","footerCopy","correction","sanityWidth","scrollXInner","barWidth","iBarWidth","divHeader","divHeaderStyle","divHeaderInner","divHeaderInnerStyle","divHeaderTable","divBodyEl","divBody","divBodyStyle","divFooter","divFooterInner","divFooterTable","header","tableEl","tableStyle","ie67","headerWidths","footerWidths","headerContent","zeroOut","nSizer","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","clone","prependTo","_fnApplyToChildren","bCollapse","outerWidth","nToSize","iExtra","iOuterWidth","bScrolling","an1","an2","nNode1","nNode2","nodeType","columnIdx","visibleColumns","headerCells","tableWidthAttr","tableContainer","userInputs","_fnConvertToWidth","tmpTable","empty","_fnGetWidestNode","sContentPadding","_fnScrollingWidthAdjust","_reszEvt","sInstance","freq","last","timer","frequency","now","Date","_fnGetMaxLenString","maxIdx","__re_html_remove","_fnScrollBarWidth","__scrollbarWidth","inner","outer","visibility","w1","w2","srcCol","aSort","fixed","aaSortingFixed","fixedObj","nestedSort","pre","aaSorting","post","sortCol","aiOrig","oExtSort","formatters","_fnSortData","dataA","dataB","_fnSortAria","label","nextSort","oAria","removeAttribute","sSortAscending","sSortDescending","_fnSortListener","nextSortIdx","sorting","_idx","bSortMulti","sortIdx","attachTo","_fnBindAction","shiftKey","_fnSortingClasses","oldSort","aLastSort","sortClass","sSortColumn","bSortClasses","customData","customSort","sSortDataType","_fnSaveState","bStateSave","time","visible","oSavedState","fnStateSaveCallback","_fnLoadState","oInit","fnStateLoadCallback","abStateLoad","iStateDuration","oLoadedState","_fnSettingsFromNode","level","msg","tn","console","sErrMode","errMode","ret","mappedName","_fnExtend","extender","breakRefs","blur","_fnCallbackReg","sStore","callbackArr","renderer","host","_numbers","numbers","extPagination","numbers_length","half","_range","DT_el","decimalPlace","num","__numericReplace","num-fmt","_re_formatted_numeric","html-num","_re_html","html-num-fmt","_ext","_fnExternApiFunc","iApiIndex","internal","_Api","_api_register","_api_registerPlural","_re_dic","_re_new_lines","_re_date_start","_re_date_end","_empty","_intVal","integer","isFinite","_numToDecimal","decimalPoint","_isNumber","formatted","strType","parseFloat","_isHtml","_htmlNumeric","_stripHtml","prop2","_pluck_order","again","knew","sSelector","oOpts","api","traditional","fnAddData","flatten","fnAdjustColumnSizing","bRedraw","adjust","fnClearTable","fnClose","fnDeleteRow","fnDestroy","fnDraw","fnFilter","sInput","bShowGlobal","fnGetNodes","fnGetPosition","columnVisible","fnIsOpen","fnOpen","mHtml","fnPageChange","mAction","fnSetColumnVis","bShow","fnSettings","fnSort","aaSort","fnSortListener","nNode","fnCallback","listener","mRow","bAction","fnVersionCheck","_that","emptyInit","sId","bInitHandedOff","allSettings","bRetrieve","bDestroy","sDestroyWidth","dataTable","iDisplayLength","fnDrawCallback","fnServerParams","fnStateSaveParams","fnStateLoadParams","fnStateLoaded","fnRowCallback","fnCreatedRow","fnHeaderCallback","fnFooterCallback","fnInitComplete","fnPreDrawCallback","bJQueryUI","oJUIClasses","sTable","iDeferLoading","sUrl","getJSON","sStripeOdd","sStripeEven","stripeClasses","rowOne","asDestroyStripes","aoColumnsInit","anThs","getElementsByTagName","aoColumnDefs","oDef","sortedColumns","captions","tbody","__apiStruct","__arrayProto","_toSettings","mixed","jq","tables","ctxSettings","opts","Api","ctx","iterator","items","_selector_row_indexes","apiSelector","lastIndexOf","pluck","reduce","reduceRight","to$","toJQuery","unshift","scope","__dt_wrapper","struct","struc","methodExt","propExt","register","heir","registerPlural","pluralName","singularName","__table_selector","resetPaging","info","recordsDisplay","__reload","_selector_run","res","_selector_opts","_selector_first","inst","displayFiltered","__row_selector","sel","selInt","thatIdx","newRows","modRows","__details_add","klass","addRow","created","_details","_detailsShow","__details_remove","__details_display","__details_events","drawEvent","_child_obj","_child_mth","__re_column_selector","__column_selector","names","visColumns","__setColumnVis","recalc","calc","__cell_selector","allCells","rowSelector","columnSelector","invalidate","caseInsen","versionCheck","iThis","iThat","aThis","aThat","isDataTable","fnIsDataTable","fnTables","camelToHungarian","jqRows","jqTable","jqTbody","jqWrapper","unbind","bJUI","sSortIcon","wrapper","sSortJUIWrapper","bScrollCollapse","toFormat","JSON","parse","sessionStorage","localStorage","getItem","pathname","setItem","stringify","oPaginate","sFirst","sLast","sNext","sPrevious","sScrollX","sScrollXInner","sScrollY","aoRowCallback","aoHeaderCallback","aoFooterCallback","aoRowCreatedCallback","aoPreDrawCallback","aoInitComplete","aoStateSaveParams","aoStateLoadParams","aoStateLoaded","aoStateSave","aoStateLoad","aoServerParams","aoDestroyCallback","paginate","oPlugins","pageButton","sVersion","afnFiltering","aTypes","ofnSearch","oSort","afnSortData","oStdClasses","oPagination","sPageButton","sPageButtonActive","sPageButtonDisabled","sSortAsc","sSortDesc","sSortJUIAsc","sSortJUIDesc","_stateDefault","_sortIcon","_headerFooter","simple","simple_numbers","full_numbers","btnDisplay","btnClass","counter","attach","data-dt-idx","tabindex","activeEl","re1","re2","Infinity","date-pre","html-pre","string-pre","string-asc","string-desc","parsed","string","jqueryui","render","number","thousands","precision","negative","intPart","floatPart","toFixed","_fnCalculateEnd","dataTableSettings","dataTableExt","149","fnPagingInfo","iLength","iTotal","iFilteredTotal","iPage","iTotalPages","bootstrap","nPaging","fnClickHandler","els","oPaging","an","iHalf","iListLength","text","TableTools","normal","collection","print","oTags","liner","150","body_sizer","windowHeight","headerHeight","contentHeight","pageTransitions","transitions","transition_name","slimscroll","headerBg","slimScroll","slideDown","path","151","dom","overall_width","$elem","alwaysVisible","dataID","evt","addEventListener","screenfull","request"],"mappings":"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","file":"app.b81f4459eb1b0cdac4d5.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 121:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery_migrate__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery_migrate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_jquery_migrate__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_bootstrap__ = __webpack_require__(124);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_bootstrap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_bootstrap__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery_ui__ = __webpack_require__(137);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery_ui___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_jquery_ui__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_sparklines__ = __webpack_require__(139);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_sparklines___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_sparklines__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_bootstrap_select__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_bootstrap_select___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_bootstrap_select__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_moment__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_moment__);\n\n\n\n\n\n\n\n__webpack_require__(120);\n__webpack_require__(142);\n__webpack_require__(143);\n__webpack_require__(144);\n__webpack_require__(145);\n__webpack_require__(146);\n__webpack_require__(147);\n__webpack_require__(148);\n__webpack_require__(149);\n__webpack_require__(150);\n__webpack_require__(151);\n\n/***/ }),\n\n/***/ 124:\n/***/ (function(module, exports, __webpack_require__) {\n\n// This file is autogenerated via the `commonjs` Grunt task. You can require() this file in a CommonJS environment.\n__webpack_require__(125)\n__webpack_require__(126)\n__webpack_require__(127)\n__webpack_require__(128)\n__webpack_require__(129)\n__webpack_require__(130)\n__webpack_require__(131)\n__webpack_require__(132)\n__webpack_require__(133)\n__webpack_require__(134)\n__webpack_require__(135)\n__webpack_require__(136)\n\n/***/ }),\n\n/***/ 125:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================\n * Bootstrap: transition.js v3.3.7\n * http://getbootstrap.com/javascript/#transitions\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)\n  // ============================================================\n\n  function transitionEnd() {\n    var el = document.createElement('bootstrap')\n\n    var transEndEventNames = {\n      WebkitTransition : 'webkitTransitionEnd',\n      MozTransition    : 'transitionend',\n      OTransition      : 'oTransitionEnd otransitionend',\n      transition       : 'transitionend'\n    }\n\n    for (var name in transEndEventNames) {\n      if (el.style[name] !== undefined) {\n        return { end: transEndEventNames[name] }\n      }\n    }\n\n    return false // explicit for ie8 (  ._.)\n  }\n\n  // http://blog.alexmaccaw.com/css-transitions\n  $.fn.emulateTransitionEnd = function (duration) {\n    var called = false\n    var $el = this\n    $(this).one('bsTransitionEnd', function () { called = true })\n    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }\n    setTimeout(callback, duration)\n    return this\n  }\n\n  $(function () {\n    $.support.transition = transitionEnd()\n\n    if (!$.support.transition) return\n\n    $.event.special.bsTransitionEnd = {\n      bindType: $.support.transition.end,\n      delegateType: $.support.transition.end,\n      handle: function (e) {\n        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)\n      }\n    }\n  })\n\n}(jQuery);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 126:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================\n * Bootstrap: alert.js v3.3.7\n * http://getbootstrap.com/javascript/#alerts\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // ALERT CLASS DEFINITION\n  // ======================\n\n  var dismiss = '[data-dismiss=\"alert\"]'\n  var Alert   = function (el) {\n    $(el).on('click', dismiss, this.close)\n  }\n\n  Alert.VERSION = '3.3.7'\n\n  Alert.TRANSITION_DURATION = 150\n\n  Alert.prototype.close = function (e) {\n    var $this    = $(this)\n    var selector = $this.attr('data-target')\n\n    if (!selector) {\n      selector = $this.attr('href')\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n    }\n\n    var $parent = $(selector === '#' ? [] : selector)\n\n    if (e) e.preventDefault()\n\n    if (!$parent.length) {\n      $parent = $this.closest('.alert')\n    }\n\n    $parent.trigger(e = $.Event('close.bs.alert'))\n\n    if (e.isDefaultPrevented()) return\n\n    $parent.removeClass('in')\n\n    function removeElement() {\n      // detach from parent, fire event then clean up data\n      $parent.detach().trigger('closed.bs.alert').remove()\n    }\n\n    $.support.transition && $parent.hasClass('fade') ?\n      $parent\n        .one('bsTransitionEnd', removeElement)\n        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :\n      removeElement()\n  }\n\n\n  // ALERT PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this)\n      var data  = $this.data('bs.alert')\n\n      if (!data) $this.data('bs.alert', (data = new Alert(this)))\n      if (typeof option == 'string') data[option].call($this)\n    })\n  }\n\n  var old = $.fn.alert\n\n  $.fn.alert             = Plugin\n  $.fn.alert.Constructor = Alert\n\n\n  // ALERT NO CONFLICT\n  // =================\n\n  $.fn.alert.noConflict = function () {\n    $.fn.alert = old\n    return this\n  }\n\n\n  // ALERT DATA-API\n  // ==============\n\n  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)\n\n}(jQuery);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 127:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================\n * Bootstrap: button.js v3.3.7\n * http://getbootstrap.com/javascript/#buttons\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // BUTTON PUBLIC CLASS DEFINITION\n  // ==============================\n\n  var Button = function (element, options) {\n    this.$element  = $(element)\n    this.options   = $.extend({}, Button.DEFAULTS, options)\n    this.isLoading = false\n  }\n\n  Button.VERSION  = '3.3.7'\n\n  Button.DEFAULTS = {\n    loadingText: 'loading...'\n  }\n\n  Button.prototype.setState = function (state) {\n    var d    = 'disabled'\n    var $el  = this.$element\n    var val  = $el.is('input') ? 'val' : 'html'\n    var data = $el.data()\n\n    state += 'Text'\n\n    if (data.resetText == null) $el.data('resetText', $el[val]())\n\n    // push to event loop to allow forms to submit\n    setTimeout($.proxy(function () {\n      $el[val](data[state] == null ? this.options[state] : data[state])\n\n      if (state == 'loadingText') {\n        this.isLoading = true\n        $el.addClass(d).attr(d, d).prop(d, true)\n      } else if (this.isLoading) {\n        this.isLoading = false\n        $el.removeClass(d).removeAttr(d).prop(d, false)\n      }\n    }, this), 0)\n  }\n\n  Button.prototype.toggle = function () {\n    var changed = true\n    var $parent = this.$element.closest('[data-toggle=\"buttons\"]')\n\n    if ($parent.length) {\n      var $input = this.$element.find('input')\n      if ($input.prop('type') == 'radio') {\n        if ($input.prop('checked')) changed = false\n        $parent.find('.active').removeClass('active')\n        this.$element.addClass('active')\n      } else if ($input.prop('type') == 'checkbox') {\n        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false\n        this.$element.toggleClass('active')\n      }\n      $input.prop('checked', this.$element.hasClass('active'))\n      if (changed) $input.trigger('change')\n    } else {\n      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))\n      this.$element.toggleClass('active')\n    }\n  }\n\n\n  // BUTTON PLUGIN DEFINITION\n  // ========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.button')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.button', (data = new Button(this, options)))\n\n      if (option == 'toggle') data.toggle()\n      else if (option) data.setState(option)\n    })\n  }\n\n  var old = $.fn.button\n\n  $.fn.button             = Plugin\n  $.fn.button.Constructor = Button\n\n\n  // BUTTON NO CONFLICT\n  // ==================\n\n  $.fn.button.noConflict = function () {\n    $.fn.button = old\n    return this\n  }\n\n\n  // BUTTON DATA-API\n  // ===============\n\n  $(document)\n    .on('click.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n      var $btn = $(e.target).closest('.btn')\n      Plugin.call($btn, 'toggle')\n      if (!($(e.target).is('input[type=\"radio\"], input[type=\"checkbox\"]'))) {\n        // Prevent double click on radios, and the double selections (so cancellation) on checkboxes\n        e.preventDefault()\n        // The target component still receive the focus\n        if ($btn.is('input,button')) $btn.trigger('focus')\n        else $btn.find('input:visible,button:visible').first().trigger('focus')\n      }\n    })\n    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))\n    })\n\n}(jQuery);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 128:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================\n * Bootstrap: carousel.js v3.3.7\n * http://getbootstrap.com/javascript/#carousel\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // CAROUSEL CLASS DEFINITION\n  // =========================\n\n  var Carousel = function (element, options) {\n    this.$element    = $(element)\n    this.$indicators = this.$element.find('.carousel-indicators')\n    this.options     = options\n    this.paused      = null\n    this.sliding     = null\n    this.interval    = null\n    this.$active     = null\n    this.$items      = null\n\n    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))\n\n    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element\n      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))\n      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))\n  }\n\n  Carousel.VERSION  = '3.3.7'\n\n  Carousel.TRANSITION_DURATION = 600\n\n  Carousel.DEFAULTS = {\n    interval: 5000,\n    pause: 'hover',\n    wrap: true,\n    keyboard: true\n  }\n\n  Carousel.prototype.keydown = function (e) {\n    if (/input|textarea/i.test(e.target.tagName)) return\n    switch (e.which) {\n      case 37: this.prev(); break\n      case 39: this.next(); break\n      default: return\n    }\n\n    e.preventDefault()\n  }\n\n  Carousel.prototype.cycle = function (e) {\n    e || (this.paused = false)\n\n    this.interval && clearInterval(this.interval)\n\n    this.options.interval\n      && !this.paused\n      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))\n\n    return this\n  }\n\n  Carousel.prototype.getItemIndex = function (item) {\n    this.$items = item.parent().children('.item')\n    return this.$items.index(item || this.$active)\n  }\n\n  Carousel.prototype.getItemForDirection = function (direction, active) {\n    var activeIndex = this.getItemIndex(active)\n    var willWrap = (direction == 'prev' && activeIndex === 0)\n                || (direction == 'next' && activeIndex == (this.$items.length - 1))\n    if (willWrap && !this.options.wrap) return active\n    var delta = direction == 'prev' ? -1 : 1\n    var itemIndex = (activeIndex + delta) % this.$items.length\n    return this.$items.eq(itemIndex)\n  }\n\n  Carousel.prototype.to = function (pos) {\n    var that        = this\n    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))\n\n    if (pos > (this.$items.length - 1) || pos < 0) return\n\n    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, \"slid\"\n    if (activeIndex == pos) return this.pause().cycle()\n\n    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))\n  }\n\n  Carousel.prototype.pause = function (e) {\n    e || (this.paused = true)\n\n    if (this.$element.find('.next, .prev').length && $.support.transition) {\n      this.$element.trigger($.support.transition.end)\n      this.cycle(true)\n    }\n\n    this.interval = clearInterval(this.interval)\n\n    return this\n  }\n\n  Carousel.prototype.next = function () {\n    if (this.sliding) return\n    return this.slide('next')\n  }\n\n  Carousel.prototype.prev = function () {\n    if (this.sliding) return\n    return this.slide('prev')\n  }\n\n  Carousel.prototype.slide = function (type, next) {\n    var $active   = this.$element.find('.item.active')\n    var $next     = next || this.getItemForDirection(type, $active)\n    var isCycling = this.interval\n    var direction = type == 'next' ? 'left' : 'right'\n    var that      = this\n\n    if ($next.hasClass('active')) return (this.sliding = false)\n\n    var relatedTarget = $next[0]\n    var slideEvent = $.Event('slide.bs.carousel', {\n      relatedTarget: relatedTarget,\n      direction: direction\n    })\n    this.$element.trigger(slideEvent)\n    if (slideEvent.isDefaultPrevented()) return\n\n    this.sliding = true\n\n    isCycling && this.pause()\n\n    if (this.$indicators.length) {\n      this.$indicators.find('.active').removeClass('active')\n      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])\n      $nextIndicator && $nextIndicator.addClass('active')\n    }\n\n    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, \"slid\"\n    if ($.support.transition && this.$element.hasClass('slide')) {\n      $next.addClass(type)\n      $next[0].offsetWidth // force reflow\n      $active.addClass(direction)\n      $next.addClass(direction)\n      $active\n        .one('bsTransitionEnd', function () {\n          $next.removeClass([type, direction].join(' ')).addClass('active')\n          $active.removeClass(['active', direction].join(' '))\n          that.sliding = false\n          setTimeout(function () {\n            that.$element.trigger(slidEvent)\n          }, 0)\n        })\n        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)\n    } else {\n      $active.removeClass('active')\n      $next.addClass('active')\n      this.sliding = false\n      this.$element.trigger(slidEvent)\n    }\n\n    isCycling && this.cycle()\n\n    return this\n  }\n\n\n  // CAROUSEL PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.carousel')\n      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)\n      var action  = typeof option == 'string' ? option : options.slide\n\n      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))\n      if (typeof option == 'number') data.to(option)\n      else if (action) data[action]()\n      else if (options.interval) data.pause().cycle()\n    })\n  }\n\n  var old = $.fn.carousel\n\n  $.fn.carousel             = Plugin\n  $.fn.carousel.Constructor = Carousel\n\n\n  // CAROUSEL NO CONFLICT\n  // ====================\n\n  $.fn.carousel.noConflict = function () {\n    $.fn.carousel = old\n    return this\n  }\n\n\n  // CAROUSEL DATA-API\n  // =================\n\n  var clickHandler = function (e) {\n    var href\n    var $this   = $(this)\n    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '')) // strip for ie7\n    if (!$target.hasClass('carousel')) return\n    var options = $.extend({}, $target.data(), $this.data())\n    var slideIndex = $this.attr('data-slide-to')\n    if (slideIndex) options.interval = false\n\n    Plugin.call($target, options)\n\n    if (slideIndex) {\n      $target.data('bs.carousel').to(slideIndex)\n    }\n\n    e.preventDefault()\n  }\n\n  $(document)\n    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)\n    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)\n\n  $(window).on('load', function () {\n    $('[data-ride=\"carousel\"]').each(function () {\n      var $carousel = $(this)\n      Plugin.call($carousel, $carousel.data())\n    })\n  })\n\n}(jQuery);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 129:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================\n * Bootstrap: collapse.js v3.3.7\n * http://getbootstrap.com/javascript/#collapse\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n/* jshint latedef: false */\n\n+function ($) {\n  'use strict';\n\n  // COLLAPSE PUBLIC CLASS DEFINITION\n  // ================================\n\n  var Collapse = function (element, options) {\n    this.$element      = $(element)\n    this.options       = $.extend({}, Collapse.DEFAULTS, options)\n    this.$trigger      = $('[data-toggle=\"collapse\"][href=\"#' + element.id + '\"],' +\n                           '[data-toggle=\"collapse\"][data-target=\"#' + element.id + '\"]')\n    this.transitioning = null\n\n    if (this.options.parent) {\n      this.$parent = this.getParent()\n    } else {\n      this.addAriaAndCollapsedClass(this.$element, this.$trigger)\n    }\n\n    if (this.options.toggle) this.toggle()\n  }\n\n  Collapse.VERSION  = '3.3.7'\n\n  Collapse.TRANSITION_DURATION = 350\n\n  Collapse.DEFAULTS = {\n    toggle: true\n  }\n\n  Collapse.prototype.dimension = function () {\n    var hasWidth = this.$element.hasClass('width')\n    return hasWidth ? 'width' : 'height'\n  }\n\n  Collapse.prototype.show = function () {\n    if (this.transitioning || this.$element.hasClass('in')) return\n\n    var activesData\n    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')\n\n    if (actives && actives.length) {\n      activesData = actives.data('bs.collapse')\n      if (activesData && activesData.transitioning) return\n    }\n\n    var startEvent = $.Event('show.bs.collapse')\n    this.$element.trigger(startEvent)\n    if (startEvent.isDefaultPrevented()) return\n\n    if (actives && actives.length) {\n      Plugin.call(actives, 'hide')\n      activesData || actives.data('bs.collapse', null)\n    }\n\n    var dimension = this.dimension()\n\n    this.$element\n      .removeClass('collapse')\n      .addClass('collapsing')[dimension](0)\n      .attr('aria-expanded', true)\n\n    this.$trigger\n      .removeClass('collapsed')\n      .attr('aria-expanded', true)\n\n    this.transitioning = 1\n\n    var complete = function () {\n      this.$element\n        .removeClass('collapsing')\n        .addClass('collapse in')[dimension]('')\n      this.transitioning = 0\n      this.$element\n        .trigger('shown.bs.collapse')\n    }\n\n    if (!$.support.transition) return complete.call(this)\n\n    var scrollSize = $.camelCase(['scroll', dimension].join('-'))\n\n    this.$element\n      .one('bsTransitionEnd', $.proxy(complete, this))\n      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])\n  }\n\n  Collapse.prototype.hide = function () {\n    if (this.transitioning || !this.$element.hasClass('in')) return\n\n    var startEvent = $.Event('hide.bs.collapse')\n    this.$element.trigger(startEvent)\n    if (startEvent.isDefaultPrevented()) return\n\n    var dimension = this.dimension()\n\n    this.$element[dimension](this.$element[dimension]())[0].offsetHeight\n\n    this.$element\n      .addClass('collapsing')\n      .removeClass('collapse in')\n      .attr('aria-expanded', false)\n\n    this.$trigger\n      .addClass('collapsed')\n      .attr('aria-expanded', false)\n\n    this.transitioning = 1\n\n    var complete = function () {\n      this.transitioning = 0\n      this.$element\n        .removeClass('collapsing')\n        .addClass('collapse')\n        .trigger('hidden.bs.collapse')\n    }\n\n    if (!$.support.transition) return complete.call(this)\n\n    this.$element\n      [dimension](0)\n      .one('bsTransitionEnd', $.proxy(complete, this))\n      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)\n  }\n\n  Collapse.prototype.toggle = function () {\n    this[this.$element.hasClass('in') ? 'hide' : 'show']()\n  }\n\n  Collapse.prototype.getParent = function () {\n    return $(this.options.parent)\n      .find('[data-toggle=\"collapse\"][data-parent=\"' + this.options.parent + '\"]')\n      .each($.proxy(function (i, element) {\n        var $element = $(element)\n        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)\n      }, this))\n      .end()\n  }\n\n  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {\n    var isOpen = $element.hasClass('in')\n\n    $element.attr('aria-expanded', isOpen)\n    $trigger\n      .toggleClass('collapsed', !isOpen)\n      .attr('aria-expanded', isOpen)\n  }\n\n  function getTargetFromTrigger($trigger) {\n    var href\n    var target = $trigger.attr('data-target')\n      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '') // strip for ie7\n\n    return $(target)\n  }\n\n\n  // COLLAPSE PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.collapse')\n      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)\n\n      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false\n      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.collapse\n\n  $.fn.collapse             = Plugin\n  $.fn.collapse.Constructor = Collapse\n\n\n  // COLLAPSE NO CONFLICT\n  // ====================\n\n  $.fn.collapse.noConflict = function () {\n    $.fn.collapse = old\n    return this\n  }\n\n\n  // COLLAPSE DATA-API\n  // =================\n\n  $(document).on('click.bs.collapse.data-api', '[data-toggle=\"collapse\"]', function (e) {\n    var $this   = $(this)\n\n    if (!$this.attr('data-target')) e.preventDefault()\n\n    var $target = getTargetFromTrigger($this)\n    var data    = $target.data('bs.collapse')\n    var option  = data ? 'toggle' : $this.data()\n\n    Plugin.call($target, option)\n  })\n\n}(jQuery);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 130:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================\n * Bootstrap: dropdown.js v3.3.7\n * http://getbootstrap.com/javascript/#dropdowns\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // DROPDOWN CLASS DEFINITION\n  // =========================\n\n  var backdrop = '.dropdown-backdrop'\n  var toggle   = '[data-toggle=\"dropdown\"]'\n  var Dropdown = function (element) {\n    $(element).on('click.bs.dropdown', this.toggle)\n  }\n\n  Dropdown.VERSION = '3.3.7'\n\n  function getParent($this) {\n    var selector = $this.attr('data-target')\n\n    if (!selector) {\n      selector = $this.attr('href')\n      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n    }\n\n    var $parent = selector && $(selector)\n\n    return $parent && $parent.length ? $parent : $this.parent()\n  }\n\n  function clearMenus(e) {\n    if (e && e.which === 3) return\n    $(backdrop).remove()\n    $(toggle).each(function () {\n      var $this         = $(this)\n      var $parent       = getParent($this)\n      var relatedTarget = { relatedTarget: this }\n\n      if (!$parent.hasClass('open')) return\n\n      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return\n\n      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))\n\n      if (e.isDefaultPrevented()) return\n\n      $this.attr('aria-expanded', 'false')\n      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))\n    })\n  }\n\n  Dropdown.prototype.toggle = function (e) {\n    var $this = $(this)\n\n    if ($this.is('.disabled, :disabled')) return\n\n    var $parent  = getParent($this)\n    var isActive = $parent.hasClass('open')\n\n    clearMenus()\n\n    if (!isActive) {\n      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {\n        // if mobile we use a backdrop because click events don't delegate\n        $(document.createElement('div'))\n          .addClass('dropdown-backdrop')\n          .insertAfter($(this))\n          .on('click', clearMenus)\n      }\n\n      var relatedTarget = { relatedTarget: this }\n      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))\n\n      if (e.isDefaultPrevented()) return\n\n      $this\n        .trigger('focus')\n        .attr('aria-expanded', 'true')\n\n      $parent\n        .toggleClass('open')\n        .trigger($.Event('shown.bs.dropdown', relatedTarget))\n    }\n\n    return false\n  }\n\n  Dropdown.prototype.keydown = function (e) {\n    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return\n\n    var $this = $(this)\n\n    e.preventDefault()\n    e.stopPropagation()\n\n    if ($this.is('.disabled, :disabled')) return\n\n    var $parent  = getParent($this)\n    var isActive = $parent.hasClass('open')\n\n    if (!isActive && e.which != 27 || isActive && e.which == 27) {\n      if (e.which == 27) $parent.find(toggle).trigger('focus')\n      return $this.trigger('click')\n    }\n\n    var desc = ' li:not(.disabled):visible a'\n    var $items = $parent.find('.dropdown-menu' + desc)\n\n    if (!$items.length) return\n\n    var index = $items.index(e.target)\n\n    if (e.which == 38 && index > 0)                 index--         // up\n    if (e.which == 40 && index < $items.length - 1) index++         // down\n    if (!~index)                                    index = 0\n\n    $items.eq(index).trigger('focus')\n  }\n\n\n  // DROPDOWN PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this)\n      var data  = $this.data('bs.dropdown')\n\n      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))\n      if (typeof option == 'string') data[option].call($this)\n    })\n  }\n\n  var old = $.fn.dropdown\n\n  $.fn.dropdown             = Plugin\n  $.fn.dropdown.Constructor = Dropdown\n\n\n  // DROPDOWN NO CONFLICT\n  // ====================\n\n  $.fn.dropdown.noConflict = function () {\n    $.fn.dropdown = old\n    return this\n  }\n\n\n  // APPLY TO STANDARD DROPDOWN ELEMENTS\n  // ===================================\n\n  $(document)\n    .on('click.bs.dropdown.data-api', clearMenus)\n    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })\n    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)\n    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)\n    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)\n\n}(jQuery);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 131:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================\n * Bootstrap: modal.js v3.3.7\n * http://getbootstrap.com/javascript/#modals\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // MODAL CLASS DEFINITION\n  // ======================\n\n  var Modal = function (element, options) {\n    this.options             = options\n    this.$body               = $(document.body)\n    this.$element            = $(element)\n    this.$dialog             = this.$element.find('.modal-dialog')\n    this.$backdrop           = null\n    this.isShown             = null\n    this.originalBodyPad     = null\n    this.scrollbarWidth      = 0\n    this.ignoreBackdropClick = false\n\n    if (this.options.remote) {\n      this.$element\n        .find('.modal-content')\n        .load(this.options.remote, $.proxy(function () {\n          this.$element.trigger('loaded.bs.modal')\n        }, this))\n    }\n  }\n\n  Modal.VERSION  = '3.3.7'\n\n  Modal.TRANSITION_DURATION = 300\n  Modal.BACKDROP_TRANSITION_DURATION = 150\n\n  Modal.DEFAULTS = {\n    backdrop: true,\n    keyboard: true,\n    show: true\n  }\n\n  Modal.prototype.toggle = function (_relatedTarget) {\n    return this.isShown ? this.hide() : this.show(_relatedTarget)\n  }\n\n  Modal.prototype.show = function (_relatedTarget) {\n    var that = this\n    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })\n\n    this.$element.trigger(e)\n\n    if (this.isShown || e.isDefaultPrevented()) return\n\n    this.isShown = true\n\n    this.checkScrollbar()\n    this.setScrollbar()\n    this.$body.addClass('modal-open')\n\n    this.escape()\n    this.resize()\n\n    this.$element.on('click.dismiss.bs.modal', '[data-dismiss=\"modal\"]', $.proxy(this.hide, this))\n\n    this.$dialog.on('mousedown.dismiss.bs.modal', function () {\n      that.$element.one('mouseup.dismiss.bs.modal', function (e) {\n        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true\n      })\n    })\n\n    this.backdrop(function () {\n      var transition = $.support.transition && that.$element.hasClass('fade')\n\n      if (!that.$element.parent().length) {\n        that.$element.appendTo(that.$body) // don't move modals dom position\n      }\n\n      that.$element\n        .show()\n        .scrollTop(0)\n\n      that.adjustDialog()\n\n      if (transition) {\n        that.$element[0].offsetWidth // force reflow\n      }\n\n      that.$element.addClass('in')\n\n      that.enforceFocus()\n\n      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })\n\n      transition ?\n        that.$dialog // wait for modal to slide in\n          .one('bsTransitionEnd', function () {\n            that.$element.trigger('focus').trigger(e)\n          })\n          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\n        that.$element.trigger('focus').trigger(e)\n    })\n  }\n\n  Modal.prototype.hide = function (e) {\n    if (e) e.preventDefault()\n\n    e = $.Event('hide.bs.modal')\n\n    this.$element.trigger(e)\n\n    if (!this.isShown || e.isDefaultPrevented()) return\n\n    this.isShown = false\n\n    this.escape()\n    this.resize()\n\n    $(document).off('focusin.bs.modal')\n\n    this.$element\n      .removeClass('in')\n      .off('click.dismiss.bs.modal')\n      .off('mouseup.dismiss.bs.modal')\n\n    this.$dialog.off('mousedown.dismiss.bs.modal')\n\n    $.support.transition && this.$element.hasClass('fade') ?\n      this.$element\n        .one('bsTransitionEnd', $.proxy(this.hideModal, this))\n        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\n      this.hideModal()\n  }\n\n  Modal.prototype.enforceFocus = function () {\n    $(document)\n      .off('focusin.bs.modal') // guard against infinite focus loop\n      .on('focusin.bs.modal', $.proxy(function (e) {\n        if (document !== e.target &&\n            this.$element[0] !== e.target &&\n            !this.$element.has(e.target).length) {\n          this.$element.trigger('focus')\n        }\n      }, this))\n  }\n\n  Modal.prototype.escape = function () {\n    if (this.isShown && this.options.keyboard) {\n      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {\n        e.which == 27 && this.hide()\n      }, this))\n    } else if (!this.isShown) {\n      this.$element.off('keydown.dismiss.bs.modal')\n    }\n  }\n\n  Modal.prototype.resize = function () {\n    if (this.isShown) {\n      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))\n    } else {\n      $(window).off('resize.bs.modal')\n    }\n  }\n\n  Modal.prototype.hideModal = function () {\n    var that = this\n    this.$element.hide()\n    this.backdrop(function () {\n      that.$body.removeClass('modal-open')\n      that.resetAdjustments()\n      that.resetScrollbar()\n      that.$element.trigger('hidden.bs.modal')\n    })\n  }\n\n  Modal.prototype.removeBackdrop = function () {\n    this.$backdrop && this.$backdrop.remove()\n    this.$backdrop = null\n  }\n\n  Modal.prototype.backdrop = function (callback) {\n    var that = this\n    var animate = this.$element.hasClass('fade') ? 'fade' : ''\n\n    if (this.isShown && this.options.backdrop) {\n      var doAnimate = $.support.transition && animate\n\n      this.$backdrop = $(document.createElement('div'))\n        .addClass('modal-backdrop ' + animate)\n        .appendTo(this.$body)\n\n      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {\n        if (this.ignoreBackdropClick) {\n          this.ignoreBackdropClick = false\n          return\n        }\n        if (e.target !== e.currentTarget) return\n        this.options.backdrop == 'static'\n          ? this.$element[0].focus()\n          : this.hide()\n      }, this))\n\n      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow\n\n      this.$backdrop.addClass('in')\n\n      if (!callback) return\n\n      doAnimate ?\n        this.$backdrop\n          .one('bsTransitionEnd', callback)\n          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\n        callback()\n\n    } else if (!this.isShown && this.$backdrop) {\n      this.$backdrop.removeClass('in')\n\n      var callbackRemove = function () {\n        that.removeBackdrop()\n        callback && callback()\n      }\n      $.support.transition && this.$element.hasClass('fade') ?\n        this.$backdrop\n          .one('bsTransitionEnd', callbackRemove)\n          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\n        callbackRemove()\n\n    } else if (callback) {\n      callback()\n    }\n  }\n\n  // these following methods are used to handle overflowing modals\n\n  Modal.prototype.handleUpdate = function () {\n    this.adjustDialog()\n  }\n\n  Modal.prototype.adjustDialog = function () {\n    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight\n\n    this.$element.css({\n      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',\n      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''\n    })\n  }\n\n  Modal.prototype.resetAdjustments = function () {\n    this.$element.css({\n      paddingLeft: '',\n      paddingRight: ''\n    })\n  }\n\n  Modal.prototype.checkScrollbar = function () {\n    var fullWindowWidth = window.innerWidth\n    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8\n      var documentElementRect = document.documentElement.getBoundingClientRect()\n      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)\n    }\n    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth\n    this.scrollbarWidth = this.measureScrollbar()\n  }\n\n  Modal.prototype.setScrollbar = function () {\n    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)\n    this.originalBodyPad = document.body.style.paddingRight || ''\n    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)\n  }\n\n  Modal.prototype.resetScrollbar = function () {\n    this.$body.css('padding-right', this.originalBodyPad)\n  }\n\n  Modal.prototype.measureScrollbar = function () { // thx walsh\n    var scrollDiv = document.createElement('div')\n    scrollDiv.className = 'modal-scrollbar-measure'\n    this.$body.append(scrollDiv)\n    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth\n    this.$body[0].removeChild(scrollDiv)\n    return scrollbarWidth\n  }\n\n\n  // MODAL PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option, _relatedTarget) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.modal')\n      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)\n\n      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))\n      if (typeof option == 'string') data[option](_relatedTarget)\n      else if (options.show) data.show(_relatedTarget)\n    })\n  }\n\n  var old = $.fn.modal\n\n  $.fn.modal             = Plugin\n  $.fn.modal.Constructor = Modal\n\n\n  // MODAL NO CONFLICT\n  // =================\n\n  $.fn.modal.noConflict = function () {\n    $.fn.modal = old\n    return this\n  }\n\n\n  // MODAL DATA-API\n  // ==============\n\n  $(document).on('click.bs.modal.data-api', '[data-toggle=\"modal\"]', function (e) {\n    var $this   = $(this)\n    var href    = $this.attr('href')\n    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\\s]+$)/, ''))) // strip for ie7\n    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())\n\n    if ($this.is('a')) e.preventDefault()\n\n    $target.one('show.bs.modal', function (showEvent) {\n      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown\n      $target.one('hidden.bs.modal', function () {\n        $this.is(':visible') && $this.trigger('focus')\n      })\n    })\n    Plugin.call($target, option, this)\n  })\n\n}(jQuery);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 132:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================\n * Bootstrap: tooltip.js v3.3.7\n * http://getbootstrap.com/javascript/#tooltip\n * Inspired by the original jQuery.tipsy by Jason Frame\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // TOOLTIP PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Tooltip = function (element, options) {\n    this.type       = null\n    this.options    = null\n    this.enabled    = null\n    this.timeout    = null\n    this.hoverState = null\n    this.$element   = null\n    this.inState    = null\n\n    this.init('tooltip', element, options)\n  }\n\n  Tooltip.VERSION  = '3.3.7'\n\n  Tooltip.TRANSITION_DURATION = 150\n\n  Tooltip.DEFAULTS = {\n    animation: true,\n    placement: 'top',\n    selector: false,\n    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    container: false,\n    viewport: {\n      selector: 'body',\n      padding: 0\n    }\n  }\n\n  Tooltip.prototype.init = function (type, element, options) {\n    this.enabled   = true\n    this.type      = type\n    this.$element  = $(element)\n    this.options   = this.getOptions(options)\n    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))\n    this.inState   = { click: false, hover: false, focus: false }\n\n    if (this.$element[0] instanceof document.constructor && !this.options.selector) {\n      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')\n    }\n\n    var triggers = this.options.trigger.split(' ')\n\n    for (var i = triggers.length; i--;) {\n      var trigger = triggers[i]\n\n      if (trigger == 'click') {\n        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))\n      } else if (trigger != 'manual') {\n        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'\n        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'\n\n        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))\n        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))\n      }\n    }\n\n    this.options.selector ?\n      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :\n      this.fixTitle()\n  }\n\n  Tooltip.prototype.getDefaults = function () {\n    return Tooltip.DEFAULTS\n  }\n\n  Tooltip.prototype.getOptions = function (options) {\n    options = $.extend({}, this.getDefaults(), this.$element.data(), options)\n\n    if (options.delay && typeof options.delay == 'number') {\n      options.delay = {\n        show: options.delay,\n        hide: options.delay\n      }\n    }\n\n    return options\n  }\n\n  Tooltip.prototype.getDelegateOptions = function () {\n    var options  = {}\n    var defaults = this.getDefaults()\n\n    this._options && $.each(this._options, function (key, value) {\n      if (defaults[key] != value) options[key] = value\n    })\n\n    return options\n  }\n\n  Tooltip.prototype.enter = function (obj) {\n    var self = obj instanceof this.constructor ?\n      obj : $(obj.currentTarget).data('bs.' + this.type)\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\n      $(obj.currentTarget).data('bs.' + this.type, self)\n    }\n\n    if (obj instanceof $.Event) {\n      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true\n    }\n\n    if (self.tip().hasClass('in') || self.hoverState == 'in') {\n      self.hoverState = 'in'\n      return\n    }\n\n    clearTimeout(self.timeout)\n\n    self.hoverState = 'in'\n\n    if (!self.options.delay || !self.options.delay.show) return self.show()\n\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'in') self.show()\n    }, self.options.delay.show)\n  }\n\n  Tooltip.prototype.isInStateTrue = function () {\n    for (var key in this.inState) {\n      if (this.inState[key]) return true\n    }\n\n    return false\n  }\n\n  Tooltip.prototype.leave = function (obj) {\n    var self = obj instanceof this.constructor ?\n      obj : $(obj.currentTarget).data('bs.' + this.type)\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\n      $(obj.currentTarget).data('bs.' + this.type, self)\n    }\n\n    if (obj instanceof $.Event) {\n      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false\n    }\n\n    if (self.isInStateTrue()) return\n\n    clearTimeout(self.timeout)\n\n    self.hoverState = 'out'\n\n    if (!self.options.delay || !self.options.delay.hide) return self.hide()\n\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'out') self.hide()\n    }, self.options.delay.hide)\n  }\n\n  Tooltip.prototype.show = function () {\n    var e = $.Event('show.bs.' + this.type)\n\n    if (this.hasContent() && this.enabled) {\n      this.$element.trigger(e)\n\n      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])\n      if (e.isDefaultPrevented() || !inDom) return\n      var that = this\n\n      var $tip = this.tip()\n\n      var tipId = this.getUID(this.type)\n\n      this.setContent()\n      $tip.attr('id', tipId)\n      this.$element.attr('aria-describedby', tipId)\n\n      if (this.options.animation) $tip.addClass('fade')\n\n      var placement = typeof this.options.placement == 'function' ?\n        this.options.placement.call(this, $tip[0], this.$element[0]) :\n        this.options.placement\n\n      var autoToken = /\\s?auto?\\s?/i\n      var autoPlace = autoToken.test(placement)\n      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'\n\n      $tip\n        .detach()\n        .css({ top: 0, left: 0, display: 'block' })\n        .addClass(placement)\n        .data('bs.' + this.type, this)\n\n      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)\n      this.$element.trigger('inserted.bs.' + this.type)\n\n      var pos          = this.getPosition()\n      var actualWidth  = $tip[0].offsetWidth\n      var actualHeight = $tip[0].offsetHeight\n\n      if (autoPlace) {\n        var orgPlacement = placement\n        var viewportDim = this.getPosition(this.$viewport)\n\n        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :\n                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :\n                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :\n                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :\n                    placement\n\n        $tip\n          .removeClass(orgPlacement)\n          .addClass(placement)\n      }\n\n      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)\n\n      this.applyPlacement(calculatedOffset, placement)\n\n      var complete = function () {\n        var prevHoverState = that.hoverState\n        that.$element.trigger('shown.bs.' + that.type)\n        that.hoverState = null\n\n        if (prevHoverState == 'out') that.leave(that)\n      }\n\n      $.support.transition && this.$tip.hasClass('fade') ?\n        $tip\n          .one('bsTransitionEnd', complete)\n          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\n        complete()\n    }\n  }\n\n  Tooltip.prototype.applyPlacement = function (offset, placement) {\n    var $tip   = this.tip()\n    var width  = $tip[0].offsetWidth\n    var height = $tip[0].offsetHeight\n\n    // manually read margins because getBoundingClientRect includes difference\n    var marginTop = parseInt($tip.css('margin-top'), 10)\n    var marginLeft = parseInt($tip.css('margin-left'), 10)\n\n    // we must check for NaN for ie 8/9\n    if (isNaN(marginTop))  marginTop  = 0\n    if (isNaN(marginLeft)) marginLeft = 0\n\n    offset.top  += marginTop\n    offset.left += marginLeft\n\n    // $.fn.offset doesn't round pixel values\n    // so we use setOffset directly with our own function B-0\n    $.offset.setOffset($tip[0], $.extend({\n      using: function (props) {\n        $tip.css({\n          top: Math.round(props.top),\n          left: Math.round(props.left)\n        })\n      }\n    }, offset), 0)\n\n    $tip.addClass('in')\n\n    // check to see if placing tip in new offset caused the tip to resize itself\n    var actualWidth  = $tip[0].offsetWidth\n    var actualHeight = $tip[0].offsetHeight\n\n    if (placement == 'top' && actualHeight != height) {\n      offset.top = offset.top + height - actualHeight\n    }\n\n    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)\n\n    if (delta.left) offset.left += delta.left\n    else offset.top += delta.top\n\n    var isVertical          = /top|bottom/.test(placement)\n    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight\n    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'\n\n    $tip.offset(offset)\n    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)\n  }\n\n  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {\n    this.arrow()\n      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n      .css(isVertical ? 'top' : 'left', '')\n  }\n\n  Tooltip.prototype.setContent = function () {\n    var $tip  = this.tip()\n    var title = this.getTitle()\n\n    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)\n    $tip.removeClass('fade in top bottom left right')\n  }\n\n  Tooltip.prototype.hide = function (callback) {\n    var that = this\n    var $tip = $(this.$tip)\n    var e    = $.Event('hide.bs.' + this.type)\n\n    function complete() {\n      if (that.hoverState != 'in') $tip.detach()\n      if (that.$element) { // TODO: Check whether guarding this code with this `if` is really necessary.\n        that.$element\n          .removeAttr('aria-describedby')\n          .trigger('hidden.bs.' + that.type)\n      }\n      callback && callback()\n    }\n\n    this.$element.trigger(e)\n\n    if (e.isDefaultPrevented()) return\n\n    $tip.removeClass('in')\n\n    $.support.transition && $tip.hasClass('fade') ?\n      $tip\n        .one('bsTransitionEnd', complete)\n        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\n      complete()\n\n    this.hoverState = null\n\n    return this\n  }\n\n  Tooltip.prototype.fixTitle = function () {\n    var $e = this.$element\n    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {\n      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')\n    }\n  }\n\n  Tooltip.prototype.hasContent = function () {\n    return this.getTitle()\n  }\n\n  Tooltip.prototype.getPosition = function ($element) {\n    $element   = $element || this.$element\n\n    var el     = $element[0]\n    var isBody = el.tagName == 'BODY'\n\n    var elRect    = el.getBoundingClientRect()\n    if (elRect.width == null) {\n      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })\n    }\n    var isSvg = window.SVGElement && el instanceof window.SVGElement\n    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.\n    // See https://github.com/twbs/bootstrap/issues/20280\n    var elOffset  = isBody ? { top: 0, left: 0 } : (isSvg ? null : $element.offset())\n    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }\n    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null\n\n    return $.extend({}, elRect, scroll, outerDims, elOffset)\n  }\n\n  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {\n    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :\n           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :\n           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :\n        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }\n\n  }\n\n  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {\n    var delta = { top: 0, left: 0 }\n    if (!this.$viewport) return delta\n\n    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0\n    var viewportDimensions = this.getPosition(this.$viewport)\n\n    if (/right|left/.test(placement)) {\n      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll\n      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight\n      if (topEdgeOffset < viewportDimensions.top) { // top overflow\n        delta.top = viewportDimensions.top - topEdgeOffset\n      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset\n      }\n    } else {\n      var leftEdgeOffset  = pos.left - viewportPadding\n      var rightEdgeOffset = pos.left + viewportPadding + actualWidth\n      if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n        delta.left = viewportDimensions.left - leftEdgeOffset\n      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset\n      }\n    }\n\n    return delta\n  }\n\n  Tooltip.prototype.getTitle = function () {\n    var title\n    var $e = this.$element\n    var o  = this.options\n\n    title = $e.attr('data-original-title')\n      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)\n\n    return title\n  }\n\n  Tooltip.prototype.getUID = function (prefix) {\n    do prefix += ~~(Math.random() * 1000000)\n    while (document.getElementById(prefix))\n    return prefix\n  }\n\n  Tooltip.prototype.tip = function () {\n    if (!this.$tip) {\n      this.$tip = $(this.options.template)\n      if (this.$tip.length != 1) {\n        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')\n      }\n    }\n    return this.$tip\n  }\n\n  Tooltip.prototype.arrow = function () {\n    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))\n  }\n\n  Tooltip.prototype.enable = function () {\n    this.enabled = true\n  }\n\n  Tooltip.prototype.disable = function () {\n    this.enabled = false\n  }\n\n  Tooltip.prototype.toggleEnabled = function () {\n    this.enabled = !this.enabled\n  }\n\n  Tooltip.prototype.toggle = function (e) {\n    var self = this\n    if (e) {\n      self = $(e.currentTarget).data('bs.' + this.type)\n      if (!self) {\n        self = new this.constructor(e.currentTarget, this.getDelegateOptions())\n        $(e.currentTarget).data('bs.' + this.type, self)\n      }\n    }\n\n    if (e) {\n      self.inState.click = !self.inState.click\n      if (self.isInStateTrue()) self.enter(self)\n      else self.leave(self)\n    } else {\n      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)\n    }\n  }\n\n  Tooltip.prototype.destroy = function () {\n    var that = this\n    clearTimeout(this.timeout)\n    this.hide(function () {\n      that.$element.off('.' + that.type).removeData('bs.' + that.type)\n      if (that.$tip) {\n        that.$tip.detach()\n      }\n      that.$tip = null\n      that.$arrow = null\n      that.$viewport = null\n      that.$element = null\n    })\n  }\n\n\n  // TOOLTIP PLUGIN DEFINITION\n  // =========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.tooltip')\n      var options = typeof option == 'object' && option\n\n      if (!data && /destroy|hide/.test(option)) return\n      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.tooltip\n\n  $.fn.tooltip             = Plugin\n  $.fn.tooltip.Constructor = Tooltip\n\n\n  // TOOLTIP NO CONFLICT\n  // ===================\n\n  $.fn.tooltip.noConflict = function () {\n    $.fn.tooltip = old\n    return this\n  }\n\n}(jQuery);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 133:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================\n * Bootstrap: popover.js v3.3.7\n * http://getbootstrap.com/javascript/#popovers\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // POPOVER PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Popover = function (element, options) {\n    this.init('popover', element, options)\n  }\n\n  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')\n\n  Popover.VERSION  = '3.3.7'\n\n  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {\n    placement: 'right',\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>'\n  })\n\n\n  // NOTE: POPOVER EXTENDS tooltip.js\n  // ================================\n\n  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)\n\n  Popover.prototype.constructor = Popover\n\n  Popover.prototype.getDefaults = function () {\n    return Popover.DEFAULTS\n  }\n\n  Popover.prototype.setContent = function () {\n    var $tip    = this.tip()\n    var title   = this.getTitle()\n    var content = this.getContent()\n\n    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)\n    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events\n      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'\n    ](content)\n\n    $tip.removeClass('fade top bottom left right in')\n\n    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do\n    // this manually by checking the contents.\n    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()\n  }\n\n  Popover.prototype.hasContent = function () {\n    return this.getTitle() || this.getContent()\n  }\n\n  Popover.prototype.getContent = function () {\n    var $e = this.$element\n    var o  = this.options\n\n    return $e.attr('data-content')\n      || (typeof o.content == 'function' ?\n            o.content.call($e[0]) :\n            o.content)\n  }\n\n  Popover.prototype.arrow = function () {\n    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))\n  }\n\n\n  // POPOVER PLUGIN DEFINITION\n  // =========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.popover')\n      var options = typeof option == 'object' && option\n\n      if (!data && /destroy|hide/.test(option)) return\n      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.popover\n\n  $.fn.popover             = Plugin\n  $.fn.popover.Constructor = Popover\n\n\n  // POPOVER NO CONFLICT\n  // ===================\n\n  $.fn.popover.noConflict = function () {\n    $.fn.popover = old\n    return this\n  }\n\n}(jQuery);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 134:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================\n * Bootstrap: scrollspy.js v3.3.7\n * http://getbootstrap.com/javascript/#scrollspy\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // SCROLLSPY CLASS DEFINITION\n  // ==========================\n\n  function ScrollSpy(element, options) {\n    this.$body          = $(document.body)\n    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)\n    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)\n    this.selector       = (this.options.target || '') + ' .nav li > a'\n    this.offsets        = []\n    this.targets        = []\n    this.activeTarget   = null\n    this.scrollHeight   = 0\n\n    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))\n    this.refresh()\n    this.process()\n  }\n\n  ScrollSpy.VERSION  = '3.3.7'\n\n  ScrollSpy.DEFAULTS = {\n    offset: 10\n  }\n\n  ScrollSpy.prototype.getScrollHeight = function () {\n    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)\n  }\n\n  ScrollSpy.prototype.refresh = function () {\n    var that          = this\n    var offsetMethod  = 'offset'\n    var offsetBase    = 0\n\n    this.offsets      = []\n    this.targets      = []\n    this.scrollHeight = this.getScrollHeight()\n\n    if (!$.isWindow(this.$scrollElement[0])) {\n      offsetMethod = 'position'\n      offsetBase   = this.$scrollElement.scrollTop()\n    }\n\n    this.$body\n      .find(this.selector)\n      .map(function () {\n        var $el   = $(this)\n        var href  = $el.data('target') || $el.attr('href')\n        var $href = /^#./.test(href) && $(href)\n\n        return ($href\n          && $href.length\n          && $href.is(':visible')\n          && [[$href[offsetMethod]().top + offsetBase, href]]) || null\n      })\n      .sort(function (a, b) { return a[0] - b[0] })\n      .each(function () {\n        that.offsets.push(this[0])\n        that.targets.push(this[1])\n      })\n  }\n\n  ScrollSpy.prototype.process = function () {\n    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset\n    var scrollHeight = this.getScrollHeight()\n    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()\n    var offsets      = this.offsets\n    var targets      = this.targets\n    var activeTarget = this.activeTarget\n    var i\n\n    if (this.scrollHeight != scrollHeight) {\n      this.refresh()\n    }\n\n    if (scrollTop >= maxScroll) {\n      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)\n    }\n\n    if (activeTarget && scrollTop < offsets[0]) {\n      this.activeTarget = null\n      return this.clear()\n    }\n\n    for (i = offsets.length; i--;) {\n      activeTarget != targets[i]\n        && scrollTop >= offsets[i]\n        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])\n        && this.activate(targets[i])\n    }\n  }\n\n  ScrollSpy.prototype.activate = function (target) {\n    this.activeTarget = target\n\n    this.clear()\n\n    var selector = this.selector +\n      '[data-target=\"' + target + '\"],' +\n      this.selector + '[href=\"' + target + '\"]'\n\n    var active = $(selector)\n      .parents('li')\n      .addClass('active')\n\n    if (active.parent('.dropdown-menu').length) {\n      active = active\n        .closest('li.dropdown')\n        .addClass('active')\n    }\n\n    active.trigger('activate.bs.scrollspy')\n  }\n\n  ScrollSpy.prototype.clear = function () {\n    $(this.selector)\n      .parentsUntil(this.options.target, '.active')\n      .removeClass('active')\n  }\n\n\n  // SCROLLSPY PLUGIN DEFINITION\n  // ===========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.scrollspy')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.scrollspy\n\n  $.fn.scrollspy             = Plugin\n  $.fn.scrollspy.Constructor = ScrollSpy\n\n\n  // SCROLLSPY NO CONFLICT\n  // =====================\n\n  $.fn.scrollspy.noConflict = function () {\n    $.fn.scrollspy = old\n    return this\n  }\n\n\n  // SCROLLSPY DATA-API\n  // ==================\n\n  $(window).on('load.bs.scrollspy.data-api', function () {\n    $('[data-spy=\"scroll\"]').each(function () {\n      var $spy = $(this)\n      Plugin.call($spy, $spy.data())\n    })\n  })\n\n}(jQuery);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 135:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================\n * Bootstrap: tab.js v3.3.7\n * http://getbootstrap.com/javascript/#tabs\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // TAB CLASS DEFINITION\n  // ====================\n\n  var Tab = function (element) {\n    // jscs:disable requireDollarBeforejQueryAssignment\n    this.element = $(element)\n    // jscs:enable requireDollarBeforejQueryAssignment\n  }\n\n  Tab.VERSION = '3.3.7'\n\n  Tab.TRANSITION_DURATION = 150\n\n  Tab.prototype.show = function () {\n    var $this    = this.element\n    var $ul      = $this.closest('ul:not(.dropdown-menu)')\n    var selector = $this.data('target')\n\n    if (!selector) {\n      selector = $this.attr('href')\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n    }\n\n    if ($this.parent('li').hasClass('active')) return\n\n    var $previous = $ul.find('.active:last a')\n    var hideEvent = $.Event('hide.bs.tab', {\n      relatedTarget: $this[0]\n    })\n    var showEvent = $.Event('show.bs.tab', {\n      relatedTarget: $previous[0]\n    })\n\n    $previous.trigger(hideEvent)\n    $this.trigger(showEvent)\n\n    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return\n\n    var $target = $(selector)\n\n    this.activate($this.closest('li'), $ul)\n    this.activate($target, $target.parent(), function () {\n      $previous.trigger({\n        type: 'hidden.bs.tab',\n        relatedTarget: $this[0]\n      })\n      $this.trigger({\n        type: 'shown.bs.tab',\n        relatedTarget: $previous[0]\n      })\n    })\n  }\n\n  Tab.prototype.activate = function (element, container, callback) {\n    var $active    = container.find('> .active')\n    var transition = callback\n      && $.support.transition\n      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)\n\n    function next() {\n      $active\n        .removeClass('active')\n        .find('> .dropdown-menu > .active')\n          .removeClass('active')\n        .end()\n        .find('[data-toggle=\"tab\"]')\n          .attr('aria-expanded', false)\n\n      element\n        .addClass('active')\n        .find('[data-toggle=\"tab\"]')\n          .attr('aria-expanded', true)\n\n      if (transition) {\n        element[0].offsetWidth // reflow for transition\n        element.addClass('in')\n      } else {\n        element.removeClass('fade')\n      }\n\n      if (element.parent('.dropdown-menu').length) {\n        element\n          .closest('li.dropdown')\n            .addClass('active')\n          .end()\n          .find('[data-toggle=\"tab\"]')\n            .attr('aria-expanded', true)\n      }\n\n      callback && callback()\n    }\n\n    $active.length && transition ?\n      $active\n        .one('bsTransitionEnd', next)\n        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :\n      next()\n\n    $active.removeClass('in')\n  }\n\n\n  // TAB PLUGIN DEFINITION\n  // =====================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this)\n      var data  = $this.data('bs.tab')\n\n      if (!data) $this.data('bs.tab', (data = new Tab(this)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.tab\n\n  $.fn.tab             = Plugin\n  $.fn.tab.Constructor = Tab\n\n\n  // TAB NO CONFLICT\n  // ===============\n\n  $.fn.tab.noConflict = function () {\n    $.fn.tab = old\n    return this\n  }\n\n\n  // TAB DATA-API\n  // ============\n\n  var clickHandler = function (e) {\n    e.preventDefault()\n    Plugin.call($(this), 'show')\n  }\n\n  $(document)\n    .on('click.bs.tab.data-api', '[data-toggle=\"tab\"]', clickHandler)\n    .on('click.bs.tab.data-api', '[data-toggle=\"pill\"]', clickHandler)\n\n}(jQuery);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 136:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================\n * Bootstrap: affix.js v3.3.7\n * http://getbootstrap.com/javascript/#affix\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // AFFIX CLASS DEFINITION\n  // ======================\n\n  var Affix = function (element, options) {\n    this.options = $.extend({}, Affix.DEFAULTS, options)\n\n    this.$target = $(this.options.target)\n      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))\n      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))\n\n    this.$element     = $(element)\n    this.affixed      = null\n    this.unpin        = null\n    this.pinnedOffset = null\n\n    this.checkPosition()\n  }\n\n  Affix.VERSION  = '3.3.7'\n\n  Affix.RESET    = 'affix affix-top affix-bottom'\n\n  Affix.DEFAULTS = {\n    offset: 0,\n    target: window\n  }\n\n  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {\n    var scrollTop    = this.$target.scrollTop()\n    var position     = this.$element.offset()\n    var targetHeight = this.$target.height()\n\n    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false\n\n    if (this.affixed == 'bottom') {\n      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'\n      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'\n    }\n\n    var initializing   = this.affixed == null\n    var colliderTop    = initializing ? scrollTop : position.top\n    var colliderHeight = initializing ? targetHeight : height\n\n    if (offsetTop != null && scrollTop <= offsetTop) return 'top'\n    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'\n\n    return false\n  }\n\n  Affix.prototype.getPinnedOffset = function () {\n    if (this.pinnedOffset) return this.pinnedOffset\n    this.$element.removeClass(Affix.RESET).addClass('affix')\n    var scrollTop = this.$target.scrollTop()\n    var position  = this.$element.offset()\n    return (this.pinnedOffset = position.top - scrollTop)\n  }\n\n  Affix.prototype.checkPositionWithEventLoop = function () {\n    setTimeout($.proxy(this.checkPosition, this), 1)\n  }\n\n  Affix.prototype.checkPosition = function () {\n    if (!this.$element.is(':visible')) return\n\n    var height       = this.$element.height()\n    var offset       = this.options.offset\n    var offsetTop    = offset.top\n    var offsetBottom = offset.bottom\n    var scrollHeight = Math.max($(document).height(), $(document.body).height())\n\n    if (typeof offset != 'object')         offsetBottom = offsetTop = offset\n    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)\n    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)\n\n    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)\n\n    if (this.affixed != affix) {\n      if (this.unpin != null) this.$element.css('top', '')\n\n      var affixType = 'affix' + (affix ? '-' + affix : '')\n      var e         = $.Event(affixType + '.bs.affix')\n\n      this.$element.trigger(e)\n\n      if (e.isDefaultPrevented()) return\n\n      this.affixed = affix\n      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null\n\n      this.$element\n        .removeClass(Affix.RESET)\n        .addClass(affixType)\n        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')\n    }\n\n    if (affix == 'bottom') {\n      this.$element.offset({\n        top: scrollHeight - height - offsetBottom\n      })\n    }\n  }\n\n\n  // AFFIX PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.affix')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.affix\n\n  $.fn.affix             = Plugin\n  $.fn.affix.Constructor = Affix\n\n\n  // AFFIX NO CONFLICT\n  // =================\n\n  $.fn.affix.noConflict = function () {\n    $.fn.affix = old\n    return this\n  }\n\n\n  // AFFIX DATA-API\n  // ==============\n\n  $(window).on('load', function () {\n    $('[data-spy=\"affix\"]').each(function () {\n      var $spy = $(this)\n      var data = $spy.data()\n\n      data.offset = data.offset || {}\n\n      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom\n      if (data.offsetTop    != null) data.offset.top    = data.offsetTop\n\n      Plugin.call($spy, data)\n    })\n  })\n\n}(jQuery);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 137:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery UI Widget 1.12.1\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Widget\n//>>group: Core\n//>>description: Provides a factory for creating stateful widgets with a common API.\n//>>docs: http://api.jqueryui.com/jQuery.widget/\n//>>demos: http://jqueryui.com/widget/\n\n( function( factory ) {\n\tif ( true ) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1), __webpack_require__(138) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {\n\n\t\t// Browser globals\n\t\tfactory( jQuery );\n\t}\n}( function( $ ) {\n\nvar widgetUuid = 0;\nvar widgetSlice = Array.prototype.slice;\n\n$.cleanData = ( function( orig ) {\n\treturn function( elems ) {\n\t\tvar events, elem, i;\n\t\tfor ( i = 0; ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\ttry {\n\n\t\t\t\t// Only trigger remove when necessary to save time\n\t\t\t\tevents = $._data( elem, \"events\" );\n\t\t\t\tif ( events && events.remove ) {\n\t\t\t\t\t$( elem ).triggerHandler( \"remove\" );\n\t\t\t\t}\n\n\t\t\t// Http://bugs.jquery.com/ticket/8235\n\t\t\t} catch ( e ) {}\n\t\t}\n\t\torig( elems );\n\t};\n} )( $.cleanData );\n\n$.widget = function( name, base, prototype ) {\n\tvar existingConstructor, constructor, basePrototype;\n\n\t// ProxiedPrototype allows the provided prototype to remain unmodified\n\t// so that it can be used as a mixin for multiple widgets (#8876)\n\tvar proxiedPrototype = {};\n\n\tvar namespace = name.split( \".\" )[ 0 ];\n\tname = name.split( \".\" )[ 1 ];\n\tvar fullName = namespace + \"-\" + name;\n\n\tif ( !prototype ) {\n\t\tprototype = base;\n\t\tbase = $.Widget;\n\t}\n\n\tif ( $.isArray( prototype ) ) {\n\t\tprototype = $.extend.apply( null, [ {} ].concat( prototype ) );\n\t}\n\n\t// Create selector for plugin\n\t$.expr[ \":\" ][ fullName.toLowerCase() ] = function( elem ) {\n\t\treturn !!$.data( elem, fullName );\n\t};\n\n\t$[ namespace ] = $[ namespace ] || {};\n\texistingConstructor = $[ namespace ][ name ];\n\tconstructor = $[ namespace ][ name ] = function( options, element ) {\n\n\t\t// Allow instantiation without \"new\" keyword\n\t\tif ( !this._createWidget ) {\n\t\t\treturn new constructor( options, element );\n\t\t}\n\n\t\t// Allow instantiation without initializing for simple inheritance\n\t\t// must use \"new\" keyword (the code above always passes args)\n\t\tif ( arguments.length ) {\n\t\t\tthis._createWidget( options, element );\n\t\t}\n\t};\n\n\t// Extend with the existing constructor to carry over any static properties\n\t$.extend( constructor, existingConstructor, {\n\t\tversion: prototype.version,\n\n\t\t// Copy the object used to create the prototype in case we need to\n\t\t// redefine the widget later\n\t\t_proto: $.extend( {}, prototype ),\n\n\t\t// Track widgets that inherit from this widget in case this widget is\n\t\t// redefined after a widget inherits from it\n\t\t_childConstructors: []\n\t} );\n\n\tbasePrototype = new base();\n\n\t// We need to make the options hash a property directly on the new instance\n\t// otherwise we'll modify the options hash on the prototype that we're\n\t// inheriting from\n\tbasePrototype.options = $.widget.extend( {}, basePrototype.options );\n\t$.each( prototype, function( prop, value ) {\n\t\tif ( !$.isFunction( value ) ) {\n\t\t\tproxiedPrototype[ prop ] = value;\n\t\t\treturn;\n\t\t}\n\t\tproxiedPrototype[ prop ] = ( function() {\n\t\t\tfunction _super() {\n\t\t\t\treturn base.prototype[ prop ].apply( this, arguments );\n\t\t\t}\n\n\t\t\tfunction _superApply( args ) {\n\t\t\t\treturn base.prototype[ prop ].apply( this, args );\n\t\t\t}\n\n\t\t\treturn function() {\n\t\t\t\tvar __super = this._super;\n\t\t\t\tvar __superApply = this._superApply;\n\t\t\t\tvar returnValue;\n\n\t\t\t\tthis._super = _super;\n\t\t\t\tthis._superApply = _superApply;\n\n\t\t\t\treturnValue = value.apply( this, arguments );\n\n\t\t\t\tthis._super = __super;\n\t\t\t\tthis._superApply = __superApply;\n\n\t\t\t\treturn returnValue;\n\t\t\t};\n\t\t} )();\n\t} );\n\tconstructor.prototype = $.widget.extend( basePrototype, {\n\n\t\t// TODO: remove support for widgetEventPrefix\n\t\t// always use the name + a colon as the prefix, e.g., draggable:start\n\t\t// don't prefix for widgets that aren't DOM-based\n\t\twidgetEventPrefix: existingConstructor ? ( basePrototype.widgetEventPrefix || name ) : name\n\t}, proxiedPrototype, {\n\t\tconstructor: constructor,\n\t\tnamespace: namespace,\n\t\twidgetName: name,\n\t\twidgetFullName: fullName\n\t} );\n\n\t// If this widget is being redefined then we need to find all widgets that\n\t// are inheriting from it and redefine all of them so that they inherit from\n\t// the new version of this widget. We're essentially trying to replace one\n\t// level in the prototype chain.\n\tif ( existingConstructor ) {\n\t\t$.each( existingConstructor._childConstructors, function( i, child ) {\n\t\t\tvar childPrototype = child.prototype;\n\n\t\t\t// Redefine the child widget using the same prototype that was\n\t\t\t// originally used, but inherit from the new version of the base\n\t\t\t$.widget( childPrototype.namespace + \".\" + childPrototype.widgetName, constructor,\n\t\t\t\tchild._proto );\n\t\t} );\n\n\t\t// Remove the list of existing child constructors from the old constructor\n\t\t// so the old child constructors can be garbage collected\n\t\tdelete existingConstructor._childConstructors;\n\t} else {\n\t\tbase._childConstructors.push( constructor );\n\t}\n\n\t$.widget.bridge( name, constructor );\n\n\treturn constructor;\n};\n\n$.widget.extend = function( target ) {\n\tvar input = widgetSlice.call( arguments, 1 );\n\tvar inputIndex = 0;\n\tvar inputLength = input.length;\n\tvar key;\n\tvar value;\n\n\tfor ( ; inputIndex < inputLength; inputIndex++ ) {\n\t\tfor ( key in input[ inputIndex ] ) {\n\t\t\tvalue = input[ inputIndex ][ key ];\n\t\t\tif ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {\n\n\t\t\t\t// Clone objects\n\t\t\t\tif ( $.isPlainObject( value ) ) {\n\t\t\t\t\ttarget[ key ] = $.isPlainObject( target[ key ] ) ?\n\t\t\t\t\t\t$.widget.extend( {}, target[ key ], value ) :\n\n\t\t\t\t\t\t// Don't extend strings, arrays, etc. with objects\n\t\t\t\t\t\t$.widget.extend( {}, value );\n\n\t\t\t\t// Copy everything else by reference\n\t\t\t\t} else {\n\t\t\t\t\ttarget[ key ] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n};\n\n$.widget.bridge = function( name, object ) {\n\tvar fullName = object.prototype.widgetFullName || name;\n\t$.fn[ name ] = function( options ) {\n\t\tvar isMethodCall = typeof options === \"string\";\n\t\tvar args = widgetSlice.call( arguments, 1 );\n\t\tvar returnValue = this;\n\n\t\tif ( isMethodCall ) {\n\n\t\t\t// If this is an empty collection, we need to have the instance method\n\t\t\t// return undefined instead of the jQuery instance\n\t\t\tif ( !this.length && options === \"instance\" ) {\n\t\t\t\treturnValue = undefined;\n\t\t\t} else {\n\t\t\t\tthis.each( function() {\n\t\t\t\t\tvar methodValue;\n\t\t\t\t\tvar instance = $.data( this, fullName );\n\n\t\t\t\t\tif ( options === \"instance\" ) {\n\t\t\t\t\t\treturnValue = instance;\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !instance ) {\n\t\t\t\t\t\treturn $.error( \"cannot call methods on \" + name +\n\t\t\t\t\t\t\t\" prior to initialization; \" +\n\t\t\t\t\t\t\t\"attempted to call method '\" + options + \"'\" );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !$.isFunction( instance[ options ] ) || options.charAt( 0 ) === \"_\" ) {\n\t\t\t\t\t\treturn $.error( \"no such method '\" + options + \"' for \" + name +\n\t\t\t\t\t\t\t\" widget instance\" );\n\t\t\t\t\t}\n\n\t\t\t\t\tmethodValue = instance[ options ].apply( instance, args );\n\n\t\t\t\t\tif ( methodValue !== instance && methodValue !== undefined ) {\n\t\t\t\t\t\treturnValue = methodValue && methodValue.jquery ?\n\t\t\t\t\t\t\treturnValue.pushStack( methodValue.get() ) :\n\t\t\t\t\t\t\tmethodValue;\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// Allow multiple hashes to be passed on init\n\t\t\tif ( args.length ) {\n\t\t\t\toptions = $.widget.extend.apply( null, [ options ].concat( args ) );\n\t\t\t}\n\n\t\t\tthis.each( function() {\n\t\t\t\tvar instance = $.data( this, fullName );\n\t\t\t\tif ( instance ) {\n\t\t\t\t\tinstance.option( options || {} );\n\t\t\t\t\tif ( instance._init ) {\n\t\t\t\t\t\tinstance._init();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$.data( this, fullName, new object( options, this ) );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn returnValue;\n\t};\n};\n\n$.Widget = function( /* options, element */ ) {};\n$.Widget._childConstructors = [];\n\n$.Widget.prototype = {\n\twidgetName: \"widget\",\n\twidgetEventPrefix: \"\",\n\tdefaultElement: \"<div>\",\n\n\toptions: {\n\t\tclasses: {},\n\t\tdisabled: false,\n\n\t\t// Callbacks\n\t\tcreate: null\n\t},\n\n\t_createWidget: function( options, element ) {\n\t\telement = $( element || this.defaultElement || this )[ 0 ];\n\t\tthis.element = $( element );\n\t\tthis.uuid = widgetUuid++;\n\t\tthis.eventNamespace = \".\" + this.widgetName + this.uuid;\n\n\t\tthis.bindings = $();\n\t\tthis.hoverable = $();\n\t\tthis.focusable = $();\n\t\tthis.classesElementLookup = {};\n\n\t\tif ( element !== this ) {\n\t\t\t$.data( element, this.widgetFullName, this );\n\t\t\tthis._on( true, this.element, {\n\t\t\t\tremove: function( event ) {\n\t\t\t\t\tif ( event.target === element ) {\n\t\t\t\t\t\tthis.destroy();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t\tthis.document = $( element.style ?\n\n\t\t\t\t// Element within the document\n\t\t\t\telement.ownerDocument :\n\n\t\t\t\t// Element is window or document\n\t\t\t\telement.document || element );\n\t\t\tthis.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );\n\t\t}\n\n\t\tthis.options = $.widget.extend( {},\n\t\t\tthis.options,\n\t\t\tthis._getCreateOptions(),\n\t\t\toptions );\n\n\t\tthis._create();\n\n\t\tif ( this.options.disabled ) {\n\t\t\tthis._setOptionDisabled( this.options.disabled );\n\t\t}\n\n\t\tthis._trigger( \"create\", null, this._getCreateEventData() );\n\t\tthis._init();\n\t},\n\n\t_getCreateOptions: function() {\n\t\treturn {};\n\t},\n\n\t_getCreateEventData: $.noop,\n\n\t_create: $.noop,\n\n\t_init: $.noop,\n\n\tdestroy: function() {\n\t\tvar that = this;\n\n\t\tthis._destroy();\n\t\t$.each( this.classesElementLookup, function( key, value ) {\n\t\t\tthat._removeClass( value, key );\n\t\t} );\n\n\t\t// We can probably remove the unbind calls in 2.0\n\t\t// all event bindings should go through this._on()\n\t\tthis.element\n\t\t\t.off( this.eventNamespace )\n\t\t\t.removeData( this.widgetFullName );\n\t\tthis.widget()\n\t\t\t.off( this.eventNamespace )\n\t\t\t.removeAttr( \"aria-disabled\" );\n\n\t\t// Clean up events and states\n\t\tthis.bindings.off( this.eventNamespace );\n\t},\n\n\t_destroy: $.noop,\n\n\twidget: function() {\n\t\treturn this.element;\n\t},\n\n\toption: function( key, value ) {\n\t\tvar options = key;\n\t\tvar parts;\n\t\tvar curOption;\n\t\tvar i;\n\n\t\tif ( arguments.length === 0 ) {\n\n\t\t\t// Don't return a reference to the internal hash\n\t\t\treturn $.widget.extend( {}, this.options );\n\t\t}\n\n\t\tif ( typeof key === \"string\" ) {\n\n\t\t\t// Handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\n\t\t\toptions = {};\n\t\t\tparts = key.split( \".\" );\n\t\t\tkey = parts.shift();\n\t\t\tif ( parts.length ) {\n\t\t\t\tcurOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );\n\t\t\t\tfor ( i = 0; i < parts.length - 1; i++ ) {\n\t\t\t\t\tcurOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};\n\t\t\t\t\tcurOption = curOption[ parts[ i ] ];\n\t\t\t\t}\n\t\t\t\tkey = parts.pop();\n\t\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\t\treturn curOption[ key ] === undefined ? null : curOption[ key ];\n\t\t\t\t}\n\t\t\t\tcurOption[ key ] = value;\n\t\t\t} else {\n\t\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\t\treturn this.options[ key ] === undefined ? null : this.options[ key ];\n\t\t\t\t}\n\t\t\t\toptions[ key ] = value;\n\t\t\t}\n\t\t}\n\n\t\tthis._setOptions( options );\n\n\t\treturn this;\n\t},\n\n\t_setOptions: function( options ) {\n\t\tvar key;\n\n\t\tfor ( key in options ) {\n\t\t\tthis._setOption( key, options[ key ] );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t_setOption: function( key, value ) {\n\t\tif ( key === \"classes\" ) {\n\t\t\tthis._setOptionClasses( value );\n\t\t}\n\n\t\tthis.options[ key ] = value;\n\n\t\tif ( key === \"disabled\" ) {\n\t\t\tthis._setOptionDisabled( value );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t_setOptionClasses: function( value ) {\n\t\tvar classKey, elements, currentElements;\n\n\t\tfor ( classKey in value ) {\n\t\t\tcurrentElements = this.classesElementLookup[ classKey ];\n\t\t\tif ( value[ classKey ] === this.options.classes[ classKey ] ||\n\t\t\t\t\t!currentElements ||\n\t\t\t\t\t!currentElements.length ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// We are doing this to create a new jQuery object because the _removeClass() call\n\t\t\t// on the next line is going to destroy the reference to the current elements being\n\t\t\t// tracked. We need to save a copy of this collection so that we can add the new classes\n\t\t\t// below.\n\t\t\telements = $( currentElements.get() );\n\t\t\tthis._removeClass( currentElements, classKey );\n\n\t\t\t// We don't use _addClass() here, because that uses this.options.classes\n\t\t\t// for generating the string of classes. We want to use the value passed in from\n\t\t\t// _setOption(), this is the new value of the classes option which was passed to\n\t\t\t// _setOption(). We pass this value directly to _classes().\n\t\t\telements.addClass( this._classes( {\n\t\t\t\telement: elements,\n\t\t\t\tkeys: classKey,\n\t\t\t\tclasses: value,\n\t\t\t\tadd: true\n\t\t\t} ) );\n\t\t}\n\t},\n\n\t_setOptionDisabled: function( value ) {\n\t\tthis._toggleClass( this.widget(), this.widgetFullName + \"-disabled\", null, !!value );\n\n\t\t// If the widget is becoming disabled, then nothing is interactive\n\t\tif ( value ) {\n\t\t\tthis._removeClass( this.hoverable, null, \"ui-state-hover\" );\n\t\t\tthis._removeClass( this.focusable, null, \"ui-state-focus\" );\n\t\t}\n\t},\n\n\tenable: function() {\n\t\treturn this._setOptions( { disabled: false } );\n\t},\n\n\tdisable: function() {\n\t\treturn this._setOptions( { disabled: true } );\n\t},\n\n\t_classes: function( options ) {\n\t\tvar full = [];\n\t\tvar that = this;\n\n\t\toptions = $.extend( {\n\t\t\telement: this.element,\n\t\t\tclasses: this.options.classes || {}\n\t\t}, options );\n\n\t\tfunction processClassString( classes, checkOption ) {\n\t\t\tvar current, i;\n\t\t\tfor ( i = 0; i < classes.length; i++ ) {\n\t\t\t\tcurrent = that.classesElementLookup[ classes[ i ] ] || $();\n\t\t\t\tif ( options.add ) {\n\t\t\t\t\tcurrent = $( $.unique( current.get().concat( options.element.get() ) ) );\n\t\t\t\t} else {\n\t\t\t\t\tcurrent = $( current.not( options.element ).get() );\n\t\t\t\t}\n\t\t\t\tthat.classesElementLookup[ classes[ i ] ] = current;\n\t\t\t\tfull.push( classes[ i ] );\n\t\t\t\tif ( checkOption && options.classes[ classes[ i ] ] ) {\n\t\t\t\t\tfull.push( options.classes[ classes[ i ] ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._on( options.element, {\n\t\t\t\"remove\": \"_untrackClassesElement\"\n\t\t} );\n\n\t\tif ( options.keys ) {\n\t\t\tprocessClassString( options.keys.match( /\\S+/g ) || [], true );\n\t\t}\n\t\tif ( options.extra ) {\n\t\t\tprocessClassString( options.extra.match( /\\S+/g ) || [] );\n\t\t}\n\n\t\treturn full.join( \" \" );\n\t},\n\n\t_untrackClassesElement: function( event ) {\n\t\tvar that = this;\n\t\t$.each( that.classesElementLookup, function( key, value ) {\n\t\t\tif ( $.inArray( event.target, value ) !== -1 ) {\n\t\t\t\tthat.classesElementLookup[ key ] = $( value.not( event.target ).get() );\n\t\t\t}\n\t\t} );\n\t},\n\n\t_removeClass: function( element, keys, extra ) {\n\t\treturn this._toggleClass( element, keys, extra, false );\n\t},\n\n\t_addClass: function( element, keys, extra ) {\n\t\treturn this._toggleClass( element, keys, extra, true );\n\t},\n\n\t_toggleClass: function( element, keys, extra, add ) {\n\t\tadd = ( typeof add === \"boolean\" ) ? add : extra;\n\t\tvar shift = ( typeof element === \"string\" || element === null ),\n\t\t\toptions = {\n\t\t\t\textra: shift ? keys : extra,\n\t\t\t\tkeys: shift ? element : keys,\n\t\t\t\telement: shift ? this.element : element,\n\t\t\t\tadd: add\n\t\t\t};\n\t\toptions.element.toggleClass( this._classes( options ), add );\n\t\treturn this;\n\t},\n\n\t_on: function( suppressDisabledCheck, element, handlers ) {\n\t\tvar delegateElement;\n\t\tvar instance = this;\n\n\t\t// No suppressDisabledCheck flag, shuffle arguments\n\t\tif ( typeof suppressDisabledCheck !== \"boolean\" ) {\n\t\t\thandlers = element;\n\t\t\telement = suppressDisabledCheck;\n\t\t\tsuppressDisabledCheck = false;\n\t\t}\n\n\t\t// No element argument, shuffle and use this.element\n\t\tif ( !handlers ) {\n\t\t\thandlers = element;\n\t\t\telement = this.element;\n\t\t\tdelegateElement = this.widget();\n\t\t} else {\n\t\t\telement = delegateElement = $( element );\n\t\t\tthis.bindings = this.bindings.add( element );\n\t\t}\n\n\t\t$.each( handlers, function( event, handler ) {\n\t\t\tfunction handlerProxy() {\n\n\t\t\t\t// Allow widgets to customize the disabled handling\n\t\t\t\t// - disabled as an array instead of boolean\n\t\t\t\t// - disabled class as method for disabling individual parts\n\t\t\t\tif ( !suppressDisabledCheck &&\n\t\t\t\t\t\t( instance.options.disabled === true ||\n\t\t\t\t\t\t$( this ).hasClass( \"ui-state-disabled\" ) ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\n\t\t\t\t\t.apply( instance, arguments );\n\t\t\t}\n\n\t\t\t// Copy the guid so direct unbinding works\n\t\t\tif ( typeof handler !== \"string\" ) {\n\t\t\t\thandlerProxy.guid = handler.guid =\n\t\t\t\t\thandler.guid || handlerProxy.guid || $.guid++;\n\t\t\t}\n\n\t\t\tvar match = event.match( /^([\\w:-]*)\\s*(.*)$/ );\n\t\t\tvar eventName = match[ 1 ] + instance.eventNamespace;\n\t\t\tvar selector = match[ 2 ];\n\n\t\t\tif ( selector ) {\n\t\t\t\tdelegateElement.on( eventName, selector, handlerProxy );\n\t\t\t} else {\n\t\t\t\telement.on( eventName, handlerProxy );\n\t\t\t}\n\t\t} );\n\t},\n\n\t_off: function( element, eventName ) {\n\t\teventName = ( eventName || \"\" ).split( \" \" ).join( this.eventNamespace + \" \" ) +\n\t\t\tthis.eventNamespace;\n\t\telement.off( eventName ).off( eventName );\n\n\t\t// Clear the stack to avoid memory leaks (#10056)\n\t\tthis.bindings = $( this.bindings.not( element ).get() );\n\t\tthis.focusable = $( this.focusable.not( element ).get() );\n\t\tthis.hoverable = $( this.hoverable.not( element ).get() );\n\t},\n\n\t_delay: function( handler, delay ) {\n\t\tfunction handlerProxy() {\n\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\n\t\t\t\t.apply( instance, arguments );\n\t\t}\n\t\tvar instance = this;\n\t\treturn setTimeout( handlerProxy, delay || 0 );\n\t},\n\n\t_hoverable: function( element ) {\n\t\tthis.hoverable = this.hoverable.add( element );\n\t\tthis._on( element, {\n\t\t\tmouseenter: function( event ) {\n\t\t\t\tthis._addClass( $( event.currentTarget ), null, \"ui-state-hover\" );\n\t\t\t},\n\t\t\tmouseleave: function( event ) {\n\t\t\t\tthis._removeClass( $( event.currentTarget ), null, \"ui-state-hover\" );\n\t\t\t}\n\t\t} );\n\t},\n\n\t_focusable: function( element ) {\n\t\tthis.focusable = this.focusable.add( element );\n\t\tthis._on( element, {\n\t\t\tfocusin: function( event ) {\n\t\t\t\tthis._addClass( $( event.currentTarget ), null, \"ui-state-focus\" );\n\t\t\t},\n\t\t\tfocusout: function( event ) {\n\t\t\t\tthis._removeClass( $( event.currentTarget ), null, \"ui-state-focus\" );\n\t\t\t}\n\t\t} );\n\t},\n\n\t_trigger: function( type, event, data ) {\n\t\tvar prop, orig;\n\t\tvar callback = this.options[ type ];\n\n\t\tdata = data || {};\n\t\tevent = $.Event( event );\n\t\tevent.type = ( type === this.widgetEventPrefix ?\n\t\t\ttype :\n\t\t\tthis.widgetEventPrefix + type ).toLowerCase();\n\n\t\t// The original event may come from any element\n\t\t// so we need to reset the target on the new event\n\t\tevent.target = this.element[ 0 ];\n\n\t\t// Copy original event properties over to the new event\n\t\torig = event.originalEvent;\n\t\tif ( orig ) {\n\t\t\tfor ( prop in orig ) {\n\t\t\t\tif ( !( prop in event ) ) {\n\t\t\t\t\tevent[ prop ] = orig[ prop ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.element.trigger( event, data );\n\t\treturn !( $.isFunction( callback ) &&\n\t\t\tcallback.apply( this.element[ 0 ], [ event ].concat( data ) ) === false ||\n\t\t\tevent.isDefaultPrevented() );\n\t}\n};\n\n$.each( { show: \"fadeIn\", hide: \"fadeOut\" }, function( method, defaultEffect ) {\n\t$.Widget.prototype[ \"_\" + method ] = function( element, options, callback ) {\n\t\tif ( typeof options === \"string\" ) {\n\t\t\toptions = { effect: options };\n\t\t}\n\n\t\tvar hasOptions;\n\t\tvar effectName = !options ?\n\t\t\tmethod :\n\t\t\toptions === true || typeof options === \"number\" ?\n\t\t\t\tdefaultEffect :\n\t\t\t\toptions.effect || defaultEffect;\n\n\t\toptions = options || {};\n\t\tif ( typeof options === \"number\" ) {\n\t\t\toptions = { duration: options };\n\t\t}\n\n\t\thasOptions = !$.isEmptyObject( options );\n\t\toptions.complete = callback;\n\n\t\tif ( options.delay ) {\n\t\t\telement.delay( options.delay );\n\t\t}\n\n\t\tif ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {\n\t\t\telement[ method ]( options );\n\t\t} else if ( effectName !== method && element[ effectName ] ) {\n\t\t\telement[ effectName ]( options.duration, options.easing, callback );\n\t\t} else {\n\t\t\telement.queue( function( next ) {\n\t\t\t\t$( this )[ method ]();\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback.call( element[ 0 ] );\n\t\t\t\t}\n\t\t\t\tnext();\n\t\t\t} );\n\t\t}\n\t};\n} );\n\nreturn $.widget;\n\n} ) );\n\n\n/***/ }),\n\n/***/ 138:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;( function( factory ) {\n\tif ( true ) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(1) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {\n\n\t\t// Browser globals\n\t\tfactory( jQuery );\n\t}\n} ( function( $ ) {\n\n$.ui = $.ui || {};\n\nreturn $.ui.version = \"1.12.1\";\n\n} ) );\n\n\n/***/ }),\n\n/***/ 139:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\r\n    if (true) {\r\n        // AMD. Register as an anonymous module.\r\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n    } else if (typeof exports === 'object') {\r\n        // Node. Does not work with strict CommonJS, but\r\n        // only CommonJS-like enviroments that support module.exports,\r\n        // like Node.\r\n        module.exports = factory();\r\n    } else {\r\n        // Browser globals (root is window)\r\n        root.Sparkline = factory();\r\n  }\r\n}(this, function () {\r\n\r\n\r\n    function extend(specific, general){\r\n        var obj = {};\r\n        for(var key in general){\r\n            obj[key] = key in specific ? specific[key] : general[key];\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    function Sparkline(element, options){\r\n        this.element = element;\r\n        this.options = extend(options || {}, Sparkline.options);\r\n\r\n        init: {\r\n            this.element.innerHTML = \"<canvas></canvas>\";\r\n            this.canvas = this.element.firstChild;\r\n            this.context = this.canvas.getContext(\"2d\");\r\n            this.ratio = window.devicePixelRatio || 1;\r\n            \r\n            if(this.options.tooltip){\r\n                this.canvas.style.position = \"relative\";\r\n                this.canvas.onmousemove = showTooltip.bind(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    Sparkline.options = {\r\n        width: 100,\r\n        lineColor: \"black\",\r\n        lineWidth: 1,\r\n        startColor: \"transparent\",\r\n        endColor: \"red\",\r\n        maxColor: \"transparent\",\r\n        minColor: \"transparent\",\r\n        minValue: null,\r\n        maxValue: null,\r\n        dotRadius: 2.5,\r\n        tooltip: null\r\n    };\r\n\r\n    Sparkline.init = function(element, options){\r\n        return new Sparkline(element, options);\r\n    };\r\n\r\n    Sparkline.draw = function(element, points, options){\r\n        var sparkline = new Sparkline(element, options);\r\n        sparkline.draw(points);\r\n        return sparkline;\r\n    }\r\n\r\n    function getY(minValue, maxValue, offsetY, height, index){\r\n        var range = maxValue - minValue;\r\n        if(range == 0){\r\n          return offsetY + height/2;\r\n        }else{\r\n          return (offsetY + height) - ((this[index] - minValue) / range)*height;\r\n        }\r\n    }\r\n\r\n    function drawDot(radius, color, x, y){\r\n        this.beginPath();\r\n        this.fillStyle = color;\r\n        this.arc(x, y, radius, 0, Math.PI*2, false);\r\n        this.fill();\r\n    }\r\n  \r\n    function showTooltip(e){\r\n        var x = e.offsetX || e.layerX || 0;\r\n        var delta = ((this.options.width - this.options.dotRadius*2) / (this.points.length - 1));\r\n        var index = minmax(0, Math.round((x - this.options.dotRadius)/delta), this.points.length - 1);\r\n        \r\n        this.canvas.title = this.options.tooltip(this.points[index], index, this.points);\r\n    }\r\n\r\n    Sparkline.prototype.draw = function(points){\r\n\r\n        points = points || [];\r\n        this.points = points;\r\n        \r\n        this.canvas.width = this.options.width * this.ratio;\r\n        this.canvas.height = this.element.offsetHeight * this.ratio;\r\n        this.canvas.style.width = this.options.width + 'px';\r\n        this.canvas.style.height = this.element.offsetHeight + 'px';\r\n\r\n        var offsetX = this.options.dotRadius*this.ratio;\r\n        var offsetY = this.options.dotRadius*this.ratio;\r\n        var width = this.canvas.width - offsetX*2;\r\n        var height = this.canvas.height - offsetY*2;\r\n\r\n        var minValue = this.options.minValue || Math.min.apply(Math, points);\r\n        var maxValue = this.options.maxValue || Math.max.apply(Math, points);\r\n        var minX = offsetX;\r\n        var maxX = offsetX;\r\n\r\n        var x = offsetX;\r\n        var y = getY.bind(points, minValue, maxValue, offsetY, height);\r\n        var delta = width / (points.length - 1);\r\n\r\n        var dot = drawDot.bind(this.context, this.options.dotRadius*this.ratio);\r\n\r\n\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = this.options.lineColor;\r\n        this.context.lineWidth = this.options.lineWidth*this.ratio;\r\n\r\n        this.context.moveTo(x, y(0));\r\n        for(var i=1; i<points.length; i++){\r\n            x += delta;\r\n            this.context.lineTo(x, y(i));\r\n\r\n            minX = points[i] == minValue ? x : minX;\r\n            maxX = points[i] == maxValue ? x : maxX;\r\n        }\r\n        this.context.stroke();\r\n\r\n        dot(this.options.startColor, offsetX + (points.length == 1 ? width/2 : 0), y(0));\r\n        dot(this.options.endColor, offsetX + (points.length == 1 ? width/2 : width), y(i - 1));\r\n        dot(this.options.minColor, minX + (points.length == 1 ? width/2 : 0), y(points.indexOf(minValue)));\r\n        dot(this.options.maxColor, maxX + (points.length == 1 ? width/2 : 0), y(points.indexOf(maxValue)));\r\n    }\r\n    \r\n    function minmax(a, b, c){\r\n        return Math.max(a, Math.min(b, c));\r\n    }\r\n\r\n    return Sparkline;\r\n}));\n\n/***/ }),\n\n/***/ 142:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {/*\r\n * Superclick v1.0.0 - jQuery menu widget\r\n * Copyright (c) 2013 Joel Birch\r\n *\r\n * Dual licensed under the MIT and GPL licenses:\r\n * \thttp://www.opensource.org/licenses/mit-license.php\r\n * \thttp://www.gnu.org/licenses/gpl.html\r\n */\r\n\r\n;(function($) {\r\n\r\n\tvar methods = (function(){\r\n\t\t// private properties and methods go here\r\n\t\tvar c = {\r\n\t\t\t\tbcClass: 'sf-breadcrumb',\r\n\t\t\t\tmenuClass: 'sf-js-enabled',\r\n\t\t\t\tanchorClass: 'sf-with-ul',\r\n\t\t\t\tmenuArrowClass: 'sf-arrows'\r\n\t\t\t},\r\n\t\t\touterClick = (function() {\r\n\t\t\t\t$(window).load(function() {\r\n\t\t\t\t\t$('body').children().on('click.superclick', function() {\r\n\t\t\t\t\t\tvar $allMenus = $('.sf-js-enabled');\r\n\t\t\t\t\t\t$allMenus.superclick('reset');\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t})(),\r\n\t\t\ttoggleMenuClasses = function($menu, o) {\r\n\t\t\t\tvar classes = c.menuClass;\r\n\t\t\t\tif (o.cssArrows) {\r\n\t\t\t\t\tclasses += ' ' + c.menuArrowClass;\r\n\t\t\t\t}\r\n\t\t\t\t$menu.toggleClass(classes);\r\n\t\t\t},\r\n\t\t\tsetPathToCurrent = function($menu, o) {\r\n\t\t\t\treturn $menu.find('li.' + o.pathClass).slice(0, o.pathLevels)\r\n\t\t\t\t\t.addClass(o.activeClass + ' ' + c.bcClass)\r\n\t\t\t\t\t\t.filter(function() {\r\n\t\t\t\t\t\t\treturn ($(this).children('.sidebar-submenu').hide().show().length);\r\n\t\t\t\t\t\t}).removeClass(o.pathClass);\r\n\t\t\t},\r\n\t\t\ttoggleAnchorClass = function($li) {\r\n\t\t\t\t$li.children('a').toggleClass(c.anchorClass);\r\n\t\t\t},\r\n\t\t\ttoggleTouchAction = function($menu) {\r\n\t\t\t\tvar touchAction = $menu.css('ms-touch-action');\r\n\t\t\t\ttouchAction = (touchAction === 'pan-y') ? 'auto' : 'pan-y';\r\n\t\t\t\t$menu.css('ms-touch-action', touchAction);\r\n\t\t\t},\r\n\t\t\tclickHandler = function(e) {\r\n\t\t\t\tvar $this = $(this),\r\n\t\t\t\t\t$ul = $this.siblings('.sidebar-submenu'),\r\n\t\t\t\t\tfunc;\r\n\r\n\r\n\t\t\t\tif ($ul.length) {\r\n\t\t\t\t\tfunc = ($ul.is(':hidden')) ? over : out;\r\n\t\t\t\t\t$.proxy(func, $this.parent('li'))();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\t\t\tover = function() {\r\n\t\t\t\tvar $this = $(this),\r\n\t\t\t\t\to = getOptions($this);\r\n\t\t\t\t$this.siblings().superclick('hide').end().superclick('show');\r\n\t\t\t},\r\n\t\t\tout = function() {\r\n\t\t\t\tvar $this = $(this),\r\n\t\t\t\t\to = getOptions($this);\r\n\t\t\t\t$.proxy(close, $this, o)();\r\n\t\t\t},\r\n\t\t\tclose = function(o) {\r\n\t\t\t\to.retainPath = ( $.inArray(this[0], o.$path) > -1);\r\n\t\t\t\tthis.superclick('hide');\r\n\r\n\t\t\t\tif (!this.parents('.' + o.activeClass).length) {\r\n\t\t\t\t\to.onIdle.call(getMenu(this));\r\n\t\t\t\t\tif (o.$path.length) {\r\n\t\t\t\t\t\t$.proxy(over, o.$path)();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tgetMenu = function($el) {\r\n\t\t\t\treturn $el.closest('.' + c.menuClass);\r\n\t\t\t},\r\n\t\t\tgetOptions = function($el) {\r\n\t\t\t\treturn getMenu($el).data('sf-options');\r\n\t\t\t};\r\n\r\n\t\treturn {\r\n\t\t\t// public methods\r\n\t\t\thide: function(instant) {\r\n\t\t\t\tif (this.length) {\r\n\t\t\t\t\tvar $this = this,\r\n\t\t\t\t\t\to = getOptions($this);\r\n\t\t\t\t\t\tif (!o) {\r\n\t\t\t\t\t\t\treturn this;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tvar not = (o.retainPath === true) ? o.$path : '',\r\n\t\t\t\t\t\t$ul = $this.find('li.' + o.activeClass).add(this).not(not).removeClass(o.activeClass).children('.sidebar-submenu'),\r\n\t\t\t\t\t\tspeed = o.speedOut;\r\n\r\n\t\t\t\t\tif (instant) {\r\n\t\t\t\t\t\t$ul.show();\r\n\t\t\t\t\t\tspeed = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\to.retainPath = false;\r\n\t\t\t\t\to.onBeforeHide.call($ul);\r\n\t\t\t\t\t$ul.stop(true, true).animate(o.animationOut, speed, function() {\r\n\t\t\t\t\t\tvar $this = $(this);\r\n\t\t\t\t\t\to.onHide.call($this);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\t\t\tshow: function() {\r\n\t\t\t\tvar o = getOptions(this);\r\n\t\t\t\tif (!o) {\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t}\r\n\t\t\t\tvar $this = this.addClass(o.activeClass),\r\n\t\t\t\t\t$ul = $this.children('.sidebar-submenu');\r\n\r\n\t\t\t\to.onBeforeShow.call($ul);\r\n\t\t\t\t$ul.stop(true, true).animate(o.animation, o.speed, function() {\r\n\t\t\t\t\to.onShow.call($ul);\r\n\t\t\t\t});\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\t\t\tdestroy: function() {\r\n\t\t\t\treturn this.each(function(){\r\n\t\t\t\t\tvar $this = $(this),\r\n\t\t\t\t\t\to = $this.data('sf-options'),\r\n\t\t\t\t\t\t$liHasUl = $this.find('li:has(ul)');\r\n\t\t\t\t\tif (!o) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttoggleMenuClasses($this, o);\r\n\t\t\t\t\ttoggleAnchorClass($liHasUl);\r\n\t\t\t\t\ttoggleTouchAction($this);\r\n\t\t\t\t\t// remove event handlers\r\n\t\t\t\t\t$this.off('.superclick');\r\n\t\t\t\t\t// clear animation's inline display style\r\n\t\t\t\t\t$liHasUl.children('.sidebar-submenu').attr('style', function(i, style){\r\n\t\t\t\t\t\treturn style.replace(/display[^;]+;?/g, '');\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// reset 'current' path classes\r\n\t\t\t\t\to.$path.removeClass(o.activeClass + ' ' + c.bcClass).addClass(o.pathClass);\r\n\t\t\t\t\t$this.find('.' + o.activeClass).removeClass(o.activeClass);\r\n\t\t\t\t\to.onDestroy.call($this);\r\n\t\t\t\t\t$this.removeData('sf-options');\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\treset: function() {\r\n\t\t\t\treturn this.each(function(){\r\n\t\t\t\t\tvar $menu = $(this),\r\n\t\t\t\t\t\to = getOptions($menu),\r\n\t\t\t\t\t\t$openLis = $( $menu.find('.' + o.activeClass).toArray().reverse() );\r\n\t\t\t\t\t$openLis.children('a').trigger('click');\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tinit: function(op){\r\n\t\t\t\treturn this.each(function() {\r\n\t\t\t\t\tvar $this = $(this);\r\n\t\t\t\t\tif ($this.data('sf-options')) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar o = $.extend({}, $.fn.superclick.defaults, op),\r\n\t\t\t\t\t\t$liHasUl = $this.find('li:has(ul)');\r\n\t\t\t\t\to.$path = setPathToCurrent($this, o);\r\n\r\n\t\t\t\t\t$this.data('sf-options', o);\r\n\r\n\t\t\t\t\ttoggleMenuClasses($this, o);\r\n\t\t\t\t\ttoggleAnchorClass($liHasUl);\r\n\t\t\t\t\ttoggleTouchAction($this);\r\n\t\t\t\t\t$this.on('click.superclick', 'a', clickHandler);\r\n\r\n\t\t\t\t\t$liHasUl.not('.' + c.bcClass).superclick('hide',true);\r\n\r\n\t\t\t\t\to.onInit.call(this);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t})();\r\n\r\n\t$.fn.superclick = function(method, args) {\r\n\t\tif (methods[method]) {\r\n\t\t\treturn methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\r\n\t\t}\r\n\t\telse if (typeof method === 'object' || ! method) {\r\n\t\t\treturn methods.init.apply(this, arguments);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn $.error('Method ' +  method + ' does not exist on jQuery.fn.superclick');\r\n\t\t}\r\n\t};\r\n\r\n\t$.fn.superclick.defaults = {\r\n\t\tactiveClass: 'sfHover', // keep 'hover' in classname for compatibility reasons\r\n\t\tpathClass: 'overrideThisToUse',\r\n\t\tpathLevels: 1,\r\n\t\tanimation: {opacity:'show'},\r\n\t\tanimationOut: {opacity:'hide'},\r\n\t\tspeed: 'normal',\r\n\t\tspeedOut: 'fast',\r\n\t\tcssArrows: true,\r\n\t\tonInit: $.noop,\r\n\t\tonBeforeShow: $.noop,\r\n\t\tonShow: $.noop,\r\n\t\tonBeforeHide: $.noop,\r\n\t\tonHide: $.noop,\r\n\t\tonIdle: $.noop,\r\n\t\tonDestroy: $.noop\r\n\t};\r\n\r\n})(jQuery);\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 143:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function($) {/* Progress bars */\r\n\r\nfunction progress(percent, element) {\r\n    var progressBarWidth = percent * element.width() / 100;\r\n\r\n    element.find('.progressbar-value').animate({ width: progressBarWidth }, 1200);\r\n}\r\n\r\n$(document).on('ready', function() {\r\n\r\n    $('.progressbar').each(function() {\r\n        var bar = $(this);\r\n        var max = $(this).attr('data-value');\r\n\r\n        progress(max, bar);\r\n    });\r\n\r\n});\r\n\r\n$(function(){\r\n\r\n    $('#header-right, .updateEasyPieChart, .complete-user-profile, #progress-dropdown, .progress-box').hover(function () {\r\n\r\n        $('.progressbar').each(function() {\r\n            var bar = $(this);\r\n            var max = $(this).attr('data-value');\r\n\r\n            progress(max, bar);\r\n        });\r\n\r\n    });\r\n\r\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 144:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {(function( $ ) {\r\n    $.fn.simpleCheckbox = function(options) {\r\n        var defaults = {\r\n            newElementClass: 'switch-toggle',\r\n            activeElementClass: 'switch-on'\r\n        };\r\n        var options = $.extend(defaults, options);\r\n        this.each(function() {\r\n            //Assign the current checkbox to obj\r\n            var obj = $(this);\r\n            //Create new span element to be styled\r\n            var newObj = $('<div/>', {\r\n                'id': '#' + obj.attr('id'),\r\n                'class': options.newElementClass,\r\n                'style': 'display: block;'\r\n            }).insertAfter(this);\r\n            //Make sure pre-checked boxes are rendered as checked\r\n            if(obj.is(':checked')) {\r\n                newObj.addClass(options.activeElementClass);\r\n            }\r\n            obj.hide(); //Hide original checkbox\r\n            //Labels can be painful, let's fix that\r\n            if($('[for=' + obj.attr('id') + ']').length) {\r\n\r\n                var label = $('[for=' + obj.attr('id') + ']');\r\n                label.click(function() {\r\n                    newObj.trigger('click'); //Force the label to fire our element\r\n                    return false;\r\n                });\r\n            }\r\n            //Attach a click handler\r\n            newObj.click(function() {\r\n                //Assign current clicked object\r\n                var obj = $(this);\r\n                //Check the current state of the checkbox\r\n                if(obj.hasClass(options.activeElementClass)) {\r\n                    obj.removeClass(options.activeElementClass);\r\n                    $(obj.attr('id')).attr('checked',false);\r\n                } else {\r\n                    obj.addClass(options.activeElementClass);\r\n                    $(obj.attr('id')).attr('checked',true);\r\n                }\r\n                //Kill the click function\r\n                return false;\r\n            });\r\n        });\r\n    };\r\n})(jQuery);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 145:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {// -----------------------------------\r\n// Slidebars\r\n// Development version, do not use this in your site, use the latest in the distribution folder.\r\n// http://plugins.adchsm.me/slidebars/\r\n//\r\n// Written by Adam Smith\r\n// http://www.adchsm.me/\r\n//\r\n// Released under MIT License\r\n// http://plugins.adchsm.me/slidebars/license.txt\r\n//\r\n// ---------------------\r\n// Index of Slidebars.js\r\n//\r\n// 001 - Default Settings\r\n// 002 - Feature Detection\r\n// 003 - User Agents\r\n// 004 - Setup\r\n// 005 - Animation\r\n// 006 - Operations\r\n// 007 - API\r\n// 008 - User Input\r\n\r\n;(function($) {\r\n\r\n    $.slidebars = function(options) {\r\n\r\n        // ----------------------\r\n        // 001 - Default Settings\r\n\r\n        var settings = $.extend({\r\n            siteClose: true, // true or false - Enable closing of Slidebars by clicking on #sb-site.\r\n            scrollLock: false, // true or false - Prevent scrolling of site when a Slidebar is open.\r\n            disableOver: false, // integer or false - Hide Slidebars over a specific width.\r\n            hideControlClasses: false // true or false - Hide controls at same width as disableOver.\r\n        }, options);\r\n\r\n        // -----------------------\r\n        // 002 - Feature Detection\r\n\r\n        var test = document.createElement('div').style, // Create element to test on.\r\n            supportTransition = false, // Variable for testing transitions.\r\n            supportTransform = false; // variable for testing transforms.\r\n\r\n        // Test for CSS Transitions\r\n        if (test.MozTransition === '' || test.WebkitTransition === '' || test.OTransition === '' || test.transition === '') supportTransition = true;\r\n\r\n        // Test for CSS Transforms\r\n        if (test.MozTransform === '' || test.WebkitTransform === '' || test.OTransform === '' || test.transform === '') supportTransform = true;\r\n\r\n        // -----------------\r\n        // 003 - User Agents\r\n\r\n        var ua = navigator.userAgent, // Get user agent string.\r\n            android = false, // Variable for storing android version.\r\n            iOS = false; // Variable for storing iOS version.\r\n\r\n        if (/Android/.test(ua)) { // Detect Android in user agent string.\r\n            android = ua.substr(ua.indexOf('Android')+8, 3); // Set version of Android.\r\n        } else if (/(iPhone|iPod|iPad)/.test(ua)) { // Detect iOS in user agent string.\r\n            iOS = ua.substr(ua.indexOf('OS ')+3, 3).replace('_', '.'); // Set version of iOS.\r\n        }\r\n\r\n        if (android && android < 3 || iOS && iOS < 5) $('html').addClass('sb-static'); // Add helper class for older versions of Android & iOS.\r\n\r\n        // -----------\r\n        // 004 - Setup\r\n\r\n        // Site container\r\n        var $site = $('#sb-site, .sb-site-container'); // Cache the selector.\r\n\r\n        // Left Slidebar\r\n        if ($('.sb-left').length) { // Check if the left Slidebar exists.\r\n            var $left = $('.sb-left'), // Cache the selector.\r\n                leftActive = false; // Used to check whether the left Slidebar is open or closed.\r\n        }\r\n\r\n        // Right Slidebar\r\n        if ($('.sb-right').length) { // Check if the right Slidebar exists.\r\n            var $right = $('.sb-right'), // Cache the selector.\r\n                rightActive = false; // Used to check whether the right Slidebar is open or closed.\r\n        }\r\n\r\n        var init = false, // Initialisation variable.\r\n            windowWidth = $(window).width(), // Get width of window.\r\n            $controls = $('.sb-toggle-left, .sb-toggle-right, .sb-open-left, .sb-open-right, .sb-close'), // Cache the control classes.\r\n            $slide = $('.sb-slide'); // Cache users elements to animate.\r\n\r\n        // Initailise Slidebars\r\n        function initialise() {\r\n            if (!settings.disableOver || (typeof settings.disableOver === 'number' && settings.disableOver >= windowWidth)) { // False or larger than window size.\r\n                init = true; // true enabled Slidebars to open.\r\n                $('html').addClass('sb-init'); // Add helper class.\r\n                if (settings.hideControlClasses) $controls.removeClass('sb-hide'); // Remove class just incase Slidebars was originally disabled.\r\n                css(); // Set required inline styles.\r\n            } else if (typeof settings.disableOver === 'number' && settings.disableOver < windowWidth) { // Less than window size.\r\n                init = false; // false stop Slidebars from opening.\r\n                $('html').removeClass('sb-init'); // Remove helper class.\r\n                if (settings.hideControlClasses) $controls.addClass('sb-hide'); // Hide controls\r\n                $site.css('minHeight', ''); // Remove minimum height.\r\n                if (leftActive || rightActive) close(); // Close Slidebars if open.\r\n            }\r\n        }\r\n        initialise();\r\n\r\n        // Inline CSS\r\n        function css() {\r\n            // Set minimum height.\r\n            $site.css('minHeight', ''); // Reset minimum height.\r\n            $site.css('minHeight', $('html').height() + 'px'); // Set minimum height of the site to the minimum height of the html.\r\n\r\n            // Custom Slidebar widths.\r\n            if ($left && $left.hasClass('sb-width-custom')) $left.css('width', $left.attr('data-sb-width')); // Set user custom width.\r\n            if ($right && $right.hasClass('sb-width-custom')) $right.css('width', $right.attr('data-sb-width')); // Set user custom width.\r\n\r\n            // Set off-canvas margins for Slidebars with push and overlay animations.\r\n            if ($left && ($left.hasClass('sb-style-push') || $left.hasClass('sb-style-overlay'))) $left.css('marginLeft', '-' + $left.css('width'));\r\n            if ($right && ($right.hasClass('sb-style-push') || $right.hasClass('sb-style-overlay'))) $right.css('marginRight', '-' + $right.css('width'));\r\n\r\n            // Site scroll locking.\r\n            if (settings.scrollLock) $('html').addClass('sb-scroll-lock');\r\n        }\r\n\r\n        // Resize Functions\r\n        $(window).resize(function() {\r\n            var resizedWindowWidth = $(window).width(); // Get resized window width.\r\n            if (windowWidth !== resizedWindowWidth) { // Slidebars is running and window was actually resized.\r\n                windowWidth = resizedWindowWidth; // Set the new window width.\r\n                initialise(); // Call initalise to see if Slidebars should still be running.\r\n                if (leftActive) open('left'); // If left Slidebar is open, calling open will ensure it is the correct size.\r\n                if (rightActive) open('right'); // If right Slidebar is open, calling open will ensure it is the correct size.\r\n            }\r\n        });\r\n        // I may include a height check along side a width check here in future.\r\n\r\n        // ---------------\r\n        // 005 - Animation\r\n\r\n        var animation; // Animation type.\r\n\r\n        // Set animation type.\r\n        if (supportTransition && supportTransform) { // Browser supports css transitions and transforms.\r\n            animation = 'translate'; // Translate for browsers that support it.\r\n            if (android && android < 4.4) animation = 'side'; // Android supports both, but can't translate any fixed positions, so use left instead.\r\n        } else {\r\n            animation = 'jQuery'; // Browsers that don't support css transitions and transitions.\r\n        }\r\n\r\n        // Animate mixin.\r\n        function animate(object, amount, side) {\r\n            // Choose selectors depending on animation style.\r\n            var selector;\r\n\r\n            if (object.hasClass('sb-style-push')) {\r\n                selector = $site.add(object).add($slide); // Push - Animate site, Slidebar and user elements.\r\n            } else if (object.hasClass('sb-style-overlay')) {\r\n                selector = object; // Overlay - Animate Slidebar only.\r\n            } else {\r\n                selector = $site.add($slide); // Reveal - Animate site and user elements.\r\n            }\r\n\r\n            // Apply animation\r\n            if (animation === 'translate') {\r\n                selector.css('transform', 'translate(' + amount + ')'); // Apply the animation.\r\n\r\n            } else if (animation === 'side') {\r\n                if (amount[0] === '-') amount = amount.substr(1); // Remove the '-' from the passed amount for side animations.\r\n                if (amount !== '0px') selector.css(side, '0px'); // Add a 0 value so css transition works.\r\n                setTimeout(function() { // Set a timeout to allow the 0 value to be applied above.\r\n                    selector.css(side, amount); // Apply the animation.\r\n                }, 1);\r\n\r\n            } else if (animation === 'jQuery') {\r\n                if (amount[0] === '-') amount = amount.substr(1); // Remove the '-' from the passed amount for jQuery animations.\r\n                var properties = {};\r\n                properties[side] = amount;\r\n                selector.stop().animate(properties, 400); // Stop any current jQuery animation before starting another.\r\n            }\r\n\r\n            // If closed, remove the inline styling on completion of the animation.\r\n            setTimeout(function() {\r\n                if (amount === '0px') {\r\n                    selector.removeAttr('style');\r\n                    css();\r\n                }\r\n            }, 400);\r\n        }\r\n\r\n        // ----------------\r\n        // 006 - Operations\r\n\r\n        // Open a Slidebar\r\n        function open(side, callback) {\r\n            // Check to see if opposite Slidebar is open.\r\n            if (side === 'left' && $left && rightActive || side === 'right' && $right && leftActive) { // It's open, close it, then continue.\r\n                close();\r\n                setTimeout(proceed, 400);\r\n            } else { // Its not open, continue.\r\n                proceed();\r\n            }\r\n\r\n            // Open\r\n            function proceed() {\r\n                if (init && side === 'left' && $left) { // Slidebars is initiated, left is in use and called to open.\r\n                    $('html').addClass('sb-active sb-active-left'); // Add active classes.\r\n                    $left.addClass('sb-active');\r\n                    animate($left, $left.css('width'), 'left'); // Animation\r\n                    setTimeout(function() {\r\n                        leftActive = true;\r\n                        if (typeof callback === 'function') callback(); // Run callback function.\r\n                    }, 400); // Set active variables.\r\n                } else if (init && side === 'right' && $right) { // Slidebars is initiated, right is in use and called to open.\r\n                    $('html').addClass('sb-active sb-active-right'); // Add active classes.\r\n                    $right.addClass('sb-active');\r\n                    animate($right, '-' + $right.css('width'), 'right'); // Animation\r\n                    setTimeout(function() {\r\n                        rightActive = true;\r\n                        if (typeof callback === 'function') callback(); // Run callback function.\r\n                    }, 400); // Set active variables.\r\n                }\r\n            }\r\n        }\r\n\r\n        // Close either Slidebar\r\n        function close(callback) {\r\n            if (leftActive || rightActive) { // If a Slidebar is open.\r\n                if (leftActive) {\r\n                    animate($left, '0px', 'left'); // Animation\r\n                    leftActive = false;\r\n                }\r\n                if (rightActive) {\r\n                    animate($right, '0px', 'right'); // Animation\r\n                    rightActive = false;\r\n                }\r\n\r\n                setTimeout(function() { // Wait for closing animation to finish.\r\n                    $('html').removeClass('sb-active sb-active-left sb-active-right'); // Remove active classes.\r\n                    if ($left) $left.removeClass('sb-active');\r\n                    if ($right) $right.removeClass('sb-active');\r\n                    if (typeof callback === 'function') callback(); // Run callback function.\r\n                }, 400);\r\n            }\r\n        }\r\n\r\n        // Toggle either Slidebar\r\n        function toggle(side, callback) {\r\n            if (side === 'left' && $left) { // If left Slidebar is called and in use.\r\n                if (!leftActive) {\r\n                    open('left', callback); // Slidebar is closed, open it.\r\n                } else {\r\n                    close(null, callback); // Slidebar is open, close it.\r\n                }\r\n            }\r\n            if (side === 'right' && $right) { // If right Slidebar is called and in use.\r\n                if (!rightActive) {\r\n                    open('right', callback); // Slidebar is closed, open it.\r\n                } else {\r\n                    close(null, callback); // Slidebar is open, close it.\r\n                }\r\n            }\r\n        }\r\n\r\n        // ---------\r\n        // 007 - API\r\n\r\n        this.slidebars = {\r\n            open: open, // Maps user variable name to the open method.\r\n            close: close, // Maps user variable name to the close method.\r\n            toggle: toggle, // Maps user variable name to the toggle method.\r\n            init: function() { // Returns true or false whether Slidebars are running or not.\r\n                return init; // Returns true or false whether Slidebars are running.\r\n            },\r\n            reInit: initialise, // Run the init method to check if the plugin should still be running.\r\n            resetCSS: css, // Reset inline\r\n            active: function(side) { // Returns true or false whether Slidebar is open or closed.\r\n                if (side === 'left' && $left) return leftActive;\r\n                if (side === 'right' && $right) return rightActive;\r\n            },\r\n            destroy: function(side) { // Removes the Slidebar from the DOM.\r\n                if (side === 'left' && $left) {\r\n                    if (leftActive) close(); // Close if its open.\r\n                    setTimeout(function() {\r\n                        $left.remove(); // Remove it.\r\n                        $left = false; // Set variable to false so it cannot be opened again.\r\n                    }, 400);\r\n                }\r\n                if (side === 'right' && $right) {\r\n                    if (rightActive) close(); // Close if its open.\r\n                    setTimeout(function() {\r\n                        $right.remove(); // Remove it.\r\n                        $right = false; // Set variable to false so it cannot be opened again.\r\n                    }, 400);\r\n                }\r\n            }\r\n        };\r\n\r\n        // ----------------\r\n        // 008 - User Input\r\n\r\n        function eventHandler(event, selector) {\r\n            event.stopPropagation(); // Stop event bubbling.\r\n            event.preventDefault(); // Prevent default behaviour.\r\n            if (event.type === 'touchend') selector.off('click'); // If event type was touch, turn off clicks to prevent phantom clicks.\r\n        }\r\n\r\n        // Toggle left Slidebar\r\n        $('.sb-toggle-left').on('touchend click', function(event) {\r\n            eventHandler(event, $(this)); // Handle the event.\r\n            toggle('left'); // Toggle the left Slidbar.\r\n        });\r\n\r\n        // Toggle right Slidebar\r\n        $('.sb-toggle-right').on('touchend click', function(event) {\r\n            eventHandler(event, $(this)); // Handle the event.\r\n            toggle('right'); // Toggle the right Slidbar.\r\n        });\r\n\r\n        // Open left Slidebar\r\n        $('.sb-open-left').on('touchend click', function(event) {\r\n            eventHandler(event, $(this)); // Handle the event.\r\n            open('left'); // Open the left Slidebar.\r\n        });\r\n\r\n        // Open right Slidebar\r\n        $('.sb-open-right').on('touchend click', function(event) {\r\n            eventHandler(event, $(this)); // Handle the event.\r\n            open('right'); // Open the right Slidebar.\r\n        });\r\n\r\n        // Close Slidebar\r\n        $('.sb-close').on('touchend click', function(event) {\r\n            if ( $(this).is('a') || $(this).children().is('a') ) { // Is a link or contains a link.\r\n                if ( event.type === 'click' ) { // Make sure the user wanted to follow the link.\r\n                    event.preventDefault(); // Stop default behaviour.\r\n                    var href = ( $(this).is('a') ? $(this).attr('href') : $(this).find('a').attr('href') ); // Get the href.\r\n                    close(function() { // Close Slidebar and pass callback to redirect.\r\n                        window.location = href;\r\n                    });\r\n                }\r\n            } else { // Just a normal control class.\r\n                eventHandler(event, $(this)); // Handle the event.\r\n                close(); // Close Slidebar.\r\n            }\r\n        });\r\n\r\n        // Close Slidebar via site\r\n        $site.on('touchend click', function(event) {\r\n            if (settings.siteClose && (leftActive || rightActive)) { // If settings permit closing by site and left or right Slidebar is open.\r\n                eventHandler(event, $(this)); // Handle the event.\r\n                close(); // Close it.\r\n            }\r\n        });\r\n\r\n    }; // End Slidebars function.\r\n\r\n}) (jQuery);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 146:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function($) {$(document).ready(function(){\r\n\r\n    /* Box switch toggle */\r\n\r\n  $('.switch-button').click(function(ev){\r\n\r\n    ev.preventDefault();\r\n\r\n    var switchParent = $(this).attr('switch-parent');\r\n    var switchTarget = $(this).attr('switch-target');\r\n\r\n    $(switchParent).slideToggle();\r\n    $(switchTarget).slideToggle();\r\n\r\n  });\r\n\r\n    /* Content Box Show/Hide Buttons */\r\n\r\n  $('.hidden-button').hover(function(){\r\n\r\n    $(\".btn-hide\", this).fadeIn('fast');\r\n\r\n  },function(){\r\n\r\n    $(\".btn-hide\", this).fadeOut('normal');\r\n\r\n  });\r\n\r\n\r\n  /* Content Box Toggle */\r\n\r\n  $('.toggle-button').click(function(ev) {\r\n\r\n    ev.preventDefault();\r\n\r\n    $(\".glyph-icon\", this).toggleClass(\"icon-rotate-180\");\r\n\r\n    $(this).parents(\".content-box:first\").find(\".content-box-wrapper\").slideToggle();\r\n\r\n  });\r\n\r\n  /* Content Box Remove */\r\n\r\n  $('.remove-button').click(function(ev){\r\n\r\n      ev.preventDefault();\r\n\r\n      var animationEFFECT = $(this).attr('data-animation');\r\n\r\n      var animationTARGET = $(this).parents(\".content-box:first\");\r\n\r\n      $(animationTARGET).addClass('animated');\r\n      $(animationTARGET).addClass(animationEFFECT);\r\n\r\n      var wait = window.setTimeout( function(){\r\n        $(animationTARGET).slideUp()},\r\n        500\r\n      );\r\n\r\n      /* Demo show removed content box */\r\n\r\n      var wait2 = window.setTimeout( function(){\r\n        $(animationTARGET).removeClass(animationEFFECT).fadeIn()},\r\n        2500\r\n      );\r\n\r\n  });\r\n\r\n  /* Close Info Boxes */\r\n\r\n  $(function() { \"use strict\";\r\n\r\n    $(\".infobox-close\").click(function(ev){\r\n\r\n      ev.preventDefault();\r\n\r\n      $(this).parent().fadeOut();\r\n\r\n    });\r\n\r\n\r\n  });\r\n\r\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 147:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function($) {$(document).ready(function(){\r\n\r\n  /* Loader Show */\r\n\r\n  $('.overlay-button').click(function(){\r\n\r\n\tvar loadertheme = $(this).attr('data-theme');\r\n\tvar loaderopacity = $(this).attr('data-opacity');\r\n\tvar loaderstyle = $(this).attr('data-style');\r\n\r\n\r\n\tvar loader = '<div id=\"loader-overlay\" class=\"ui-front loader ui-widget-overlay ' + loadertheme + ' opacity-' + loaderopacity + '\"><img src=\"../../assets/images/spinner/loader-' + loaderstyle + '.gif\" alt=\"\" /></div>';\r\n\r\n    if ( $('#loader-overlay').length ) {\r\n\t    $('#loader-overlay').remove();\r\n    }\r\n    $('body').append(loader);\r\n    $('#loader-overlay').fadeIn('fast');\r\n\r\n    //demo\r\n\r\n    setTimeout(function() {\r\n      $('#loader-overlay').fadeOut('fast');\r\n    }, 3000);\r\n\r\n  });\r\n\r\n\t/* Refresh Box */\r\n\r\n\t$('.refresh-button').click(function(ev){\r\n\r\n\t\t$('.glyph-icon', this).addClass('icon-spin');\r\n\r\n\t    ev.preventDefault();\r\n\r\n\t    var refreshParent = $(this).parents('.content-box');\r\n\r\n\t\tvar loaderTheme = $(this).attr('data-theme');\r\n\t\tvar loaderOpacity = $(this).attr('data-opacity');\r\n\t\tvar loaderStyle = $(this).attr('data-style');\r\n\r\n\r\n\t\tvar loader = '<div id=\"refresh-overlay\" class=\"ui-front loader ui-widget-overlay ' + loaderTheme + ' opacity-' + loaderOpacity + '\"><img src=\"../../assets/images/spinner/loader-' + loaderStyle + '.gif\" alt=\"\" /></div>';\r\n\r\n        if ( $('#refresh-overlay').length ) {\r\n            $('#refresh-overlay').remove();\r\n        }\r\n\t    $(refreshParent).append(loader);\r\n\t    $('#refresh-overlay').fadeIn('fast');\r\n\r\n\t\t//DEMO\r\n\r\n        setTimeout(function() {\r\n            $('#refresh-overlay').fadeOut('fast');\r\n            $('.glyph-icon', this).removeClass('icon-spin');\r\n        }, 1500);\r\n\r\n\t});\r\n\r\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 148:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! DataTables 1.10.2\r\n * Â©2008-2014 SpryMedia Ltd - datatables.net/license\r\n */\r\n\r\n/**\r\n * @summary     DataTables\r\n * @description Paginate, search and order HTML tables\r\n * @version     1.10.2\r\n * @file        jquery.dataTables.js\r\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\r\n * @contact     www.sprymedia.co.uk/contact\r\n * @copyright   Copyright 2008-2014 SpryMedia Ltd.\r\n *\r\n * This source file is free software, available under the following license:\r\n *   MIT license - http://datatables.net/license\r\n *\r\n * This source file is distributed in the hope that it will be useful, but\r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\r\n *\r\n * For details please refer to: http://www.datatables.net\r\n */\r\n\r\n/*jslint evil: true, undef: true, browser: true */\r\n/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidateRow,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnScrollingWidthAdjust,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnScrollBarWidth,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/\r\n\r\n(/** @lends <global> */function( window, document, undefined ) {\r\n\r\n    (function( factory ) {\r\n        \"use strict\";\r\n\r\n        if ( true ) {\r\n            // Define as an AMD module if possible\r\n            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n        }\r\n        else if ( typeof exports === 'object' ) {\r\n            // Node/CommonJS\r\n            factory( require( 'jquery' ) );\r\n        }\r\n        else if ( jQuery && !jQuery.fn.dataTable ) {\r\n            // Define using browser globals otherwise\r\n            // Prevent multiple instantiations if the script is loaded twice\r\n            factory( jQuery );\r\n        }\r\n    }\r\n    (/** @lends <global> */function( $ ) {\r\n        \"use strict\";\r\n\r\n        /**\r\n         * DataTables is a plug-in for the jQuery Javascript library. It is a highly\r\n         * flexible tool, based upon the foundations of progressive enhancement,\r\n         * which will add advanced interaction controls to any HTML table. For a\r\n         * full list of features please refer to\r\n         * [DataTables.net](href=\"http://datatables.net).\r\n         *\r\n         * Note that the `DataTable` object is not a global variable but is aliased\r\n         * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may\r\n         * be  accessed.\r\n         *\r\n         *  @class\r\n         *  @param {object} [init={}] Configuration object for DataTables. Options\r\n         *    are defined by {@link DataTable.defaults}\r\n         *  @requires jQuery 1.7+\r\n         *\r\n         *  @example\r\n         *    // Basic initialisation\r\n         *    $(document).ready( function {\r\n\t *      $('#example').dataTable();\r\n\t *    } );\r\n         *\r\n         *  @example\r\n         *    // Initialisation with configuration options - in this case, disable\r\n         *    // pagination and sorting.\r\n         *    $(document).ready( function {\r\n\t *      $('#example').dataTable( {\r\n\t *        \"paginate\": false,\r\n\t *        \"sort\": false\r\n\t *      } );\r\n\t *    } );\r\n         */\r\n        var DataTable;\r\n\r\n\r\n        /*\r\n         * It is useful to have variables which are scoped locally so only the\r\n         * DataTables functions can access them and they don't leak into global space.\r\n         * At the same time these functions are often useful over multiple files in the\r\n         * core and API, so we list, or at least document, all variables which are used\r\n         * by DataTables as private variables here. This also ensures that there is no\r\n         * clashing of variable names and that they can easily referenced for reuse.\r\n         */\r\n\r\n\r\n        // Defined else where\r\n        //  _selector_run\r\n        //  _selector_opts\r\n        //  _selector_first\r\n        //  _selector_row_indexes\r\n\r\n        var _ext; // DataTable.ext\r\n        var _Api; // DataTable.Api\r\n        var _api_register; // DataTable.Api.register\r\n        var _api_registerPlural; // DataTable.Api.registerPlural\r\n\r\n        var _re_dic = {};\r\n        var _re_new_lines = /[\\r\\n]/g;\r\n        var _re_html = /<.*?>/g;\r\n        var _re_date_start = /^[\\w\\+\\-]/;\r\n        var _re_date_end = /[\\w\\+\\-]$/;\r\n\r\n        // Escape regular expression special characters\r\n        var _re_escape_regex = new RegExp( '(\\\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-' ].join('|\\\\') + ')', 'g' );\r\n\r\n        // U+2009 is thin space and U+202F is narrow no-break space, both used in many\r\n        // standards as thousands separators\r\n        var _re_formatted_numeric = /[',$Â£â‚¬Â¥%\\u2009\\u202F]/g;\r\n\r\n\r\n        var _empty = function ( d ) {\r\n            return !d || d === true || d === '-' ? true : false;\r\n        };\r\n\r\n\r\n        var _intVal = function ( s ) {\r\n            var integer = parseInt( s, 10 );\r\n            return !isNaN(integer) && isFinite(s) ? integer : null;\r\n        };\r\n\r\n        // Convert from a formatted number with characters other than `.` as the\r\n        // decimal place, to a Javascript number\r\n        var _numToDecimal = function ( num, decimalPoint ) {\r\n            // Cache created regular expressions for speed as this function is called often\r\n            if ( ! _re_dic[ decimalPoint ] ) {\r\n                _re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );\r\n            }\r\n            return typeof num === 'string' ?\r\n                num.replace( /\\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :\r\n                num;\r\n        };\r\n\r\n\r\n        var _isNumber = function ( d, decimalPoint, formatted ) {\r\n            var strType = typeof d === 'string';\r\n\r\n            if ( decimalPoint && strType ) {\r\n                d = _numToDecimal( d, decimalPoint );\r\n            }\r\n\r\n            if ( formatted && strType ) {\r\n                d = d.replace( _re_formatted_numeric, '' );\r\n            }\r\n\r\n            return _empty( d ) || (!isNaN( parseFloat(d) ) && isFinite( d ));\r\n        };\r\n\r\n\r\n        // A string without HTML in it can be considered to be HTML still\r\n        var _isHtml = function ( d ) {\r\n            return _empty( d ) || typeof d === 'string';\r\n        };\r\n\r\n\r\n        var _htmlNumeric = function ( d, decimalPoint, formatted ) {\r\n            if ( _empty( d ) ) {\r\n                return true;\r\n            }\r\n\r\n            var html = _isHtml( d );\r\n            return ! html ?\r\n                null :\r\n                _isNumber( _stripHtml( d ), decimalPoint, formatted ) ?\r\n                    true :\r\n                    null;\r\n        };\r\n\r\n\r\n        var _pluck = function ( a, prop, prop2 ) {\r\n            var out = [];\r\n            var i=0, ien=a.length;\r\n\r\n            // Could have the test in the loop for slightly smaller code, but speed\r\n            // is essential here\r\n            if ( prop2 !== undefined ) {\r\n                for ( ; i<ien ; i++ ) {\r\n                    if ( a[i] && a[i][ prop ] ) {\r\n                        out.push( a[i][ prop ][ prop2 ] );\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for ( ; i<ien ; i++ ) {\r\n                    if ( a[i] ) {\r\n                        out.push( a[i][ prop ] );\r\n                    }\r\n                }\r\n            }\r\n\r\n            return out;\r\n        };\r\n\r\n\r\n        // Basically the same as _pluck, but rather than looping over `a` we use `order`\r\n        // as the indexes to pick from `a`\r\n        var _pluck_order = function ( a, order, prop, prop2 )\r\n        {\r\n            var out = [];\r\n            var i=0, ien=order.length;\r\n\r\n            // Could have the test in the loop for slightly smaller code, but speed\r\n            // is essential here\r\n            if ( prop2 !== undefined ) {\r\n                for ( ; i<ien ; i++ ) {\r\n                    out.push( a[ order[i] ][ prop ][ prop2 ] );\r\n                }\r\n            }\r\n            else {\r\n                for ( ; i<ien ; i++ ) {\r\n                    out.push( a[ order[i] ][ prop ] );\r\n                }\r\n            }\r\n\r\n            return out;\r\n        };\r\n\r\n\r\n        var _range = function ( len, start )\r\n        {\r\n            var out = [];\r\n            var end;\r\n\r\n            if ( start === undefined ) {\r\n                start = 0;\r\n                end = len;\r\n            }\r\n            else {\r\n                end = start;\r\n                start = len;\r\n            }\r\n\r\n            for ( var i=start ; i<end ; i++ ) {\r\n                out.push( i );\r\n            }\r\n\r\n            return out;\r\n        };\r\n\r\n\r\n        var _stripHtml = function ( d ) {\r\n            return d.replace( _re_html, '' );\r\n        };\r\n\r\n\r\n        /**\r\n         * Find the unique elements in a source array.\r\n         *\r\n         * @param  {array} src Source array\r\n         * @return {array} Array of unique items\r\n         * @ignore\r\n         */\r\n        var _unique = function ( src )\r\n        {\r\n            // A faster unique method is to use object keys to identify used values,\r\n            // but this doesn't work with arrays or objects, which we must also\r\n            // consider. See jsperf.com/compare-array-unique-versions/4 for more\r\n            // information.\r\n            var\r\n                out = [],\r\n                val,\r\n                i, ien=src.length,\r\n                j, k=0;\r\n\r\n            again: for ( i=0 ; i<ien ; i++ ) {\r\n                val = src[i];\r\n\r\n                for ( j=0 ; j<k ; j++ ) {\r\n                    if ( out[j] === val ) {\r\n                        continue again;\r\n                    }\r\n                }\r\n\r\n                out.push( val );\r\n                k++;\r\n            }\r\n\r\n            return out;\r\n        };\r\n\r\n\r\n\r\n        /**\r\n         * Create a mapping object that allows camel case parameters to be looked up\r\n         * for their Hungarian counterparts. The mapping is stored in a private\r\n         * parameter called `_hungarianMap` which can be accessed on the source object.\r\n         *  @param {object} o\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnHungarianMap ( o )\r\n        {\r\n            var\r\n                hungarian = 'a aa ai ao as b fn i m o s ',\r\n                match,\r\n                newKey,\r\n                map = {};\r\n\r\n            $.each( o, function (key, val) {\r\n                match = key.match(/^([^A-Z]+?)([A-Z])/);\r\n\r\n                if ( match && hungarian.indexOf(match[1]+' ') !== -1 )\r\n                {\r\n                    newKey = key.replace( match[0], match[2].toLowerCase() );\r\n                    map[ newKey ] = key;\r\n\r\n                    //console.log( key, match );\r\n                    if ( match[1] === 'o' )\r\n                    {\r\n                        _fnHungarianMap( o[key] );\r\n                    }\r\n                }\r\n            } );\r\n\r\n            o._hungarianMap = map;\r\n        }\r\n\r\n\r\n        /**\r\n         * Convert from camel case parameters to Hungarian, based on a Hungarian map\r\n         * created by _fnHungarianMap.\r\n         *  @param {object} src The model object which holds all parameters that can be\r\n         *    mapped.\r\n         *  @param {object} user The object to convert from camel case to Hungarian.\r\n         *  @param {boolean} force When set to `true`, properties which already have a\r\n         *    Hungarian value in the `user` object will be overwritten. Otherwise they\r\n         *    won't be.\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnCamelToHungarian ( src, user, force )\r\n        {\r\n            if ( ! src._hungarianMap ) {\r\n                _fnHungarianMap( src );\r\n            }\r\n\r\n            var hungarianKey;\r\n\r\n            $.each( user, function (key, val) {\r\n                hungarianKey = src._hungarianMap[ key ];\r\n\r\n                if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )\r\n                {\r\n                    // For objects, we need to buzz down into the object to copy parameters\r\n                    if ( hungarianKey.charAt(0) === 'o' )\r\n                    {\r\n                        // Copy the camelCase options over to the hungarian\r\n                        if ( ! user[ hungarianKey ] ) {\r\n                            user[ hungarianKey ] = {};\r\n                        }\r\n                        $.extend( true, user[hungarianKey], user[key] );\r\n\r\n                        _fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );\r\n                    }\r\n                    else {\r\n                        user[hungarianKey] = user[ key ];\r\n                    }\r\n                }\r\n            } );\r\n        }\r\n\r\n\r\n        /**\r\n         * Language compatibility - when certain options are given, and others aren't, we\r\n         * need to duplicate the values over, in order to provide backwards compatibility\r\n         * with older language files.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnLanguageCompat( lang )\r\n        {\r\n            var defaults = DataTable.defaults.oLanguage;\r\n            var zeroRecords = lang.sZeroRecords;\r\n\r\n            /* Backwards compatibility - if there is no sEmptyTable given, then use the same as\r\n             * sZeroRecords - assuming that is given.\r\n             */\r\n            if ( ! lang.sEmptyTable && zeroRecords &&\r\n                defaults.sEmptyTable === \"No data available in table\" )\r\n            {\r\n                _fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );\r\n            }\r\n\r\n            /* Likewise with loading records */\r\n            if ( ! lang.sLoadingRecords && zeroRecords &&\r\n                defaults.sLoadingRecords === \"Loading...\" )\r\n            {\r\n                _fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );\r\n            }\r\n\r\n            // Old parameter name of the thousands separator mapped onto the new\r\n            if ( lang.sInfoThousands ) {\r\n                lang.sThousands = lang.sInfoThousands;\r\n            }\r\n\r\n            var decimal = lang.sDecimal;\r\n            if ( decimal ) {\r\n                _addNumericSort( decimal );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Map one parameter onto another\r\n         *  @param {object} o Object to map\r\n         *  @param {*} knew The new parameter name\r\n         *  @param {*} old The old parameter name\r\n         */\r\n        var _fnCompatMap = function ( o, knew, old ) {\r\n            if ( o[ knew ] !== undefined ) {\r\n                o[ old ] = o[ knew ];\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * Provide backwards compatibility for the main DT options. Note that the new\r\n         * options are mapped onto the old parameters, so this is an external interface\r\n         * change only.\r\n         *  @param {object} init Object to map\r\n         */\r\n        function _fnCompatOpts ( init )\r\n        {\r\n            _fnCompatMap( init, 'ordering',      'bSort' );\r\n            _fnCompatMap( init, 'orderMulti',    'bSortMulti' );\r\n            _fnCompatMap( init, 'orderClasses',  'bSortClasses' );\r\n            _fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );\r\n            _fnCompatMap( init, 'order',         'aaSorting' );\r\n            _fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );\r\n            _fnCompatMap( init, 'paging',        'bPaginate' );\r\n            _fnCompatMap( init, 'pagingType',    'sPaginationType' );\r\n            _fnCompatMap( init, 'pageLength',    'iDisplayLength' );\r\n            _fnCompatMap( init, 'searching',     'bFilter' );\r\n\r\n            // Column search objects are in an array, so it needs to be converted\r\n            // element by element\r\n            var searchCols = init.aoSearchCols;\r\n\r\n            if ( searchCols ) {\r\n                for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {\r\n                    if ( searchCols[i] ) {\r\n                        _fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Provide backwards compatibility for column options. Note that the new options\r\n         * are mapped onto the old parameters, so this is an external interface change\r\n         * only.\r\n         *  @param {object} init Object to map\r\n         */\r\n        function _fnCompatCols ( init )\r\n        {\r\n            _fnCompatMap( init, 'orderable',     'bSortable' );\r\n            _fnCompatMap( init, 'orderData',     'aDataSort' );\r\n            _fnCompatMap( init, 'orderSequence', 'asSorting' );\r\n            _fnCompatMap( init, 'orderDataType', 'sortDataType' );\r\n        }\r\n\r\n\r\n        /**\r\n         * Browser feature detection for capabilities, quirks\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnBrowserDetect( settings )\r\n        {\r\n            var browser = settings.oBrowser;\r\n\r\n            // Scrolling feature / quirks detection\r\n            var n = $('<div/>')\r\n                .css( {\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    left: 0,\r\n                    height: 1,\r\n                    width: 1,\r\n                    overflow: 'hidden'\r\n                } )\r\n                .append(\r\n                $('<div/>')\r\n                    .css( {\r\n                        position: 'absolute',\r\n                        top: 1,\r\n                        left: 1,\r\n                        width: 100,\r\n                        overflow: 'scroll'\r\n                    } )\r\n                    .append(\r\n                    $('<div class=\"test\"/>')\r\n                        .css( {\r\n                            width: '100%',\r\n                            height: 10\r\n                        } )\r\n                )\r\n            )\r\n                .appendTo( 'body' );\r\n\r\n            var test = n.find('.test');\r\n\r\n            // IE6/7 will oversize a width 100% element inside a scrolling element, to\r\n            // include the width of the scrollbar, while other browsers ensure the inner\r\n            // element is contained without forcing scrolling\r\n            browser.bScrollOversize = test[0].offsetWidth === 100;\r\n\r\n            // In rtl text layout, some browsers (most, but not all) will place the\r\n            // scrollbar on the left, rather than the right.\r\n            browser.bScrollbarLeft = test.offset().left !== 1;\r\n\r\n            n.remove();\r\n        }\r\n\r\n\r\n        /**\r\n         * Array.prototype reduce[Right] method, used for browsers which don't support\r\n         * JS 1.6. Done this way to reduce code size, since we iterate either way\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnReduce ( that, fn, init, start, end, inc )\r\n        {\r\n            var\r\n                i = start,\r\n                value,\r\n                isSet = false;\r\n\r\n            if ( init !== undefined ) {\r\n                value = init;\r\n                isSet = true;\r\n            }\r\n\r\n            while ( i !== end ) {\r\n                if ( ! that.hasOwnProperty(i) ) {\r\n                    continue;\r\n                }\r\n\r\n                value = isSet ?\r\n                    fn( value, that[i], i, that ) :\r\n                    that[i];\r\n\r\n                isSet = true;\r\n                i += inc;\r\n            }\r\n\r\n            return value;\r\n        }\r\n\r\n        /**\r\n         * Add a column to the list used for the table with default values\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {node} nTh The th element for this column\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAddColumn( oSettings, nTh )\r\n        {\r\n            // Add column to aoColumns array\r\n            var oDefaults = DataTable.defaults.column;\r\n            var iCol = oSettings.aoColumns.length;\r\n            var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {\r\n                \"nTh\": nTh ? nTh : document.createElement('th'),\r\n                \"sTitle\":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',\r\n                \"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\r\n                \"mData\": oDefaults.mData ? oDefaults.mData : iCol,\r\n                idx: iCol\r\n            } );\r\n            oSettings.aoColumns.push( oCol );\r\n\r\n            // Add search object for column specific search. Note that the `searchCols[ iCol ]`\r\n            // passed into extend can be undefined. This allows the user to give a default\r\n            // with only some of the parameters defined, and also not give a default\r\n            var searchCols = oSettings.aoPreSearchCols;\r\n            searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );\r\n\r\n            // Use the default column options function to initialise classes etc\r\n            _fnColumnOptions( oSettings, iCol, null );\r\n        }\r\n\r\n\r\n        /**\r\n         * Apply options for a column\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {int} iCol column index to consider\r\n         *  @param {object} oOptions object with sType, bVisible and bSearchable etc\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnColumnOptions( oSettings, iCol, oOptions )\r\n        {\r\n            var oCol = oSettings.aoColumns[ iCol ];\r\n            var oClasses = oSettings.oClasses;\r\n            var th = $(oCol.nTh);\r\n\r\n            // Try to get width information from the DOM. We can't get it from CSS\r\n            // as we'd need to parse the CSS stylesheet. `width` option can override\r\n            if ( ! oCol.sWidthOrig ) {\r\n                // Width attribute\r\n                oCol.sWidthOrig = th.attr('width') || null;\r\n\r\n                // Style attribute\r\n                var t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);\r\n                if ( t ) {\r\n                    oCol.sWidthOrig = t[1];\r\n                }\r\n            }\r\n\r\n            /* User specified column options */\r\n            if ( oOptions !== undefined && oOptions !== null )\r\n            {\r\n                // Backwards compatibility\r\n                _fnCompatCols( oOptions );\r\n\r\n                // Map camel case parameters to their Hungarian counterparts\r\n                _fnCamelToHungarian( DataTable.defaults.column, oOptions );\r\n\r\n                /* Backwards compatibility for mDataProp */\r\n                if ( oOptions.mDataProp !== undefined && !oOptions.mData )\r\n                {\r\n                    oOptions.mData = oOptions.mDataProp;\r\n                }\r\n\r\n                if ( oOptions.sType )\r\n                {\r\n                    oCol._sManualType = oOptions.sType;\r\n                }\r\n\r\n                // `class` is a reserved word in Javascript, so we need to provide\r\n                // the ability to use a valid name for the camel case input\r\n                if ( oOptions.className && ! oOptions.sClass )\r\n                {\r\n                    oOptions.sClass = oOptions.className;\r\n                }\r\n\r\n                $.extend( oCol, oOptions );\r\n                _fnMap( oCol, oOptions, \"sWidth\", \"sWidthOrig\" );\r\n\r\n                /* iDataSort to be applied (backwards compatibility), but aDataSort will take\r\n                 * priority if defined\r\n                 */\r\n                if ( typeof oOptions.iDataSort === 'number' )\r\n                {\r\n                    oCol.aDataSort = [ oOptions.iDataSort ];\r\n                }\r\n                _fnMap( oCol, oOptions, \"aDataSort\" );\r\n            }\r\n\r\n            /* Cache the data get and set functions for speed */\r\n            var mDataSrc = oCol.mData;\r\n            var mData = _fnGetObjectDataFn( mDataSrc );\r\n            var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;\r\n\r\n            var attrTest = function( src ) {\r\n                return typeof src === 'string' && src.indexOf('@') !== -1;\r\n            };\r\n            oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (\r\n            attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)\r\n            );\r\n\r\n            oCol.fnGetData = function (rowData, type, meta) {\r\n                var innerData = mData( rowData, type, undefined, meta );\r\n\r\n                return mRender && type ?\r\n                    mRender( innerData, type, rowData, meta ) :\r\n                    innerData;\r\n            };\r\n            oCol.fnSetData = function ( rowData, val, meta ) {\r\n                return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );\r\n            };\r\n\r\n            /* Feature sorting overrides column specific when off */\r\n            if ( !oSettings.oFeatures.bSort )\r\n            {\r\n                oCol.bSortable = false;\r\n                th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called\r\n            }\r\n\r\n            /* Check that the class assignment is correct for sorting */\r\n            var bAsc = $.inArray('asc', oCol.asSorting) !== -1;\r\n            var bDesc = $.inArray('desc', oCol.asSorting) !== -1;\r\n            if ( !oCol.bSortable || (!bAsc && !bDesc) )\r\n            {\r\n                oCol.sSortingClass = oClasses.sSortableNone;\r\n                oCol.sSortingClassJUI = \"\";\r\n            }\r\n            else if ( bAsc && !bDesc )\r\n            {\r\n                oCol.sSortingClass = oClasses.sSortableAsc;\r\n                oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\r\n            }\r\n            else if ( !bAsc && bDesc )\r\n            {\r\n                oCol.sSortingClass = oClasses.sSortableDesc;\r\n                oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\r\n            }\r\n            else\r\n            {\r\n                oCol.sSortingClass = oClasses.sSortable;\r\n                oCol.sSortingClassJUI = oClasses.sSortJUI;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Adjust the table column widths for new data. Note: you would probably want to\r\n         * do a redraw after calling this function!\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAdjustColumnSizing ( settings )\r\n        {\r\n            /* Not interested in doing column width calculation if auto-width is disabled */\r\n            if ( settings.oFeatures.bAutoWidth !== false )\r\n            {\r\n                var columns = settings.aoColumns;\r\n\r\n                _fnCalculateColumnWidths( settings );\r\n                for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )\r\n                {\r\n                    columns[i].nTh.style.width = columns[i].sWidth;\r\n                }\r\n            }\r\n\r\n            var scroll = settings.oScroll;\r\n            if ( scroll.sY !== '' || scroll.sX !== '')\r\n            {\r\n                _fnScrollDraw( settings );\r\n            }\r\n\r\n            _fnCallbackFire( settings, null, 'column-sizing', [settings] );\r\n        }\r\n\r\n\r\n        /**\r\n         * Covert the index of a visible column to the index in the data array (take account\r\n         * of hidden columns)\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {int} iMatch Visible column index to lookup\r\n         *  @returns {int} i the data index\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnVisibleToColumnIndex( oSettings, iMatch )\r\n        {\r\n            var aiVis = _fnGetColumns( oSettings, 'bVisible' );\r\n\r\n            return typeof aiVis[iMatch] === 'number' ?\r\n                aiVis[iMatch] :\r\n                null;\r\n        }\r\n\r\n\r\n        /**\r\n         * Covert the index of an index in the data array and convert it to the visible\r\n         *   column index (take account of hidden columns)\r\n         *  @param {int} iMatch Column index to lookup\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns {int} i the data index\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnColumnIndexToVisible( oSettings, iMatch )\r\n        {\r\n            var aiVis = _fnGetColumns( oSettings, 'bVisible' );\r\n            var iPos = $.inArray( iMatch, aiVis );\r\n\r\n            return iPos !== -1 ? iPos : null;\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the number of visible columns\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns {int} i the number of visible columns\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnVisbleColumns( oSettings )\r\n        {\r\n            return _fnGetColumns( oSettings, 'bVisible' ).length;\r\n        }\r\n\r\n\r\n        /**\r\n         * Get an array of column indexes that match a given property\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {string} sParam Parameter in aoColumns to look for - typically\r\n         *    bVisible or bSearchable\r\n         *  @returns {array} Array of indexes with matched properties\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetColumns( oSettings, sParam )\r\n        {\r\n            var a = [];\r\n\r\n            $.map( oSettings.aoColumns, function(val, i) {\r\n                if ( val[sParam] ) {\r\n                    a.push( i );\r\n                }\r\n            } );\r\n\r\n            return a;\r\n        }\r\n\r\n\r\n        /**\r\n         * Calculate the 'type' of a column\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnColumnTypes ( settings )\r\n        {\r\n            var columns = settings.aoColumns;\r\n            var data = settings.aoData;\r\n            var types = DataTable.ext.type.detect;\r\n            var i, ien, j, jen, k, ken;\r\n            var col, cell, detectedType, cache;\r\n\r\n            // For each column, spin over the \r\n            for ( i=0, ien=columns.length ; i<ien ; i++ ) {\r\n                col = columns[i];\r\n                cache = [];\r\n\r\n                if ( ! col.sType && col._sManualType ) {\r\n                    col.sType = col._sManualType;\r\n                }\r\n                else if ( ! col.sType ) {\r\n                    for ( j=0, jen=types.length ; j<jen ; j++ ) {\r\n                        for ( k=0, ken=data.length ; k<ken ; k++ ) {\r\n                            // Use a cache array so we only need to get the type data\r\n                            // from the formatter once (when using multiple detectors)\r\n                            if ( cache[k] === undefined ) {\r\n                                cache[k] = _fnGetCellData( settings, k, i, 'type' );\r\n                            }\r\n\r\n                            detectedType = types[j]( cache[k], settings );\r\n\r\n                            // Doesn't match, so break early, since this type can't\r\n                            // apply to this column. Also, HTML is a special case since\r\n                            // it is so similar to `string`. Just a single match is\r\n                            // needed for a column to be html type\r\n                            if ( ! detectedType || detectedType === 'html' ) {\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        // Type is valid for all data points in the column - use this\r\n                        // type\r\n                        if ( detectedType ) {\r\n                            col.sType = detectedType;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    // Fall back - if no type was detected, always use string\r\n                    if ( ! col.sType ) {\r\n                        col.sType = 'string';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Take the column definitions and static columns arrays and calculate how\r\n         * they relate to column indexes. The callback function will then apply the\r\n         * definition found for a column to a suitable configuration object.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\r\n         *  @param {array} aoCols The aoColumns array that defines columns individually\r\n         *  @param {function} fn Callback function - takes two parameters, the calculated\r\n         *    column index and the definition for that column.\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )\r\n        {\r\n            var i, iLen, j, jLen, k, kLen, def;\r\n            var columns = oSettings.aoColumns;\r\n\r\n            // Column definitions with aTargets\r\n            if ( aoColDefs )\r\n            {\r\n                /* Loop over the definitions array - loop in reverse so first instance has priority */\r\n                for ( i=aoColDefs.length-1 ; i>=0 ; i-- )\r\n                {\r\n                    def = aoColDefs[i];\r\n\r\n                    /* Each definition can target multiple columns, as it is an array */\r\n                    var aTargets = def.targets !== undefined ?\r\n                        def.targets :\r\n                        def.aTargets;\r\n\r\n                    if ( ! $.isArray( aTargets ) )\r\n                    {\r\n                        aTargets = [ aTargets ];\r\n                    }\r\n\r\n                    for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )\r\n                    {\r\n                        if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )\r\n                        {\r\n                            /* Add columns that we don't yet know about */\r\n                            while( columns.length <= aTargets[j] )\r\n                            {\r\n                                _fnAddColumn( oSettings );\r\n                            }\r\n\r\n                            /* Integer, basic index */\r\n                            fn( aTargets[j], def );\r\n                        }\r\n                        else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )\r\n                        {\r\n                            /* Negative integer, right to left column counting */\r\n                            fn( columns.length+aTargets[j], def );\r\n                        }\r\n                        else if ( typeof aTargets[j] === 'string' )\r\n                        {\r\n                            /* Class name matching on TH element */\r\n                            for ( k=0, kLen=columns.length ; k<kLen ; k++ )\r\n                            {\r\n                                if ( aTargets[j] == \"_all\" ||\r\n                                    $(columns[k].nTh).hasClass( aTargets[j] ) )\r\n                                {\r\n                                    fn( k, def );\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Statically defined columns array\r\n            if ( aoCols )\r\n            {\r\n                for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )\r\n                {\r\n                    fn( i, aoCols[i] );\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Add a data array to the table, creating DOM node etc. This is the parallel to\r\n         * _fnGatherData, but for adding rows from a Javascript source, rather than a\r\n         * DOM source.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {array} aData data array to be added\r\n         *  @param {node} [nTr] TR element to add to the table - optional. If not given,\r\n         *    DataTables will create a row automatically\r\n         *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\r\n         *    if nTr is.\r\n         *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAddData ( oSettings, aDataIn, nTr, anTds )\r\n        {\r\n            /* Create the object for storing information about this new row */\r\n            var iRow = oSettings.aoData.length;\r\n            var oData = $.extend( true, {}, DataTable.models.oRow, {\r\n                src: nTr ? 'dom' : 'data'\r\n            } );\r\n\r\n            oData._aData = aDataIn;\r\n            oSettings.aoData.push( oData );\r\n\r\n            /* Create the cells */\r\n            var nTd, sThisType;\r\n            var columns = oSettings.aoColumns;\r\n            for ( var i=0, iLen=columns.length ; i<iLen ; i++ )\r\n            {\r\n                // When working with a row, the data source object must be populated. In\r\n                // all other cases, the data source object is already populated, so we\r\n                // don't overwrite it, which might break bindings etc\r\n                if ( nTr ) {\r\n                    _fnSetCellData( oSettings, iRow, i, _fnGetCellData( oSettings, iRow, i ) );\r\n                }\r\n                columns[i].sType = null;\r\n            }\r\n\r\n            /* Add to the display array */\r\n            oSettings.aiDisplayMaster.push( iRow );\r\n\r\n            /* Create the DOM information, or register it if already present */\r\n            if ( nTr || ! oSettings.oFeatures.bDeferRender )\r\n            {\r\n                _fnCreateTr( oSettings, iRow, nTr, anTds );\r\n            }\r\n\r\n            return iRow;\r\n        }\r\n\r\n\r\n        /**\r\n         * Add one or more TR elements to the table. Generally we'd expect to\r\n         * use this for reading data from a DOM sourced table, but it could be\r\n         * used for an TR element. Note that if a TR is given, it is used (i.e.\r\n         * it is not cloned).\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {array|node|jQuery} trs The TR element(s) to add to the table\r\n         *  @returns {array} Array of indexes for the added rows\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAddTr( settings, trs )\r\n        {\r\n            var row;\r\n\r\n            // Allow an individual node to be passed in\r\n            if ( ! (trs instanceof $) ) {\r\n                trs = $(trs);\r\n            }\r\n\r\n            return trs.map( function (i, el) {\r\n                row = _fnGetRowElements( settings, el );\r\n                return _fnAddData( settings, row.data, el, row.cells );\r\n            } );\r\n        }\r\n\r\n\r\n        /**\r\n         * Take a TR element and convert it to an index in aoData\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {node} n the TR element to find\r\n         *  @returns {int} index if the node is found, null if not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnNodeToDataIndex( oSettings, n )\r\n        {\r\n            return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;\r\n        }\r\n\r\n\r\n        /**\r\n         * Take a TD element and convert it into a column data index (not the visible index)\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {int} iRow The row number the TD/TH can be found in\r\n         *  @param {node} n The TD/TH element to find\r\n         *  @returns {int} index if the node is found, -1 if not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnNodeToColumnIndex( oSettings, iRow, n )\r\n        {\r\n            return $.inArray( n, oSettings.aoData[ iRow ].anCells );\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the data for a given cell from the internal cache, taking into account data mapping\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {int} rowIdx aoData row id\r\n         *  @param {int} colIdx Column index\r\n         *  @param {string} type data get type ('display', 'type' 'filter' 'sort')\r\n         *  @returns {*} Cell data\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetCellData( settings, rowIdx, colIdx, type )\r\n        {\r\n            var draw           = settings.iDraw;\r\n            var col            = settings.aoColumns[colIdx];\r\n            var rowData        = settings.aoData[rowIdx]._aData;\r\n            var defaultContent = col.sDefaultContent;\r\n            var cellData       = col.fnGetData( rowData, type, {\r\n                settings: settings,\r\n                row:      rowIdx,\r\n                col:      colIdx\r\n            } );\r\n\r\n            if ( cellData === undefined ) {\r\n                if ( settings.iDrawError != draw && defaultContent === null ) {\r\n                    _fnLog( settings, 0, \"Requested unknown parameter \"+\r\n                    (typeof col.mData=='function' ? '{function}' : \"'\"+col.mData+\"'\")+\r\n                    \" for row \"+rowIdx, 4 );\r\n                    settings.iDrawError = draw;\r\n                }\r\n                return defaultContent;\r\n            }\r\n\r\n            /* When the data source is null, we can use default column data */\r\n            if ( (cellData === rowData || cellData === null) && defaultContent !== null ) {\r\n                cellData = defaultContent;\r\n            }\r\n            else if ( typeof cellData === 'function' ) {\r\n                // If the data source is a function, then we run it and use the return,\r\n                // executing in the scope of the data object (for instances)\r\n                return cellData.call( rowData );\r\n            }\r\n\r\n            if ( cellData === null && type == 'display' ) {\r\n                return '';\r\n            }\r\n            return cellData;\r\n        }\r\n\r\n\r\n        /**\r\n         * Set the value for a specific cell, into the internal data cache\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {int} rowIdx aoData row id\r\n         *  @param {int} colIdx Column index\r\n         *  @param {*} val Value to set\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSetCellData( settings, rowIdx, colIdx, val )\r\n        {\r\n            var col     = settings.aoColumns[colIdx];\r\n            var rowData = settings.aoData[rowIdx]._aData;\r\n\r\n            col.fnSetData( rowData, val, {\r\n                settings: settings,\r\n                row:      rowIdx,\r\n                col:      colIdx\r\n            }  );\r\n        }\r\n\r\n\r\n        // Private variable that is used to match action syntax in the data property object\r\n        var __reArray = /\\[.*?\\]$/;\r\n        var __reFn = /\\(\\)$/;\r\n\r\n        /**\r\n         * Split string on periods, taking into account escaped periods\r\n         * @param  {string} str String to split\r\n         * @return {array} Split string\r\n         */\r\n        function _fnSplitObjNotation( str )\r\n        {\r\n            return $.map( str.match(/(\\\\.|[^\\.])+/g), function ( s ) {\r\n                return s.replace(/\\\\./g, '.');\r\n            } );\r\n        }\r\n\r\n\r\n        /**\r\n         * Return a function that can be used to get data from a source object, taking\r\n         * into account the ability to use nested objects as a source\r\n         *  @param {string|int|function} mSource The data source for the object\r\n         *  @returns {function} Data get function\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetObjectDataFn( mSource )\r\n        {\r\n            if ( $.isPlainObject( mSource ) )\r\n            {\r\n                /* Build an object of get functions, and wrap them in a single call */\r\n                var o = {};\r\n                $.each( mSource, function (key, val) {\r\n                    if ( val ) {\r\n                        o[key] = _fnGetObjectDataFn( val );\r\n                    }\r\n                } );\r\n\r\n                return function (data, type, row, meta) {\r\n                    var t = o[type] || o._;\r\n                    return t !== undefined ?\r\n                        t(data, type, row, meta) :\r\n                        data;\r\n                };\r\n            }\r\n            else if ( mSource === null )\r\n            {\r\n                /* Give an empty string for rendering / sorting etc */\r\n                return function (data) { // type, row and meta also passed, but not used\r\n                    return data;\r\n                };\r\n            }\r\n            else if ( typeof mSource === 'function' )\r\n            {\r\n                return function (data, type, row, meta) {\r\n                    return mSource( data, type, row, meta );\r\n                };\r\n            }\r\n            else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\r\n                mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\r\n            {\r\n                /* If there is a . in the source string then the data source is in a\r\n                 * nested object so we loop over the data for each level to get the next\r\n                 * level down. On each loop we test for undefined, and if found immediately\r\n                 * return. This allows entire objects to be missing and sDefaultContent to\r\n                 * be used if defined, rather than throwing an error\r\n                 */\r\n                var fetchData = function (data, type, src) {\r\n                    var arrayNotation, funcNotation, out, innerSrc;\r\n\r\n                    if ( src !== \"\" )\r\n                    {\r\n                        var a = _fnSplitObjNotation( src );\r\n\r\n                        for ( var i=0, iLen=a.length ; i<iLen ; i++ )\r\n                        {\r\n                            // Check if we are dealing with special notation\r\n                            arrayNotation = a[i].match(__reArray);\r\n                            funcNotation = a[i].match(__reFn);\r\n\r\n                            if ( arrayNotation )\r\n                            {\r\n                                // Array notation\r\n                                a[i] = a[i].replace(__reArray, '');\r\n\r\n                                // Condition allows simply [] to be passed in\r\n                                if ( a[i] !== \"\" ) {\r\n                                    data = data[ a[i] ];\r\n                                }\r\n                                out = [];\r\n\r\n                                // Get the remainder of the nested object to get\r\n                                a.splice( 0, i+1 );\r\n                                innerSrc = a.join('.');\r\n\r\n                                // Traverse each entry in the array getting the properties requested\r\n                                for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {\r\n                                    out.push( fetchData( data[j], type, innerSrc ) );\r\n                                }\r\n\r\n                                // If a string is given in between the array notation indicators, that\r\n                                // is used to join the strings together, otherwise an array is returned\r\n                                var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);\r\n                                data = (join===\"\") ? out : out.join(join);\r\n\r\n                                // The inner call to fetchData has already traversed through the remainder\r\n                                // of the source requested, so we exit from the loop\r\n                                break;\r\n                            }\r\n                            else if ( funcNotation )\r\n                            {\r\n                                // Function call\r\n                                a[i] = a[i].replace(__reFn, '');\r\n                                data = data[ a[i] ]();\r\n                                continue;\r\n                            }\r\n\r\n                            if ( data === null || data[ a[i] ] === undefined )\r\n                            {\r\n                                return undefined;\r\n                            }\r\n                            data = data[ a[i] ];\r\n                        }\r\n                    }\r\n\r\n                    return data;\r\n                };\r\n\r\n                return function (data, type) { // row and meta also passed, but not used\r\n                    return fetchData( data, type, mSource );\r\n                };\r\n            }\r\n            else\r\n            {\r\n                /* Array or flat object mapping */\r\n                return function (data, type) { // row and meta also passed, but not used\r\n                    return data[mSource];\r\n                };\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Return a function that can be used to set data from a source object, taking\r\n         * into account the ability to use nested objects as a source\r\n         *  @param {string|int|function} mSource The data source for the object\r\n         *  @returns {function} Data set function\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSetObjectDataFn( mSource )\r\n        {\r\n            if ( $.isPlainObject( mSource ) )\r\n            {\r\n                /* Unlike get, only the underscore (global) option is used for for\r\n                 * setting data since we don't know the type here. This is why an object\r\n                 * option is not documented for `mData` (which is read/write), but it is\r\n                 * for `mRender` which is read only.\r\n                 */\r\n                return _fnSetObjectDataFn( mSource._ );\r\n            }\r\n            else if ( mSource === null )\r\n            {\r\n                /* Nothing to do when the data source is null */\r\n                return function () {};\r\n            }\r\n            else if ( typeof mSource === 'function' )\r\n            {\r\n                return function (data, val, meta) {\r\n                    mSource( data, 'set', val, meta );\r\n                };\r\n            }\r\n            else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\r\n                mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\r\n            {\r\n                /* Like the get, we need to get data from a nested object */\r\n                var setData = function (data, val, src) {\r\n                    var a = _fnSplitObjNotation( src ), b;\r\n                    var aLast = a[a.length-1];\r\n                    var arrayNotation, funcNotation, o, innerSrc;\r\n\r\n                    for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )\r\n                    {\r\n                        // Check if we are dealing with an array notation request\r\n                        arrayNotation = a[i].match(__reArray);\r\n                        funcNotation = a[i].match(__reFn);\r\n\r\n                        if ( arrayNotation )\r\n                        {\r\n                            a[i] = a[i].replace(__reArray, '');\r\n                            data[ a[i] ] = [];\r\n\r\n                            // Get the remainder of the nested object to set so we can recurse\r\n                            b = a.slice();\r\n                            b.splice( 0, i+1 );\r\n                            innerSrc = b.join('.');\r\n\r\n                            // Traverse each entry in the array setting the properties requested\r\n                            for ( var j=0, jLen=val.length ; j<jLen ; j++ )\r\n                            {\r\n                                o = {};\r\n                                setData( o, val[j], innerSrc );\r\n                                data[ a[i] ].push( o );\r\n                            }\r\n\r\n                            // The inner call to setData has already traversed through the remainder\r\n                            // of the source and has set the data, thus we can exit here\r\n                            return;\r\n                        }\r\n                        else if ( funcNotation )\r\n                        {\r\n                            // Function call\r\n                            a[i] = a[i].replace(__reFn, '');\r\n                            data = data[ a[i] ]( val );\r\n                        }\r\n\r\n                        // If the nested object doesn't currently exist - since we are\r\n                        // trying to set the value - create it\r\n                        if ( data[ a[i] ] === null || data[ a[i] ] === undefined )\r\n                        {\r\n                            data[ a[i] ] = {};\r\n                        }\r\n                        data = data[ a[i] ];\r\n                    }\r\n\r\n                    // Last item in the input - i.e, the actual set\r\n                    if ( aLast.match(__reFn ) )\r\n                    {\r\n                        // Function call\r\n                        data = data[ aLast.replace(__reFn, '') ]( val );\r\n                    }\r\n                    else\r\n                    {\r\n                        // If array notation is used, we just want to strip it and use the property name\r\n                        // and assign the value. If it isn't used, then we get the result we want anyway\r\n                        data[ aLast.replace(__reArray, '') ] = val;\r\n                    }\r\n                };\r\n\r\n                return function (data, val) { // meta is also passed in, but not used\r\n                    return setData( data, val, mSource );\r\n                };\r\n            }\r\n            else\r\n            {\r\n                /* Array or flat object mapping */\r\n                return function (data, val) { // meta is also passed in, but not used\r\n                    data[mSource] = val;\r\n                };\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Return an array with the full table data\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns array {array} aData Master data array\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetDataMaster ( settings )\r\n        {\r\n            return _pluck( settings.aoData, '_aData' );\r\n        }\r\n\r\n\r\n        /**\r\n         * Nuke the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnClearTable( settings )\r\n        {\r\n            settings.aoData.length = 0;\r\n            settings.aiDisplayMaster.length = 0;\r\n            settings.aiDisplay.length = 0;\r\n        }\r\n\r\n\r\n        /**\r\n         * Take an array of integers (index array) and remove a target integer (value - not\r\n         * the key!)\r\n         *  @param {array} a Index array to target\r\n         *  @param {int} iTarget value to find\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnDeleteIndex( a, iTarget, splice )\r\n        {\r\n            var iTargetIndex = -1;\r\n\r\n            for ( var i=0, iLen=a.length ; i<iLen ; i++ )\r\n            {\r\n                if ( a[i] == iTarget )\r\n                {\r\n                    iTargetIndex = i;\r\n                }\r\n                else if ( a[i] > iTarget )\r\n                {\r\n                    a[i]--;\r\n                }\r\n            }\r\n\r\n            if ( iTargetIndex != -1 && splice === undefined )\r\n            {\r\n                a.splice( iTargetIndex, 1 );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Mark cached data as invalid such that a re-read of the data will occur when\r\n         * the cached data is next requested. Also update from the data source object.\r\n         *\r\n         * @param {object} settings DataTables settings object\r\n         * @param  {int}    rowIdx   Row index to invalidate\r\n         * @memberof DataTable#oApi\r\n         *\r\n         * @todo For the modularisation of v1.11 this will need to become a callback, so\r\n         *   the sort and filter methods can subscribe to it. That will required\r\n         *   initialisation options for sorting, which is why it is not already baked in\r\n         */\r\n        function _fnInvalidateRow( settings, rowIdx, src, column )\r\n        {\r\n            var row = settings.aoData[ rowIdx ];\r\n            var i, ien;\r\n\r\n            // Are we reading last data from DOM or the data object?\r\n            if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {\r\n                // Read the data from the DOM\r\n                row._aData = _fnGetRowElements( settings, row ).data;\r\n            }\r\n            else {\r\n                // Reading from data object, update the DOM\r\n                var cells = row.anCells;\r\n                var cell;\r\n\r\n                if ( cells ) {\r\n                    for ( i=0, ien=cells.length ; i<ien ; i++ ) {\r\n                        cell = cells[i];\r\n\r\n                        // This is very frustrating, but in IE if you just write directly\r\n                        // to innerHTML, and elements that are overwritten are GC'ed,\r\n                        // even if there is a reference to them elsewhere\r\n                        while ( cell.childNodes.length ) {\r\n                            cell.removeChild( cell.firstChild );\r\n                        }\r\n\r\n                        cells[i].innerHTML = _fnGetCellData( settings, rowIdx, i, 'display' );\r\n                    }\r\n                }\r\n            }\r\n\r\n            row._aSortData = null;\r\n            row._aFilterData = null;\r\n\r\n            // Invalidate the type for a specific column (if given) or all columns since\r\n            // the data might have changed\r\n            var cols = settings.aoColumns;\r\n            if ( column !== undefined ) {\r\n                cols[ column ].sType = null;\r\n            }\r\n            else {\r\n                for ( i=0, ien=cols.length ; i<ien ; i++ ) {\r\n                    cols[i].sType = null;\r\n                }\r\n            }\r\n\r\n            // Update DataTables special `DT_*` attributes for the row\r\n            _fnRowAttributes( row );\r\n        }\r\n\r\n\r\n        /**\r\n         * Build a data source object from an HTML row, reading the contents of the\r\n         * cells that are in the row.\r\n         *\r\n         * @param {object} settings DataTables settings object\r\n         * @param {node|object} TR element from which to read data or existing row\r\n         *   object from which to re-read the data from the cells\r\n         * @returns {object} Object with two parameters: `data` the data read, in\r\n         *   document order, and `cells` and array of nodes (they can be useful to the\r\n         *   caller, so rather than needing a second traversal to get them, just return\r\n         *   them from here).\r\n         * @memberof DataTable#oApi\r\n         */\r\n        function _fnGetRowElements( settings, row )\r\n        {\r\n            var\r\n                d = [],\r\n                tds = [],\r\n                td = row.firstChild,\r\n                name, col, o, i=0, contents,\r\n                columns = settings.aoColumns;\r\n\r\n            var attr = function ( str, data, td  ) {\r\n                if ( typeof str === 'string' ) {\r\n                    var idx = str.indexOf('@');\r\n\r\n                    if ( idx !== -1 ) {\r\n                        var src = str.substring( idx+1 );\r\n                        o[ '@'+src ] = td.getAttribute( src );\r\n                    }\r\n                }\r\n            };\r\n\r\n            var cellProcess = function ( cell ) {\r\n                col = columns[i];\r\n                contents = $.trim(cell.innerHTML);\r\n\r\n                if ( col && col._bAttrSrc ) {\r\n                    o = {\r\n                        display: contents\r\n                    };\r\n\r\n                    attr( col.mData.sort, o, cell );\r\n                    attr( col.mData.type, o, cell );\r\n                    attr( col.mData.filter, o, cell );\r\n\r\n                    d.push( o );\r\n                }\r\n                else {\r\n                    d.push( contents );\r\n                }\r\n\r\n                i++;\r\n            };\r\n\r\n            if ( td ) {\r\n                // `tr` element passed in\r\n                while ( td ) {\r\n                    name = td.nodeName.toUpperCase();\r\n\r\n                    if ( name == \"TD\" || name == \"TH\" ) {\r\n                        cellProcess( td );\r\n                        tds.push( td );\r\n                    }\r\n\r\n                    td = td.nextSibling;\r\n                }\r\n            }\r\n            else {\r\n                // Existing row object passed in\r\n                tds = row.anCells;\r\n\r\n                for ( var j=0, jen=tds.length ; j<jen ; j++ ) {\r\n                    cellProcess( tds[j] );\r\n                }\r\n            }\r\n\r\n            return {\r\n                data: d,\r\n                cells: tds\r\n            };\r\n        }\r\n        /**\r\n         * Create a new TR element (and it's TD children) for a row\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {int} iRow Row to consider\r\n         *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\r\n         *    DataTables will create a row automatically\r\n         *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\r\n         *    if nTr is.\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )\r\n        {\r\n            var\r\n                row = oSettings.aoData[iRow],\r\n                rowData = row._aData,\r\n                cells = [],\r\n                nTr, nTd, oCol,\r\n                i, iLen;\r\n\r\n            if ( row.nTr === null )\r\n            {\r\n                nTr = nTrIn || document.createElement('tr');\r\n\r\n                row.nTr = nTr;\r\n                row.anCells = cells;\r\n\r\n                /* Use a private property on the node to allow reserve mapping from the node\r\n                 * to the aoData array for fast look up\r\n                 */\r\n                nTr._DT_RowIndex = iRow;\r\n\r\n                /* Special parameters can be given by the data source to be used on the row */\r\n                _fnRowAttributes( row );\r\n\r\n                /* Process each column */\r\n                for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )\r\n                {\r\n                    oCol = oSettings.aoColumns[i];\r\n\r\n                    nTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );\r\n                    cells.push( nTd );\r\n\r\n                    // Need to create the HTML if new, or if a rendering function is defined\r\n                    if ( !nTrIn || oCol.mRender || oCol.mData !== i )\r\n                    {\r\n                        nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );\r\n                    }\r\n\r\n                    /* Add user defined class */\r\n                    if ( oCol.sClass )\r\n                    {\r\n                        nTd.className += ' '+oCol.sClass;\r\n                    }\r\n\r\n                    // Visibility - add or remove as required\r\n                    if ( oCol.bVisible && ! nTrIn )\r\n                    {\r\n                        nTr.appendChild( nTd );\r\n                    }\r\n                    else if ( ! oCol.bVisible && nTrIn )\r\n                    {\r\n                        nTd.parentNode.removeChild( nTd );\r\n                    }\r\n\r\n                    if ( oCol.fnCreatedCell )\r\n                    {\r\n                        oCol.fnCreatedCell.call( oSettings.oInstance,\r\n                            nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i\r\n                        );\r\n                    }\r\n                }\r\n\r\n                _fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow] );\r\n            }\r\n\r\n            // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved\r\n            // and deployed\r\n            row.nTr.setAttribute( 'role', 'row' );\r\n        }\r\n\r\n\r\n        /**\r\n         * Add attributes to a row based on the special `DT_*` parameters in a data\r\n         * source object.\r\n         *  @param {object} DataTables row object for the row to be modified\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnRowAttributes( row )\r\n        {\r\n            var tr = row.nTr;\r\n            var data = row._aData;\r\n\r\n            if ( tr ) {\r\n                if ( data.DT_RowId ) {\r\n                    tr.id = data.DT_RowId;\r\n                }\r\n\r\n                if ( data.DT_RowClass ) {\r\n                    // Remove any classes added by DT_RowClass before\r\n                    var a = data.DT_RowClass.split(' ');\r\n                    row.__rowc = row.__rowc ?\r\n                        _unique( row.__rowc.concat( a ) ) :\r\n                        a;\r\n\r\n                    $(tr)\r\n                        .removeClass( row.__rowc.join(' ') )\r\n                        .addClass( data.DT_RowClass );\r\n                }\r\n\r\n                if ( data.DT_RowData ) {\r\n                    $(tr).data( data.DT_RowData );\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Create the HTML header for the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnBuildHead( oSettings )\r\n        {\r\n            var i, ien, cell, row, column;\r\n            var thead = oSettings.nTHead;\r\n            var tfoot = oSettings.nTFoot;\r\n            var createHeader = $('th, td', thead).length === 0;\r\n            var classes = oSettings.oClasses;\r\n            var columns = oSettings.aoColumns;\r\n\r\n            if ( createHeader ) {\r\n                row = $('<tr/>').appendTo( thead );\r\n            }\r\n\r\n            for ( i=0, ien=columns.length ; i<ien ; i++ ) {\r\n                column = columns[i];\r\n                cell = $( column.nTh ).addClass( column.sClass );\r\n\r\n                if ( createHeader ) {\r\n                    cell.appendTo( row );\r\n                }\r\n\r\n                // 1.11 move into sorting\r\n                if ( oSettings.oFeatures.bSort ) {\r\n                    cell.addClass( column.sSortingClass );\r\n\r\n                    if ( column.bSortable !== false ) {\r\n                        cell\r\n                            .attr( 'tabindex', oSettings.iTabIndex )\r\n                            .attr( 'aria-controls', oSettings.sTableId );\r\n\r\n                        _fnSortAttachListener( oSettings, column.nTh, i );\r\n                    }\r\n                }\r\n\r\n                if ( column.sTitle != cell.html() ) {\r\n                    cell.html( column.sTitle );\r\n                }\r\n\r\n                _fnRenderer( oSettings, 'header' )(\r\n                    oSettings, cell, column, classes\r\n                );\r\n            }\r\n\r\n            if ( createHeader ) {\r\n                _fnDetectHeader( oSettings.aoHeader, thead );\r\n            }\r\n\r\n            /* ARIA role for the rows */\r\n            $(thead).find('>tr').attr('role', 'row');\r\n\r\n            /* Deal with the footer - add classes if required */\r\n            $(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );\r\n            $(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );\r\n\r\n            // Cache the footer cells. Note that we only take the cells from the first\r\n            // row in the footer. If there is more than one row the user wants to\r\n            // interact with, they need to use the table().foot() method. Note also this\r\n            // allows cells to be used for multiple columns using colspan\r\n            if ( tfoot !== null ) {\r\n                var cells = oSettings.aoFooter[0];\r\n\r\n                for ( i=0, ien=cells.length ; i<ien ; i++ ) {\r\n                    column = columns[i];\r\n                    column.nTf = cells[i].cell;\r\n\r\n                    if ( column.sClass ) {\r\n                        $(column.nTf).addClass( column.sClass );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Draw the header (or footer) element based on the column visibility states. The\r\n         * methodology here is to use the layout array from _fnDetectHeader, modified for\r\n         * the instantaneous column visibility, to construct the new layout. The grid is\r\n         * traversed over cell at a time in a rows x columns grid fashion, although each\r\n         * cell insert can cover multiple elements in the grid - which is tracks using the\r\n         * aApplied array. Cell inserts in the grid will only occur where there isn't\r\n         * already a cell in that position.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param array {objects} aoSource Layout array from _fnDetectHeader\r\n         *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnDrawHead( oSettings, aoSource, bIncludeHidden )\r\n        {\r\n            var i, iLen, j, jLen, k, kLen, n, nLocalTr;\r\n            var aoLocal = [];\r\n            var aApplied = [];\r\n            var iColumns = oSettings.aoColumns.length;\r\n            var iRowspan, iColspan;\r\n\r\n            if ( ! aoSource )\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (  bIncludeHidden === undefined )\r\n            {\r\n                bIncludeHidden = false;\r\n            }\r\n\r\n            /* Make a copy of the master layout array, but without the visible columns in it */\r\n            for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )\r\n            {\r\n                aoLocal[i] = aoSource[i].slice();\r\n                aoLocal[i].nTr = aoSource[i].nTr;\r\n\r\n                /* Remove any columns which are currently hidden */\r\n                for ( j=iColumns-1 ; j>=0 ; j-- )\r\n                {\r\n                    if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )\r\n                    {\r\n                        aoLocal[i].splice( j, 1 );\r\n                    }\r\n                }\r\n\r\n                /* Prep the applied array - it needs an element for each row */\r\n                aApplied.push( [] );\r\n            }\r\n\r\n            for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )\r\n            {\r\n                nLocalTr = aoLocal[i].nTr;\r\n\r\n                /* All cells are going to be replaced, so empty out the row */\r\n                if ( nLocalTr )\r\n                {\r\n                    while( (n = nLocalTr.firstChild) )\r\n                    {\r\n                        nLocalTr.removeChild( n );\r\n                    }\r\n                }\r\n\r\n                for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )\r\n                {\r\n                    iRowspan = 1;\r\n                    iColspan = 1;\r\n\r\n                    /* Check to see if there is already a cell (row/colspan) covering our target\r\n                     * insert point. If there is, then there is nothing to do.\r\n                     */\r\n                    if ( aApplied[i][j] === undefined )\r\n                    {\r\n                        nLocalTr.appendChild( aoLocal[i][j].cell );\r\n                        aApplied[i][j] = 1;\r\n\r\n                        /* Expand the cell to cover as many rows as needed */\r\n                        while ( aoLocal[i+iRowspan] !== undefined &&\r\n                        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )\r\n                        {\r\n                            aApplied[i+iRowspan][j] = 1;\r\n                            iRowspan++;\r\n                        }\r\n\r\n                        /* Expand the cell to cover as many columns as needed */\r\n                        while ( aoLocal[i][j+iColspan] !== undefined &&\r\n                        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )\r\n                        {\r\n                            /* Must update the applied array over the rows for the columns */\r\n                            for ( k=0 ; k<iRowspan ; k++ )\r\n                            {\r\n                                aApplied[i+k][j+iColspan] = 1;\r\n                            }\r\n                            iColspan++;\r\n                        }\r\n\r\n                        /* Do the actual expansion in the DOM */\r\n                        $(aoLocal[i][j].cell)\r\n                            .attr('rowspan', iRowspan)\r\n                            .attr('colspan', iColspan);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Insert the required TR nodes into the table for display\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnDraw( oSettings )\r\n        {\r\n            /* Provide a pre-callback function which can be used to cancel the draw is false is returned */\r\n            var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );\r\n            if ( $.inArray( false, aPreDraw ) !== -1 )\r\n            {\r\n                _fnProcessingDisplay( oSettings, false );\r\n                return;\r\n            }\r\n\r\n            var i, iLen, n;\r\n            var anRows = [];\r\n            var iRowCount = 0;\r\n            var asStripeClasses = oSettings.asStripeClasses;\r\n            var iStripes = asStripeClasses.length;\r\n            var iOpenRows = oSettings.aoOpenRows.length;\r\n            var oLang = oSettings.oLanguage;\r\n            var iInitDisplayStart = oSettings.iInitDisplayStart;\r\n            var bServerSide = _fnDataSource( oSettings ) == 'ssp';\r\n            var aiDisplay = oSettings.aiDisplay;\r\n\r\n            oSettings.bDrawing = true;\r\n\r\n            /* Check and see if we have an initial draw position from state saving */\r\n            if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )\r\n            {\r\n                oSettings._iDisplayStart = bServerSide ?\r\n                    iInitDisplayStart :\r\n                    iInitDisplayStart >= oSettings.fnRecordsDisplay() ?\r\n                        0 :\r\n                        iInitDisplayStart;\r\n\r\n                oSettings.iInitDisplayStart = -1;\r\n            }\r\n\r\n            var iDisplayStart = oSettings._iDisplayStart;\r\n            var iDisplayEnd = oSettings.fnDisplayEnd();\r\n\r\n            /* Server-side processing draw intercept */\r\n            if ( oSettings.bDeferLoading )\r\n            {\r\n                oSettings.bDeferLoading = false;\r\n                oSettings.iDraw++;\r\n                _fnProcessingDisplay( oSettings, false );\r\n            }\r\n            else if ( !bServerSide )\r\n            {\r\n                oSettings.iDraw++;\r\n            }\r\n            else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )\r\n            {\r\n                return;\r\n            }\r\n\r\n            if ( aiDisplay.length !== 0 )\r\n            {\r\n                var iStart = bServerSide ? 0 : iDisplayStart;\r\n                var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\r\n\r\n                for ( var j=iStart ; j<iEnd ; j++ )\r\n                {\r\n                    var iDataIndex = aiDisplay[j];\r\n                    var aoData = oSettings.aoData[ iDataIndex ];\r\n                    if ( aoData.nTr === null )\r\n                    {\r\n                        _fnCreateTr( oSettings, iDataIndex );\r\n                    }\r\n\r\n                    var nRow = aoData.nTr;\r\n\r\n                    /* Remove the old striping classes and then add the new one */\r\n                    if ( iStripes !== 0 )\r\n                    {\r\n                        var sStripe = asStripeClasses[ iRowCount % iStripes ];\r\n                        if ( aoData._sRowStripe != sStripe )\r\n                        {\r\n                            $(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );\r\n                            aoData._sRowStripe = sStripe;\r\n                        }\r\n                    }\r\n\r\n                    /* Row callback functions - might want to manipulate the row */\r\n                    _fnCallbackFire( oSettings, 'aoRowCallback', null,\r\n                        [nRow, aoData._aData, iRowCount, j] );\r\n\r\n                    anRows.push( nRow );\r\n                    iRowCount++;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                /* Table is empty - create a row with an empty message in it */\r\n                var sZero = oLang.sZeroRecords;\r\n                if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )\r\n                {\r\n                    sZero = oLang.sLoadingRecords;\r\n                }\r\n                else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )\r\n                {\r\n                    sZero = oLang.sEmptyTable;\r\n                }\r\n\r\n                anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )\r\n                    .append( $('<td />', {\r\n                        'valign':  'top',\r\n                        'colSpan': _fnVisbleColumns( oSettings ),\r\n                        'class':   oSettings.oClasses.sRowEmpty\r\n                    } ).html( sZero ) )[0];\r\n            }\r\n\r\n            /* Header and footer callbacks */\r\n            _fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],\r\n                _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\r\n\r\n            _fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],\r\n                _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\r\n\r\n            var body = $(oSettings.nTBody);\r\n\r\n            body.children().detach();\r\n            body.append( $(anRows) );\r\n\r\n            /* Call all required callback functions for the end of a draw */\r\n            _fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );\r\n\r\n            /* Draw is complete, sorting and filtering must be as well */\r\n            oSettings.bSorted = false;\r\n            oSettings.bFiltered = false;\r\n            oSettings.bDrawing = false;\r\n        }\r\n\r\n\r\n        /**\r\n         * Redraw the table - taking account of the various features which are enabled\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {boolean} [holdPosition] Keep the current paging position. By default\r\n         *    the paging is reset to the first page\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnReDraw( settings, holdPosition )\r\n        {\r\n            var\r\n                features = settings.oFeatures,\r\n                sort     = features.bSort,\r\n                filter   = features.bFilter;\r\n\r\n            if ( sort ) {\r\n                _fnSort( settings );\r\n            }\r\n\r\n            if ( filter ) {\r\n                _fnFilterComplete( settings, settings.oPreviousSearch );\r\n            }\r\n            else {\r\n                // No filtering, so we want to just use the display master\r\n                settings.aiDisplay = settings.aiDisplayMaster.slice();\r\n            }\r\n\r\n            if ( holdPosition !== true ) {\r\n                settings._iDisplayStart = 0;\r\n            }\r\n\r\n            // Let any modules know about the draw hold position state (used by\r\n            // scrolling internally)\r\n            settings._drawHold = holdPosition;\r\n\r\n            _fnDraw( settings );\r\n\r\n            settings._drawHold = false;\r\n        }\r\n\r\n\r\n        /**\r\n         * Add the options to the page HTML for the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAddOptionsHtml ( oSettings )\r\n        {\r\n            var classes = oSettings.oClasses;\r\n            var table = $(oSettings.nTable);\r\n            var holding = $('<div/>').insertBefore( table ); // Holding element for speed\r\n            var features = oSettings.oFeatures;\r\n\r\n            // All DataTables are wrapped in a div\r\n            var insert = $('<div/>', {\r\n                id:      oSettings.sTableId+'_wrapper',\r\n                'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)\r\n            } );\r\n\r\n            oSettings.nHolding = holding[0];\r\n            oSettings.nTableWrapper = insert[0];\r\n            oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\r\n\r\n            /* Loop over the user set positioning and place the elements as needed */\r\n            var aDom = oSettings.sDom.split('');\r\n            var featureNode, cOption, nNewNode, cNext, sAttr, j;\r\n            for ( var i=0 ; i<aDom.length ; i++ )\r\n            {\r\n                featureNode = null;\r\n                cOption = aDom[i];\r\n\r\n                if ( cOption == '<' )\r\n                {\r\n                    /* New container div */\r\n                    nNewNode = $('<div/>')[0];\r\n\r\n                    /* Check to see if we should append an id and/or a class name to the container */\r\n                    cNext = aDom[i+1];\r\n                    if ( cNext == \"'\" || cNext == '\"' )\r\n                    {\r\n                        sAttr = \"\";\r\n                        j = 2;\r\n                        while ( aDom[i+j] != cNext )\r\n                        {\r\n                            sAttr += aDom[i+j];\r\n                            j++;\r\n                        }\r\n\r\n                        /* Replace jQuery UI constants @todo depreciated */\r\n                        if ( sAttr == \"H\" )\r\n                        {\r\n                            sAttr = classes.sJUIHeader;\r\n                        }\r\n                        else if ( sAttr == \"F\" )\r\n                        {\r\n                            sAttr = classes.sJUIFooter;\r\n                        }\r\n\r\n                        /* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\r\n                         * breaks the string into parts and applies them as needed\r\n                         */\r\n                        if ( sAttr.indexOf('.') != -1 )\r\n                        {\r\n                            var aSplit = sAttr.split('.');\r\n                            nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);\r\n                            nNewNode.className = aSplit[1];\r\n                        }\r\n                        else if ( sAttr.charAt(0) == \"#\" )\r\n                        {\r\n                            nNewNode.id = sAttr.substr(1, sAttr.length-1);\r\n                        }\r\n                        else\r\n                        {\r\n                            nNewNode.className = sAttr;\r\n                        }\r\n\r\n                        i += j; /* Move along the position array */\r\n                    }\r\n\r\n                    insert.append( nNewNode );\r\n                    insert = $(nNewNode);\r\n                }\r\n                else if ( cOption == '>' )\r\n                {\r\n                    /* End container div */\r\n                    insert = insert.parent();\r\n                }\r\n                // @todo Move options into their own plugins?\r\n                else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )\r\n                {\r\n                    /* Length */\r\n                    featureNode = _fnFeatureHtmlLength( oSettings );\r\n                }\r\n                else if ( cOption == 'f' && features.bFilter )\r\n                {\r\n                    /* Filter */\r\n                    featureNode = _fnFeatureHtmlFilter( oSettings );\r\n                }\r\n                else if ( cOption == 'r' && features.bProcessing )\r\n                {\r\n                    /* pRocessing */\r\n                    featureNode = _fnFeatureHtmlProcessing( oSettings );\r\n                }\r\n                else if ( cOption == 't' )\r\n                {\r\n                    /* Table */\r\n                    featureNode = _fnFeatureHtmlTable( oSettings );\r\n                }\r\n                else if ( cOption ==  'i' && features.bInfo )\r\n                {\r\n                    /* Info */\r\n                    featureNode = _fnFeatureHtmlInfo( oSettings );\r\n                }\r\n                else if ( cOption == 'p' && features.bPaginate )\r\n                {\r\n                    /* Pagination */\r\n                    featureNode = _fnFeatureHtmlPaginate( oSettings );\r\n                }\r\n                else if ( DataTable.ext.feature.length !== 0 )\r\n                {\r\n                    /* Plug-in features */\r\n                    var aoFeatures = DataTable.ext.feature;\r\n                    for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )\r\n                    {\r\n                        if ( cOption == aoFeatures[k].cFeature )\r\n                        {\r\n                            featureNode = aoFeatures[k].fnInit( oSettings );\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /* Add to the 2D features array */\r\n                if ( featureNode )\r\n                {\r\n                    var aanFeatures = oSettings.aanFeatures;\r\n\r\n                    if ( ! aanFeatures[cOption] )\r\n                    {\r\n                        aanFeatures[cOption] = [];\r\n                    }\r\n\r\n                    aanFeatures[cOption].push( featureNode );\r\n                    insert.append( featureNode );\r\n                }\r\n            }\r\n\r\n            /* Built our DOM structure - replace the holding div with what we want */\r\n            holding.replaceWith( insert );\r\n        }\r\n\r\n\r\n        /**\r\n         * Use the DOM source to create up an array of header cells. The idea here is to\r\n         * create a layout grid (array) of rows x columns, which contains a reference\r\n         * to the cell that that point in the grid (regardless of col/rowspan), such that\r\n         * any column / row could be removed and the new grid constructed\r\n         *  @param array {object} aLayout Array to store the calculated layout in\r\n         *  @param {node} nThead The header/footer element for the table\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnDetectHeader ( aLayout, nThead )\r\n        {\r\n            var nTrs = $(nThead).children('tr');\r\n            var nTr, nCell;\r\n            var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;\r\n            var bUnique;\r\n            var fnShiftCol = function ( a, i, j ) {\r\n                var k = a[i];\r\n                while ( k[j] ) {\r\n                    j++;\r\n                }\r\n                return j;\r\n            };\r\n\r\n            aLayout.splice( 0, aLayout.length );\r\n\r\n            /* We know how many rows there are in the layout - so prep it */\r\n            for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\r\n            {\r\n                aLayout.push( [] );\r\n            }\r\n\r\n            /* Calculate a layout array */\r\n            for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\r\n            {\r\n                nTr = nTrs[i];\r\n                iColumn = 0;\r\n\r\n                /* For every cell in the row... */\r\n                nCell = nTr.firstChild;\r\n                while ( nCell ) {\r\n                    if ( nCell.nodeName.toUpperCase() == \"TD\" ||\r\n                        nCell.nodeName.toUpperCase() == \"TH\" )\r\n                    {\r\n                        /* Get the col and rowspan attributes from the DOM and sanitise them */\r\n                        iColspan = nCell.getAttribute('colspan') * 1;\r\n                        iRowspan = nCell.getAttribute('rowspan') * 1;\r\n                        iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;\r\n                        iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;\r\n\r\n                        /* There might be colspan cells already in this row, so shift our target\r\n                         * accordingly\r\n                         */\r\n                        iColShifted = fnShiftCol( aLayout, i, iColumn );\r\n\r\n                        /* Cache calculation for unique columns */\r\n                        bUnique = iColspan === 1 ? true : false;\r\n\r\n                        /* If there is col / rowspan, copy the information into the layout grid */\r\n                        for ( l=0 ; l<iColspan ; l++ )\r\n                        {\r\n                            for ( k=0 ; k<iRowspan ; k++ )\r\n                            {\r\n                                aLayout[i+k][iColShifted+l] = {\r\n                                    \"cell\": nCell,\r\n                                    \"unique\": bUnique\r\n                                };\r\n                                aLayout[i+k].nTr = nTr;\r\n                            }\r\n                        }\r\n                    }\r\n                    nCell = nCell.nextSibling;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Get an array of unique th elements, one for each column\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {node} nHeader automatically detect the layout from this node - optional\r\n         *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\r\n         *  @returns array {node} aReturn list of unique th's\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetUniqueThs ( oSettings, nHeader, aLayout )\r\n        {\r\n            var aReturn = [];\r\n            if ( !aLayout )\r\n            {\r\n                aLayout = oSettings.aoHeader;\r\n                if ( nHeader )\r\n                {\r\n                    aLayout = [];\r\n                    _fnDetectHeader( aLayout, nHeader );\r\n                }\r\n            }\r\n\r\n            for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )\r\n            {\r\n                for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )\r\n                {\r\n                    if ( aLayout[i][j].unique &&\r\n                        (!aReturn[j] || !oSettings.bSortCellsTop) )\r\n                    {\r\n                        aReturn[j] = aLayout[i][j].cell;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return aReturn;\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Create an Ajax call based on the table's settings, taking into account that\r\n         * parameters can have multiple forms, and backwards compatibility.\r\n         *\r\n         * @param {object} oSettings dataTables settings object\r\n         * @param {array} data Data to send to the server, required by\r\n         *     DataTables - may be augmented by developer callbacks\r\n         * @param {function} fn Callback function to run when data is obtained\r\n         */\r\n        function _fnBuildAjax( oSettings, data, fn )\r\n        {\r\n            // Compatibility with 1.9-, allow fnServerData and event to manipulate\r\n            _fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );\r\n\r\n            // Convert to object based for 1.10+ if using the old array scheme which can\r\n            // come from server-side processing or serverParams\r\n            if ( data && $.isArray(data) ) {\r\n                var tmp = {};\r\n                var rbracket = /(.*?)\\[\\]$/;\r\n\r\n                $.each( data, function (key, val) {\r\n                    var match = val.name.match(rbracket);\r\n\r\n                    if ( match ) {\r\n                        // Support for arrays\r\n                        var name = match[0];\r\n\r\n                        if ( ! tmp[ name ] ) {\r\n                            tmp[ name ] = [];\r\n                        }\r\n                        tmp[ name ].push( val.value );\r\n                    }\r\n                    else {\r\n                        tmp[val.name] = val.value;\r\n                    }\r\n                } );\r\n                data = tmp;\r\n            }\r\n\r\n            var ajaxData;\r\n            var ajax = oSettings.ajax;\r\n            var instance = oSettings.oInstance;\r\n\r\n            if ( $.isPlainObject( ajax ) && ajax.data )\r\n            {\r\n                ajaxData = ajax.data;\r\n\r\n                var newData = $.isFunction( ajaxData ) ?\r\n                    ajaxData( data ) :  // fn can manipulate data or return an object\r\n                    ajaxData;           // object or array to merge\r\n\r\n                // If the function returned an object, use that alone\r\n                data = $.isFunction( ajaxData ) && newData ?\r\n                    newData :\r\n                    $.extend( true, data, newData );\r\n\r\n                // Remove the data property as we've resolved it already and don't want\r\n                // jQuery to do it again (it is restored at the end of the function)\r\n                delete ajax.data;\r\n            }\r\n\r\n            var baseAjax = {\r\n                \"data\": data,\r\n                \"success\": function (json) {\r\n                    var error = json.error || json.sError;\r\n                    if ( error ) {\r\n                        oSettings.oApi._fnLog( oSettings, 0, error );\r\n                    }\r\n\r\n                    oSettings.json = json;\r\n                    _fnCallbackFire( oSettings, null, 'xhr', [oSettings, json] );\r\n                    fn( json );\r\n                },\r\n                \"dataType\": \"json\",\r\n                \"cache\": false,\r\n                \"type\": oSettings.sServerMethod,\r\n                \"error\": function (xhr, error, thrown) {\r\n                    var log = oSettings.oApi._fnLog;\r\n\r\n                    if ( error == \"parsererror\" ) {\r\n                        log( oSettings, 0, 'Invalid JSON response', 1 );\r\n                    }\r\n                    else if ( xhr.readyState === 4 ) {\r\n                        log( oSettings, 0, 'Ajax error', 7 );\r\n                    }\r\n\r\n                    _fnProcessingDisplay( oSettings, false );\r\n                }\r\n            };\r\n\r\n            // Store the data submitted for the API\r\n            oSettings.oAjaxData = data;\r\n\r\n            // Allow plug-ins and external processes to modify the data\r\n            _fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );\r\n\r\n            if ( oSettings.fnServerData )\r\n            {\r\n                // DataTables 1.9- compatibility\r\n                oSettings.fnServerData.call( instance,\r\n                    oSettings.sAjaxSource,\r\n                    $.map( data, function (val, key) { // Need to convert back to 1.9 trad format\r\n                        return { name: key, value: val };\r\n                    } ),\r\n                    fn,\r\n                    oSettings\r\n                );\r\n            }\r\n            else if ( oSettings.sAjaxSource || typeof ajax === 'string' )\r\n            {\r\n                // DataTables 1.9- compatibility\r\n                oSettings.jqXHR = $.ajax( $.extend( baseAjax, {\r\n                    url: ajax || oSettings.sAjaxSource\r\n                } ) );\r\n            }\r\n            else if ( $.isFunction( ajax ) )\r\n            {\r\n                // Is a function - let the caller define what needs to be done\r\n                oSettings.jqXHR = ajax.call( instance, data, fn, oSettings );\r\n            }\r\n            else\r\n            {\r\n                // Object to extend the base settings\r\n                oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );\r\n\r\n                // Restore for next time around\r\n                ajax.data = ajaxData;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Update the table using an Ajax call\r\n         *  @param {object} settings dataTables settings object\r\n         *  @returns {boolean} Block the table drawing or not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAjaxUpdate( settings )\r\n        {\r\n            if ( settings.bAjaxDataGet ) {\r\n                settings.iDraw++;\r\n                _fnProcessingDisplay( settings, true );\r\n\r\n                _fnBuildAjax(\r\n                    settings,\r\n                    _fnAjaxParameters( settings ),\r\n                    function(json) {\r\n                        _fnAjaxUpdateDraw( settings, json );\r\n                    }\r\n                );\r\n\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n\r\n        /**\r\n         * Build up the parameters in an object needed for a server-side processing\r\n         * request. Note that this is basically done twice, is different ways - a modern\r\n         * method which is used by default in DataTables 1.10 which uses objects and\r\n         * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\r\n         * the sAjaxSource option is used in the initialisation, or the legacyAjax\r\n         * option is set.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns {bool} block the table drawing or not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAjaxParameters( settings )\r\n        {\r\n            var\r\n                columns = settings.aoColumns,\r\n                columnCount = columns.length,\r\n                features = settings.oFeatures,\r\n                preSearch = settings.oPreviousSearch,\r\n                preColSearch = settings.aoPreSearchCols,\r\n                i, data = [], dataProp, column, columnSearch,\r\n                sort = _fnSortFlatten( settings ),\r\n                displayStart = settings._iDisplayStart,\r\n                displayLength = features.bPaginate !== false ?\r\n                    settings._iDisplayLength :\r\n                    -1;\r\n\r\n            var param = function ( name, value ) {\r\n                data.push( { 'name': name, 'value': value } );\r\n            };\r\n\r\n            // DataTables 1.9- compatible method\r\n            param( 'sEcho',          settings.iDraw );\r\n            param( 'iColumns',       columnCount );\r\n            param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );\r\n            param( 'iDisplayStart',  displayStart );\r\n            param( 'iDisplayLength', displayLength );\r\n\r\n            // DataTables 1.10+ method\r\n            var d = {\r\n                draw:    settings.iDraw,\r\n                columns: [],\r\n                order:   [],\r\n                start:   displayStart,\r\n                length:  displayLength,\r\n                search:  {\r\n                    value: preSearch.sSearch,\r\n                    regex: preSearch.bRegex\r\n                }\r\n            };\r\n\r\n            for ( i=0 ; i<columnCount ; i++ ) {\r\n                column = columns[i];\r\n                columnSearch = preColSearch[i];\r\n                dataProp = typeof column.mData==\"function\" ? 'function' : column.mData ;\r\n\r\n                d.columns.push( {\r\n                    data:       dataProp,\r\n                    name:       column.sName,\r\n                    searchable: column.bSearchable,\r\n                    orderable:  column.bSortable,\r\n                    search:     {\r\n                        value: columnSearch.sSearch,\r\n                        regex: columnSearch.bRegex\r\n                    }\r\n                } );\r\n\r\n                param( \"mDataProp_\"+i, dataProp );\r\n\r\n                if ( features.bFilter ) {\r\n                    param( 'sSearch_'+i,     columnSearch.sSearch );\r\n                    param( 'bRegex_'+i,      columnSearch.bRegex );\r\n                    param( 'bSearchable_'+i, column.bSearchable );\r\n                }\r\n\r\n                if ( features.bSort ) {\r\n                    param( 'bSortable_'+i, column.bSortable );\r\n                }\r\n            }\r\n\r\n            if ( features.bFilter ) {\r\n                param( 'sSearch', preSearch.sSearch );\r\n                param( 'bRegex', preSearch.bRegex );\r\n            }\r\n\r\n            if ( features.bSort ) {\r\n                $.each( sort, function ( i, val ) {\r\n                    d.order.push( { column: val.col, dir: val.dir } );\r\n\r\n                    param( 'iSortCol_'+i, val.col );\r\n                    param( 'sSortDir_'+i, val.dir );\r\n                } );\r\n\r\n                param( 'iSortingCols', sort.length );\r\n            }\r\n\r\n            // If the legacy.ajax parameter is null, then we automatically decide which\r\n            // form to use, based on sAjaxSource\r\n            var legacy = DataTable.ext.legacy.ajax;\r\n            if ( legacy === null ) {\r\n                return settings.sAjaxSource ? data : d;\r\n            }\r\n\r\n            // Otherwise, if legacy has been specified then we use that to decide on the\r\n            // form\r\n            return legacy ? data : d;\r\n        }\r\n\r\n\r\n        /**\r\n         * Data the data from the server (nuking the old) and redraw the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {object} json json data return from the server.\r\n         *  @param {string} json.sEcho Tracking flag for DataTables to match requests\r\n         *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\r\n         *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\r\n         *  @param {array} json.aaData The data to display on this page\r\n         *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAjaxUpdateDraw ( settings, json )\r\n        {\r\n            // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\r\n            // Support both\r\n            var compat = function ( old, modern ) {\r\n                return json[old] !== undefined ? json[old] : json[modern];\r\n            };\r\n\r\n            var draw            = compat( 'sEcho',                'draw' );\r\n            var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );\r\n            var rocordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );\r\n\r\n            if ( draw ) {\r\n                // Protect against out of sequence returns\r\n                if ( draw*1 < settings.iDraw ) {\r\n                    return;\r\n                }\r\n                settings.iDraw = draw * 1;\r\n            }\r\n\r\n            _fnClearTable( settings );\r\n            settings._iRecordsTotal   = parseInt(recordsTotal, 10);\r\n            settings._iRecordsDisplay = parseInt(rocordsFiltered, 10);\r\n\r\n            var data = _fnAjaxDataSrc( settings, json );\r\n            for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                _fnAddData( settings, data[i] );\r\n            }\r\n            settings.aiDisplay = settings.aiDisplayMaster.slice();\r\n\r\n            settings.bAjaxDataGet = false;\r\n            _fnDraw( settings );\r\n\r\n            if ( ! settings._bInitComplete ) {\r\n                _fnInitComplete( settings, json );\r\n            }\r\n\r\n            settings.bAjaxDataGet = true;\r\n            _fnProcessingDisplay( settings, false );\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the data from the JSON data source to use for drawing a table. Using\r\n         * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\r\n         * source object, or from a processing function.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param  {object} json Data source object / array from the server\r\n         *  @return {array} Array of data to use\r\n         */\r\n        function _fnAjaxDataSrc ( oSettings, json )\r\n        {\r\n            var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?\r\n                oSettings.ajax.dataSrc :\r\n                oSettings.sAjaxDataProp; // Compatibility with 1.9-.\r\n\r\n            // Compatibility with 1.9-. In order to read from aaData, check if the\r\n            // default has been changed, if not, check for aaData\r\n            if ( dataSrc === 'data' ) {\r\n                return json.aaData || json[dataSrc];\r\n            }\r\n\r\n            return dataSrc !== \"\" ?\r\n                _fnGetObjectDataFn( dataSrc )( json ) :\r\n                json;\r\n        }\r\n\r\n\r\n        /**\r\n         * Generate the node required for filtering text\r\n         *  @returns {node} Filter control element\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlFilter ( settings )\r\n        {\r\n            var classes = settings.oClasses;\r\n            var tableId = settings.sTableId;\r\n            var language = settings.oLanguage;\r\n            var previousSearch = settings.oPreviousSearch;\r\n            var features = settings.aanFeatures;\r\n            var input = '<input type=\"search\" class=\"'+classes.sFilterInput+'\"/>';\r\n\r\n            var str = language.sSearch;\r\n            str = str.match(/_INPUT_/) ?\r\n                str.replace('_INPUT_', input) :\r\n            str+input;\r\n\r\n            var filter = $('<div/>', {\r\n                'id': ! features.f ? tableId+'_filter' : null,\r\n                'class': classes.sFilter\r\n            } )\r\n                .append( $('<label/>' ).append( str ) );\r\n\r\n            var searchFn = function() {\r\n                /* Update all other filter input elements for the new display */\r\n                var n = features.f;\r\n                var val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\r\n\r\n                /* Now do the filter */\r\n                if ( val != previousSearch.sSearch ) {\r\n                    _fnFilterComplete( settings, {\r\n                        \"sSearch\": val,\r\n                        \"bRegex\": previousSearch.bRegex,\r\n                        \"bSmart\": previousSearch.bSmart ,\r\n                        \"bCaseInsensitive\": previousSearch.bCaseInsensitive\r\n                    } );\r\n\r\n                    // Need to redraw, without resorting\r\n                    settings._iDisplayStart = 0;\r\n                    _fnDraw( settings );\r\n                }\r\n            };\r\n            var jqFilter = $('input', filter)\r\n                .val( previousSearch.sSearch )\r\n                .attr( 'placeholder', language.sSearchPlaceholder )\r\n                .bind(\r\n                'keyup.DT search.DT input.DT paste.DT cut.DT',\r\n                _fnDataSource( settings ) === 'ssp' ?\r\n                    _fnThrottle( searchFn, 400 ):\r\n                    searchFn\r\n            )\r\n                .bind( 'keypress.DT', function(e) {\r\n                    /* Prevent form submission */\r\n                    if ( e.keyCode == 13 ) {\r\n                        return false;\r\n                    }\r\n                } )\r\n                .attr('aria-controls', tableId);\r\n\r\n            // Update the input elements whenever the table is filtered\r\n            $(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {\r\n                if ( settings === s ) {\r\n                    // IE9 throws an 'unknown error' if document.activeElement is used\r\n                    // inside an iframe or frame...\r\n                    try {\r\n                        if ( jqFilter[0] !== document.activeElement ) {\r\n                            jqFilter.val( previousSearch.sSearch );\r\n                        }\r\n                    }\r\n                    catch ( e ) {}\r\n                }\r\n            } );\r\n\r\n            return filter[0];\r\n        }\r\n\r\n\r\n        /**\r\n         * Filter the table using both the global filter and column based filtering\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {object} oSearch search information\r\n         *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFilterComplete ( oSettings, oInput, iForce )\r\n        {\r\n            var oPrevSearch = oSettings.oPreviousSearch;\r\n            var aoPrevSearch = oSettings.aoPreSearchCols;\r\n            var fnSaveFilter = function ( oFilter ) {\r\n                /* Save the filtering values */\r\n                oPrevSearch.sSearch = oFilter.sSearch;\r\n                oPrevSearch.bRegex = oFilter.bRegex;\r\n                oPrevSearch.bSmart = oFilter.bSmart;\r\n                oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\r\n            };\r\n            var fnRegex = function ( o ) {\r\n                // Backwards compatibility with the bEscapeRegex option\r\n                return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\r\n            };\r\n\r\n            // Resolve any column types that are unknown due to addition or invalidation\r\n            // @todo As per sort - can this be moved into an event handler?\r\n            _fnColumnTypes( oSettings );\r\n\r\n            /* In server-side processing all filtering is done by the server, so no point hanging around here */\r\n            if ( _fnDataSource( oSettings ) != 'ssp' )\r\n            {\r\n                /* Global filter */\r\n                _fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );\r\n                fnSaveFilter( oInput );\r\n\r\n                /* Now do the individual column filter */\r\n                for ( var i=0 ; i<aoPrevSearch.length ; i++ )\r\n                {\r\n                    _fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),\r\n                        aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );\r\n                }\r\n\r\n                /* Custom filtering */\r\n                _fnFilterCustom( oSettings );\r\n            }\r\n            else\r\n            {\r\n                fnSaveFilter( oInput );\r\n            }\r\n\r\n            /* Tell the draw function we have been filtering */\r\n            oSettings.bFiltered = true;\r\n            _fnCallbackFire( oSettings, null, 'search', [oSettings] );\r\n        }\r\n\r\n\r\n        /**\r\n         * Apply custom filtering functions\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFilterCustom( settings )\r\n        {\r\n            var filters = DataTable.ext.search;\r\n            var displayRows = settings.aiDisplay;\r\n            var row, rowIdx;\r\n\r\n            for ( var i=0, ien=filters.length ; i<ien ; i++ ) {\r\n                var rows = [];\r\n\r\n                // Loop over each row and see if it should be included\r\n                for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {\r\n                    rowIdx = displayRows[ j ];\r\n                    row = settings.aoData[ rowIdx ];\r\n\r\n                    if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {\r\n                        rows.push( rowIdx );\r\n                    }\r\n                }\r\n\r\n                // So the array reference doesn't break set the results into the\r\n                // existing array\r\n                displayRows.length = 0;\r\n                displayRows.push.apply( displayRows, rows );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Filter the table on a per-column basis\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {string} sInput string to filter on\r\n         *  @param {int} iColumn column to filter\r\n         *  @param {bool} bRegex treat search string as a regular expression or not\r\n         *  @param {bool} bSmart use smart filtering or not\r\n         *  @param {bool} bCaseInsensitive Do case insenstive matching or not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )\r\n        {\r\n            if ( searchStr === '' ) {\r\n                return;\r\n            }\r\n\r\n            var data;\r\n            var display = settings.aiDisplay;\r\n            var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );\r\n\r\n            for ( var i=display.length-1 ; i>=0 ; i-- ) {\r\n                data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];\r\n\r\n                if ( ! rpSearch.test( data ) ) {\r\n                    display.splice( i, 1 );\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Filter the data table based on user input and draw the table\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {string} input string to filter on\r\n         *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\r\n         *  @param {bool} regex treat as a regular expression or not\r\n         *  @param {bool} smart perform smart filtering or not\r\n         *  @param {bool} caseInsensitive Do case insenstive matching or not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFilter( settings, input, force, regex, smart, caseInsensitive )\r\n        {\r\n            var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );\r\n            var prevSearch = settings.oPreviousSearch.sSearch;\r\n            var displayMaster = settings.aiDisplayMaster;\r\n            var display, invalidated, i;\r\n\r\n            // Need to take account of custom filtering functions - always filter\r\n            if ( DataTable.ext.search.length !== 0 ) {\r\n                force = true;\r\n            }\r\n\r\n            // Check if any of the rows were invalidated\r\n            invalidated = _fnFilterData( settings );\r\n\r\n            // If the input is blank - we just want the full data set\r\n            if ( input.length <= 0 ) {\r\n                settings.aiDisplay = displayMaster.slice();\r\n            }\r\n            else {\r\n                // New search - start from the master array\r\n                if ( invalidated ||\r\n                    force ||\r\n                    prevSearch.length > input.length ||\r\n                    input.indexOf(prevSearch) !== 0 ||\r\n                    settings.bSorted // On resort, the display master needs to be\r\n                                     // re-filtered since indexes will have changed\r\n                ) {\r\n                    settings.aiDisplay = displayMaster.slice();\r\n                }\r\n\r\n                // Search the display array\r\n                display = settings.aiDisplay;\r\n\r\n                for ( i=display.length-1 ; i>=0 ; i-- ) {\r\n                    if ( ! rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {\r\n                        display.splice( i, 1 );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Build a regular expression object suitable for searching a table\r\n         *  @param {string} sSearch string to search for\r\n         *  @param {bool} bRegex treat as a regular expression or not\r\n         *  @param {bool} bSmart perform smart filtering or not\r\n         *  @param {bool} bCaseInsensitive Do case insensitive matching or not\r\n         *  @returns {RegExp} constructed object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )\r\n        {\r\n            search = regex ?\r\n                search :\r\n                _fnEscapeRegex( search );\r\n\r\n            if ( smart ) {\r\n                /* For smart filtering we want to allow the search to work regardless of\r\n                 * word order. We also want double quoted text to be preserved, so word\r\n                 * order is important - a la google. So this is what we want to\r\n                 * generate:\r\n                 * \r\n                 * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\r\n                 */\r\n                var a = $.map( search.match( /\"[^\"]+\"|[^ ]+/g ) || '', function ( word ) {\r\n                    return word.charAt(0) === '\"' ?\r\n                        word.match( /^\"(.*)\"$/ )[1] :\r\n                        word;\r\n                } );\r\n\r\n                search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';\r\n            }\r\n\r\n            return new RegExp( search, caseInsensitive ? 'i' : '' );\r\n        }\r\n\r\n\r\n        /**\r\n         * scape a string such that it can be used in a regular expression\r\n         *  @param {string} sVal string to escape\r\n         *  @returns {string} escaped string\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnEscapeRegex ( sVal )\r\n        {\r\n            return sVal.replace( _re_escape_regex, '\\\\$1' );\r\n        }\r\n\r\n\r\n\r\n        var __filter_div = $('<div>')[0];\r\n        var __filter_div_textContent = __filter_div.textContent !== undefined;\r\n\r\n        // Update the filtering data for each row if needed (by invalidation or first run)\r\n        function _fnFilterData ( settings )\r\n        {\r\n            var columns = settings.aoColumns;\r\n            var column;\r\n            var i, j, ien, jen, filterData, cellData, row;\r\n            var fomatters = DataTable.ext.type.search;\r\n            var wasInvalidated = false;\r\n\r\n            for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n                row = settings.aoData[i];\r\n\r\n                if ( ! row._aFilterData ) {\r\n                    filterData = [];\r\n\r\n                    for ( j=0, jen=columns.length ; j<jen ; j++ ) {\r\n                        column = columns[j];\r\n\r\n                        if ( column.bSearchable ) {\r\n                            cellData = _fnGetCellData( settings, i, j, 'filter' );\r\n\r\n                            if ( fomatters[ column.sType ] ) {\r\n                                cellData = fomatters[ column.sType ]( cellData );\r\n                            }\r\n\r\n                            // Search in DataTables 1.10 is string based. In 1.11 this\r\n                            // should be altered to also allow strict type checking.\r\n                            if ( cellData === null ) {\r\n                                cellData = '';\r\n                            }\r\n\r\n                            if ( typeof cellData !== 'string' && cellData.toString ) {\r\n                                cellData = cellData.toString();\r\n                            }\r\n                        }\r\n                        else {\r\n                            cellData = '';\r\n                        }\r\n\r\n                        // If it looks like there is an HTML entity in the string,\r\n                        // attempt to decode it so sorting works as expected. Note that\r\n                        // we could use a single line of jQuery to do this, but the DOM\r\n                        // method used here is much faster http://jsperf.com/html-decode\r\n                        if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {\r\n                            __filter_div.innerHTML = cellData;\r\n                            cellData = __filter_div_textContent ?\r\n                                __filter_div.textContent :\r\n                                __filter_div.innerText;\r\n                        }\r\n\r\n                        if ( cellData.replace ) {\r\n                            cellData = cellData.replace(/[\\r\\n]/g, '');\r\n                        }\r\n\r\n                        filterData.push( cellData );\r\n                    }\r\n\r\n                    row._aFilterData = filterData;\r\n                    row._sFilterRow = filterData.join('  ');\r\n                    wasInvalidated = true;\r\n                }\r\n            }\r\n\r\n            return wasInvalidated;\r\n        }\r\n\r\n\r\n        /**\r\n         * Convert from the internal Hungarian notation to camelCase for external\r\n         * interaction\r\n         *  @param {object} obj Object to convert\r\n         *  @returns {object} Inverted object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSearchToCamel ( obj )\r\n        {\r\n            return {\r\n                search:          obj.sSearch,\r\n                smart:           obj.bSmart,\r\n                regex:           obj.bRegex,\r\n                caseInsensitive: obj.bCaseInsensitive\r\n            };\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Convert from camelCase notation to the internal Hungarian. We could use the\r\n         * Hungarian convert function here, but this is cleaner\r\n         *  @param {object} obj Object to convert\r\n         *  @returns {object} Inverted object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSearchToHung ( obj )\r\n        {\r\n            return {\r\n                sSearch:          obj.search,\r\n                bSmart:           obj.smart,\r\n                bRegex:           obj.regex,\r\n                bCaseInsensitive: obj.caseInsensitive\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Generate the node required for the info display\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns {node} Information element\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlInfo ( settings )\r\n        {\r\n            var\r\n                tid = settings.sTableId,\r\n                nodes = settings.aanFeatures.i,\r\n                n = $('<div/>', {\r\n                    'class': settings.oClasses.sInfo,\r\n                    'id': ! nodes ? tid+'_info' : null\r\n                } );\r\n\r\n            if ( ! nodes ) {\r\n                // Update display on each draw\r\n                settings.aoDrawCallback.push( {\r\n                    \"fn\": _fnUpdateInfo,\r\n                    \"sName\": \"information\"\r\n                } );\r\n\r\n                n\r\n                    .attr( 'role', 'status' )\r\n                    .attr( 'aria-live', 'polite' );\r\n\r\n                // Table is described by our info div\r\n                $(settings.nTable).attr( 'aria-describedby', tid+'_info' );\r\n            }\r\n\r\n            return n[0];\r\n        }\r\n\r\n\r\n        /**\r\n         * Update the information elements in the display\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnUpdateInfo ( settings )\r\n        {\r\n            /* Show information about the table */\r\n            var nodes = settings.aanFeatures.i;\r\n            if ( nodes.length === 0 ) {\r\n                return;\r\n            }\r\n\r\n            var\r\n                lang  = settings.oLanguage,\r\n                start = settings._iDisplayStart+1,\r\n                end   = settings.fnDisplayEnd(),\r\n                max   = settings.fnRecordsTotal(),\r\n                total = settings.fnRecordsDisplay(),\r\n                out   = total ?\r\n                    lang.sInfo :\r\n                    lang.sInfoEmpty;\r\n\r\n            if ( total !== max ) {\r\n                /* Record set after filtering */\r\n                out += ' ' + lang.sInfoFiltered;\r\n            }\r\n\r\n            // Convert the macros\r\n            out += lang.sInfoPostFix;\r\n            out = _fnInfoMacros( settings, out );\r\n\r\n            var callback = lang.fnInfoCallback;\r\n            if ( callback !== null ) {\r\n                out = callback.call( settings.oInstance,\r\n                    settings, start, end, max, total, out\r\n                );\r\n            }\r\n\r\n            $(nodes).html( out );\r\n        }\r\n\r\n\r\n        function _fnInfoMacros ( settings, str )\r\n        {\r\n            // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\r\n            // internally\r\n            var\r\n                formatter  = settings.fnFormatNumber,\r\n                start      = settings._iDisplayStart+1,\r\n                len        = settings._iDisplayLength,\r\n                vis        = settings.fnRecordsDisplay(),\r\n                all        = len === -1;\r\n\r\n            return str.\r\n                replace(/_START_/g, formatter.call( settings, start ) ).\r\n                replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).\r\n                replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).\r\n                replace(/_TOTAL_/g, formatter.call( settings, vis ) ).\r\n                replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).\r\n                replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Draw the table for the first time, adding all required features\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnInitialise ( settings )\r\n        {\r\n            var i, iLen, iAjaxStart=settings.iInitDisplayStart;\r\n            var columns = settings.aoColumns, column;\r\n            var features = settings.oFeatures;\r\n\r\n            /* Ensure that the table data is fully initialised */\r\n            if ( ! settings.bInitialised ) {\r\n                setTimeout( function(){ _fnInitialise( settings ); }, 200 );\r\n                return;\r\n            }\r\n\r\n            /* Show the display HTML options */\r\n            _fnAddOptionsHtml( settings );\r\n\r\n            /* Build and draw the header / footer for the table */\r\n            _fnBuildHead( settings );\r\n            _fnDrawHead( settings, settings.aoHeader );\r\n            _fnDrawHead( settings, settings.aoFooter );\r\n\r\n            /* Okay to show that something is going on now */\r\n            _fnProcessingDisplay( settings, true );\r\n\r\n            /* Calculate sizes for columns */\r\n            if ( features.bAutoWidth ) {\r\n                _fnCalculateColumnWidths( settings );\r\n            }\r\n\r\n            for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {\r\n                column = columns[i];\r\n\r\n                if ( column.sWidth ) {\r\n                    column.nTh.style.width = _fnStringToCss( column.sWidth );\r\n                }\r\n            }\r\n\r\n            // If there is default sorting required - let's do it. The sort function\r\n            // will do the drawing for us. Otherwise we draw the table regardless of the\r\n            // Ajax source - this allows the table to look initialised for Ajax sourcing\r\n            // data (show 'loading' message possibly)\r\n            _fnReDraw( settings );\r\n\r\n            // Server-side processing init complete is done by _fnAjaxUpdateDraw\r\n            var dataSrc = _fnDataSource( settings );\r\n            if ( dataSrc != 'ssp' ) {\r\n                // if there is an ajax source load the data\r\n                if ( dataSrc == 'ajax' ) {\r\n                    _fnBuildAjax( settings, [], function(json) {\r\n                        var aData = _fnAjaxDataSrc( settings, json );\r\n\r\n                        // Got the data - add it to the table\r\n                        for ( i=0 ; i<aData.length ; i++ ) {\r\n                            _fnAddData( settings, aData[i] );\r\n                        }\r\n\r\n                        // Reset the init display for cookie saving. We've already done\r\n                        // a filter, and therefore cleared it before. So we need to make\r\n                        // it appear 'fresh'\r\n                        settings.iInitDisplayStart = iAjaxStart;\r\n\r\n                        _fnReDraw( settings );\r\n\r\n                        _fnProcessingDisplay( settings, false );\r\n                        _fnInitComplete( settings, json );\r\n                    }, settings );\r\n                }\r\n                else {\r\n                    _fnProcessingDisplay( settings, false );\r\n                    _fnInitComplete( settings );\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Draw the table for the first time, adding all required features\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\r\n         *    with client-side processing (optional)\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnInitComplete ( settings, json )\r\n        {\r\n            settings._bInitComplete = true;\r\n\r\n            // On an Ajax load we now have data and therefore want to apply the column\r\n            // sizing\r\n            if ( json ) {\r\n                _fnAdjustColumnSizing( settings );\r\n            }\r\n\r\n            _fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );\r\n        }\r\n\r\n\r\n        function _fnLengthChange ( settings, val )\r\n        {\r\n            var len = parseInt( val, 10 );\r\n            settings._iDisplayLength = len;\r\n\r\n            _fnLengthOverflow( settings );\r\n\r\n            // Fire length change event\r\n            _fnCallbackFire( settings, null, 'length', [settings, len] );\r\n        }\r\n\r\n\r\n        /**\r\n         * Generate the node required for user display length changing\r\n         *  @param {object} settings dataTables settings object\r\n         *  @returns {node} Display length feature node\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlLength ( settings )\r\n        {\r\n            var\r\n                classes  = settings.oClasses,\r\n                tableId  = settings.sTableId,\r\n                menu     = settings.aLengthMenu,\r\n                d2       = $.isArray( menu[0] ),\r\n                lengths  = d2 ? menu[0] : menu,\r\n                language = d2 ? menu[1] : menu;\r\n\r\n            var select = $('<select/>', {\r\n                'name':          tableId+'_length',\r\n                'aria-controls': tableId,\r\n                'class':         classes.sLengthSelect\r\n            } );\r\n\r\n            for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {\r\n                select[0][ i ] = new Option( language[i], lengths[i] );\r\n            }\r\n\r\n            var div = $('<div><label/></div>').addClass( classes.sLength );\r\n            if ( ! settings.aanFeatures.l ) {\r\n                div[0].id = tableId+'_length';\r\n            }\r\n\r\n            div.children().append(\r\n                settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )\r\n            );\r\n\r\n            // Can't use `select` variable as user might provide their own and the\r\n            // reference is broken by the use of outerHTML\r\n            $('select', div)\r\n                .val( settings._iDisplayLength )\r\n                .bind( 'change.DT', function(e) {\r\n                    _fnLengthChange( settings, $(this).val() );\r\n                    _fnDraw( settings );\r\n                } );\r\n\r\n            // Update node value whenever anything changes the table's length\r\n            $(settings.nTable).bind( 'length.dt.DT', function (e, s, len) {\r\n                if ( settings === s ) {\r\n                    $('select', div).val( len );\r\n                }\r\n            } );\r\n\r\n            return div[0];\r\n        }\r\n\r\n\r\n\r\n        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n         * Note that most of the paging logic is done in\r\n         * DataTable.ext.pager\r\n         */\r\n\r\n        /**\r\n         * Generate the node required for default pagination\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns {node} Pagination feature node\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlPaginate ( settings )\r\n        {\r\n            var\r\n                type   = settings.sPaginationType,\r\n                plugin = DataTable.ext.pager[ type ],\r\n                modern = typeof plugin === 'function',\r\n                redraw = function( settings ) {\r\n                    _fnDraw( settings );\r\n                },\r\n                node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],\r\n                features = settings.aanFeatures;\r\n\r\n            if ( ! modern ) {\r\n                plugin.fnInit( settings, node, redraw );\r\n            }\r\n\r\n            /* Add a draw callback for the pagination on first instance, to update the paging display */\r\n            if ( ! features.p )\r\n            {\r\n                node.id = settings.sTableId+'_paginate';\r\n\r\n                settings.aoDrawCallback.push( {\r\n                    \"fn\": function( settings ) {\r\n                        if ( modern ) {\r\n                            var\r\n                                start      = settings._iDisplayStart,\r\n                                len        = settings._iDisplayLength,\r\n                                visRecords = settings.fnRecordsDisplay(),\r\n                                all        = len === -1,\r\n                                page = all ? 0 : Math.ceil( start / len ),\r\n                                pages = all ? 1 : Math.ceil( visRecords / len ),\r\n                                buttons = plugin(page, pages),\r\n                                i, ien;\r\n\r\n                            for ( i=0, ien=features.p.length ; i<ien ; i++ ) {\r\n                                _fnRenderer( settings, 'pageButton' )(\r\n                                    settings, features.p[i], i, buttons, page, pages\r\n                                );\r\n                            }\r\n                        }\r\n                        else {\r\n                            plugin.fnUpdate( settings, redraw );\r\n                        }\r\n                    },\r\n                    \"sName\": \"pagination\"\r\n                } );\r\n            }\r\n\r\n            return node;\r\n        }\r\n\r\n\r\n        /**\r\n         * Alter the display settings to change the page\r\n         *  @param {object} settings DataTables settings object\r\n         *  @param {string|int} action Paging action to take: \"first\", \"previous\",\r\n         *    \"next\" or \"last\" or page number to jump to (integer)\r\n         *  @param [bool] redraw Automatically draw the update or not\r\n         *  @returns {bool} true page has changed, false - no change\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnPageChange ( settings, action, redraw )\r\n        {\r\n            var\r\n                start     = settings._iDisplayStart,\r\n                len       = settings._iDisplayLength,\r\n                records   = settings.fnRecordsDisplay();\r\n\r\n            if ( records === 0 || len === -1 )\r\n            {\r\n                start = 0;\r\n            }\r\n            else if ( typeof action === \"number\" )\r\n            {\r\n                start = action * len;\r\n\r\n                if ( start > records )\r\n                {\r\n                    start = 0;\r\n                }\r\n            }\r\n            else if ( action == \"first\" )\r\n            {\r\n                start = 0;\r\n            }\r\n            else if ( action == \"previous\" )\r\n            {\r\n                start = len >= 0 ?\r\n                start - len :\r\n                    0;\r\n\r\n                if ( start < 0 )\r\n                {\r\n                    start = 0;\r\n                }\r\n            }\r\n            else if ( action == \"next\" )\r\n            {\r\n                if ( start + len < records )\r\n                {\r\n                    start += len;\r\n                }\r\n            }\r\n            else if ( action == \"last\" )\r\n            {\r\n                start = Math.floor( (records-1) / len) * len;\r\n            }\r\n            else\r\n            {\r\n                _fnLog( settings, 0, \"Unknown paging action: \"+action, 5 );\r\n            }\r\n\r\n            var changed = settings._iDisplayStart !== start;\r\n            settings._iDisplayStart = start;\r\n\r\n            if ( changed ) {\r\n                _fnCallbackFire( settings, null, 'page', [settings] );\r\n\r\n                if ( redraw ) {\r\n                    _fnDraw( settings );\r\n                }\r\n            }\r\n\r\n            return changed;\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Generate the node required for the processing node\r\n         *  @param {object} settings dataTables settings object\r\n         *  @returns {node} Processing element\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlProcessing ( settings )\r\n        {\r\n            return $('<div/>', {\r\n                'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,\r\n                'class': settings.oClasses.sProcessing\r\n            } )\r\n                .html( settings.oLanguage.sProcessing )\r\n                .insertBefore( settings.nTable )[0];\r\n        }\r\n\r\n\r\n        /**\r\n         * Display or hide the processing indicator\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {bool} show Show the processing indicator (true) or not (false)\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnProcessingDisplay ( settings, show )\r\n        {\r\n            if ( settings.oFeatures.bProcessing ) {\r\n                $(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );\r\n            }\r\n\r\n            _fnCallbackFire( settings, null, 'processing', [settings, show] );\r\n        }\r\n\r\n        /**\r\n         * Add any control elements for the table - specifically scrolling\r\n         *  @param {object} settings dataTables settings object\r\n         *  @returns {node} Node to add to the DOM\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlTable ( settings )\r\n        {\r\n            var table = $(settings.nTable);\r\n\r\n            // Add the ARIA grid role to the table\r\n            table.attr( 'role', 'grid' );\r\n\r\n            // Scrolling from here on in\r\n            var scroll = settings.oScroll;\r\n\r\n            if ( scroll.sX === '' && scroll.sY === '' ) {\r\n                return settings.nTable;\r\n            }\r\n\r\n            var scrollX = scroll.sX;\r\n            var scrollY = scroll.sY;\r\n            var classes = settings.oClasses;\r\n            var caption = table.children('caption');\r\n            var captionSide = caption.length ? caption[0]._captionSide : null;\r\n            var headerClone = $( table[0].cloneNode(false) );\r\n            var footerClone = $( table[0].cloneNode(false) );\r\n            var footer = table.children('tfoot');\r\n            var _div = '<div/>';\r\n            var size = function ( s ) {\r\n                return !s ? null : _fnStringToCss( s );\r\n            };\r\n\r\n            // This is fairly messy, but with x scrolling enabled, if the table has a\r\n            // width attribute, regardless of any width applied using the column width\r\n            // options, the browser will shrink or grow the table as needed to fit into\r\n            // that 100%. That would make the width options useless. So we remove it.\r\n            // This is okay, under the assumption that width:100% is applied to the\r\n            // table in CSS (it is in the default stylesheet) which will set the table\r\n            // width as appropriate (the attribute and css behave differently...)\r\n            if ( scroll.sX && table.attr('width') === '100%' ) {\r\n                table.removeAttr('width');\r\n            }\r\n\r\n            if ( ! footer.length ) {\r\n                footer = null;\r\n            }\r\n\r\n            /*\r\n             * The HTML structure that we want to generate in this function is:\r\n             *  div - scroller\r\n             *    div - scroll head\r\n             *      div - scroll head inner\r\n             *        table - scroll head table\r\n             *          thead - thead\r\n             *    div - scroll body\r\n             *      table - table (master table)\r\n             *        thead - thead clone for sizing\r\n             *        tbody - tbody\r\n             *    div - scroll foot\r\n             *      div - scroll foot inner\r\n             *        table - scroll foot table\r\n             *          tfoot - tfoot\r\n             */\r\n            var scroller = $( _div, { 'class': classes.sScrollWrapper } )\r\n                .append(\r\n                $(_div, { 'class': classes.sScrollHead } )\r\n                    .css( {\r\n                        overflow: 'hidden',\r\n                        position: 'relative',\r\n                        border: 0,\r\n                        width: scrollX ? size(scrollX) : '100%'\r\n                    } )\r\n                    .append(\r\n                    $(_div, { 'class': classes.sScrollHeadInner } )\r\n                        .css( {\r\n                            'box-sizing': 'content-box',\r\n                            width: scroll.sXInner || '100%'\r\n                        } )\r\n                        .append(\r\n                        headerClone\r\n                            .removeAttr('id')\r\n                            .css( 'margin-left', 0 )\r\n                            .append(\r\n                            table.children('thead')\r\n                        )\r\n                    )\r\n                )\r\n                    .append( captionSide === 'top' ? caption : null )\r\n            )\r\n                .append(\r\n                $(_div, { 'class': classes.sScrollBody } )\r\n                    .css( {\r\n                        overflow: 'auto',\r\n                        height: size( scrollY ),\r\n                        width: size( scrollX )\r\n                    } )\r\n                    .append( table )\r\n            );\r\n\r\n            if ( footer ) {\r\n                scroller.append(\r\n                    $(_div, { 'class': classes.sScrollFoot } )\r\n                        .css( {\r\n                            overflow: 'hidden',\r\n                            border: 0,\r\n                            width: scrollX ? size(scrollX) : '100%'\r\n                        } )\r\n                        .append(\r\n                        $(_div, { 'class': classes.sScrollFootInner } )\r\n                            .append(\r\n                            footerClone\r\n                                .removeAttr('id')\r\n                                .css( 'margin-left', 0 )\r\n                                .append(\r\n                                table.children('tfoot')\r\n                            )\r\n                        )\r\n                    )\r\n                        .append( captionSide === 'bottom' ? caption : null )\r\n                );\r\n            }\r\n\r\n            var children = scroller.children();\r\n            var scrollHead = children[0];\r\n            var scrollBody = children[1];\r\n            var scrollFoot = footer ? children[2] : null;\r\n\r\n            // When the body is scrolled, then we also want to scroll the headers\r\n            if ( scrollX ) {\r\n                $(scrollBody).scroll( function (e) {\r\n                    var scrollLeft = this.scrollLeft;\r\n\r\n                    scrollHead.scrollLeft = scrollLeft;\r\n\r\n                    if ( footer ) {\r\n                        scrollFoot.scrollLeft = scrollLeft;\r\n                    }\r\n                } );\r\n            }\r\n\r\n            settings.nScrollHead = scrollHead;\r\n            settings.nScrollBody = scrollBody;\r\n            settings.nScrollFoot = scrollFoot;\r\n\r\n            // On redraw - align columns\r\n            settings.aoDrawCallback.push( {\r\n                \"fn\": _fnScrollDraw,\r\n                \"sName\": \"scrolling\"\r\n            } );\r\n\r\n            return scroller[0];\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Update the header, footer and body tables for resizing - i.e. column\r\n         * alignment.\r\n         *\r\n         * Welcome to the most horrible function DataTables. The process that this\r\n         * function follows is basically:\r\n         *   1. Re-create the table inside the scrolling div\r\n         *   2. Take live measurements from the DOM\r\n         *   3. Apply the measurements to align the columns\r\n         *   4. Clean up\r\n         *\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnScrollDraw ( settings )\r\n        {\r\n            // Given that this is such a monster function, a lot of variables are use\r\n            // to try and keep the minimised size as small as possible\r\n            var\r\n                scroll         = settings.oScroll,\r\n                scrollX        = scroll.sX,\r\n                scrollXInner   = scroll.sXInner,\r\n                scrollY        = scroll.sY,\r\n                barWidth       = scroll.iBarWidth,\r\n                divHeader      = $(settings.nScrollHead),\r\n                divHeaderStyle = divHeader[0].style,\r\n                divHeaderInner = divHeader.children('div'),\r\n                divHeaderInnerStyle = divHeaderInner[0].style,\r\n                divHeaderTable = divHeaderInner.children('table'),\r\n                divBodyEl      = settings.nScrollBody,\r\n                divBody        = $(divBodyEl),\r\n                divBodyStyle   = divBodyEl.style,\r\n                divFooter      = $(settings.nScrollFoot),\r\n                divFooterInner = divFooter.children('div'),\r\n                divFooterTable = divFooterInner.children('table'),\r\n                header         = $(settings.nTHead),\r\n                table          = $(settings.nTable),\r\n                tableEl        = table[0],\r\n                tableStyle     = tableEl.style,\r\n                footer         = settings.nTFoot ? $(settings.nTFoot) : null,\r\n                browser        = settings.oBrowser,\r\n                ie67           = browser.bScrollOversize,\r\n                headerTrgEls, footerTrgEls,\r\n                headerSrcEls, footerSrcEls,\r\n                headerCopy, footerCopy,\r\n                headerWidths=[], footerWidths=[],\r\n                headerContent=[],\r\n                idx, correction, sanityWidth,\r\n                zeroOut = function(nSizer) {\r\n                    var style = nSizer.style;\r\n                    style.paddingTop = \"0\";\r\n                    style.paddingBottom = \"0\";\r\n                    style.borderTopWidth = \"0\";\r\n                    style.borderBottomWidth = \"0\";\r\n                    style.height = 0;\r\n                };\r\n\r\n            /*\r\n             * 1. Re-create the table inside the scrolling div\r\n             */\r\n\r\n            // Remove the old minimised thead and tfoot elements in the inner table\r\n            table.children('thead, tfoot').remove();\r\n\r\n            // Clone the current header and footer elements and then place it into the inner table\r\n            headerCopy = header.clone().prependTo( table );\r\n            headerTrgEls = header.find('tr'); // original header is in its own table\r\n            headerSrcEls = headerCopy.find('tr');\r\n            headerCopy.find('th, td').removeAttr('tabindex');\r\n\r\n            if ( footer ) {\r\n                footerCopy = footer.clone().prependTo( table );\r\n                footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\r\n                footerSrcEls = footerCopy.find('tr');\r\n            }\r\n\r\n\r\n            /*\r\n             * 2. Take live measurements from the DOM - do not alter the DOM itself!\r\n             */\r\n\r\n            // Remove old sizing and apply the calculated column widths\r\n            // Get the unique column headers in the newly created (cloned) header. We want to apply the\r\n            // calculated sizes to this header\r\n            if ( ! scrollX )\r\n            {\r\n                divBodyStyle.width = '100%';\r\n                divHeader[0].style.width = '100%';\r\n            }\r\n\r\n            $.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {\r\n                idx = _fnVisibleToColumnIndex( settings, i );\r\n                el.style.width = settings.aoColumns[idx].sWidth;\r\n            } );\r\n\r\n            if ( footer ) {\r\n                _fnApplyToChildren( function(n) {\r\n                    n.style.width = \"\";\r\n                }, footerSrcEls );\r\n            }\r\n\r\n            // If scroll collapse is enabled, when we put the headers back into the body for sizing, we\r\n            // will end up forcing the scrollbar to appear, making our measurements wrong for when we\r\n            // then hide it (end of this function), so add the header height to the body scroller.\r\n            if ( scroll.bCollapse && scrollY !== \"\" ) {\r\n                divBodyStyle.height = (divBody[0].offsetHeight + header[0].offsetHeight)+\"px\";\r\n            }\r\n\r\n            // Size the table as a whole\r\n            sanityWidth = table.outerWidth();\r\n            if ( scrollX === \"\" ) {\r\n                // No x scrolling\r\n                tableStyle.width = \"100%\";\r\n\r\n                // IE7 will make the width of the table when 100% include the scrollbar\r\n                // - which is shouldn't. When there is a scrollbar we need to take this\r\n                // into account.\r\n                if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||\r\n                    divBody.css('overflow-y') == \"scroll\")\r\n                ) {\r\n                    tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // x scrolling\r\n                if ( scrollXInner !== \"\" ) {\r\n                    // x scroll inner has been given - use it\r\n                    tableStyle.width = _fnStringToCss(scrollXInner);\r\n                }\r\n                else if ( sanityWidth == divBody.width() && divBody.height() < table.height() ) {\r\n                    // There is y-scrolling - try to take account of the y scroll bar\r\n                    tableStyle.width = _fnStringToCss( sanityWidth-barWidth );\r\n                    if ( table.outerWidth() > sanityWidth-barWidth ) {\r\n                        // Not possible to take account of it\r\n                        tableStyle.width = _fnStringToCss( sanityWidth );\r\n                    }\r\n                }\r\n                else {\r\n                    // When all else fails\r\n                    tableStyle.width = _fnStringToCss( sanityWidth );\r\n                }\r\n            }\r\n\r\n            // Recalculate the sanity width - now that we've applied the required width,\r\n            // before it was a temporary variable. This is required because the column\r\n            // width calculation is done before this table DOM is created.\r\n            sanityWidth = table.outerWidth();\r\n\r\n            // Hidden header should have zero height, so remove padding and borders. Then\r\n            // set the width based on the real headers\r\n\r\n            // Apply all styles in one pass\r\n            _fnApplyToChildren( zeroOut, headerSrcEls );\r\n\r\n            // Read all widths in next pass\r\n            _fnApplyToChildren( function(nSizer) {\r\n                headerContent.push( nSizer.innerHTML );\r\n                headerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\r\n            }, headerSrcEls );\r\n\r\n            // Apply all widths in final pass\r\n            _fnApplyToChildren( function(nToSize, i) {\r\n                nToSize.style.width = headerWidths[i];\r\n            }, headerTrgEls );\r\n\r\n            $(headerSrcEls).height(0);\r\n\r\n            /* Same again with the footer if we have one */\r\n            if ( footer )\r\n            {\r\n                _fnApplyToChildren( zeroOut, footerSrcEls );\r\n\r\n                _fnApplyToChildren( function(nSizer) {\r\n                    footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\r\n                }, footerSrcEls );\r\n\r\n                _fnApplyToChildren( function(nToSize, i) {\r\n                    nToSize.style.width = footerWidths[i];\r\n                }, footerTrgEls );\r\n\r\n                $(footerSrcEls).height(0);\r\n            }\r\n\r\n\r\n            /*\r\n             * 3. Apply the measurements\r\n             */\r\n\r\n            // \"Hide\" the header and footer that we used for the sizing. We need to keep\r\n            // the content of the cell so that the width applied to the header and body\r\n            // both match, but we want to hide it completely. We want to also fix their\r\n            // width to what they currently are\r\n            _fnApplyToChildren( function(nSizer, i) {\r\n                nSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+headerContent[i]+'</div>';\r\n                nSizer.style.width = headerWidths[i];\r\n            }, headerSrcEls );\r\n\r\n            if ( footer )\r\n            {\r\n                _fnApplyToChildren( function(nSizer, i) {\r\n                    nSizer.innerHTML = \"\";\r\n                    nSizer.style.width = footerWidths[i];\r\n                }, footerSrcEls );\r\n            }\r\n\r\n            // Sanity check that the table is of a sensible width. If not then we are going to get\r\n            // misalignment - try to prevent this by not allowing the table to shrink below its min width\r\n            if ( table.outerWidth() < sanityWidth )\r\n            {\r\n                // The min width depends upon if we have a vertical scrollbar visible or not */\r\n                correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||\r\n                divBody.css('overflow-y') == \"scroll\")) ?\r\n                sanityWidth+barWidth :\r\n                    sanityWidth;\r\n\r\n                // IE6/7 are a law unto themselves...\r\n                if ( ie67 && (divBodyEl.scrollHeight >\r\n                    divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")\r\n                ) {\r\n                    tableStyle.width = _fnStringToCss( correction-barWidth );\r\n                }\r\n\r\n                // And give the user a warning that we've stopped the table getting too small\r\n                if ( scrollX === \"\" || scrollXInner !== \"\" ) {\r\n                    _fnLog( settings, 1, 'Possible column misalignment', 6 );\r\n                }\r\n            }\r\n            else\r\n            {\r\n                correction = '100%';\r\n            }\r\n\r\n            // Apply to the container elements\r\n            divBodyStyle.width = _fnStringToCss( correction );\r\n            divHeaderStyle.width = _fnStringToCss( correction );\r\n\r\n            if ( footer ) {\r\n                settings.nScrollFoot.style.width = _fnStringToCss( correction );\r\n            }\r\n\r\n\r\n            /*\r\n             * 4. Clean up\r\n             */\r\n            if ( ! scrollY ) {\r\n                /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\r\n                 * the scrollbar height from the visible display, rather than adding it on. We need to\r\n                 * set the height in order to sort this. Don't want to do it in any other browsers.\r\n                 */\r\n                if ( ie67 ) {\r\n                    divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );\r\n                }\r\n            }\r\n\r\n            if ( scrollY && scroll.bCollapse ) {\r\n                divBodyStyle.height = _fnStringToCss( scrollY );\r\n\r\n                var iExtra = (scrollX && tableEl.offsetWidth > divBodyEl.offsetWidth) ?\r\n                    barWidth :\r\n                    0;\r\n\r\n                if ( tableEl.offsetHeight < divBodyEl.offsetHeight ) {\r\n                    divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+iExtra );\r\n                }\r\n            }\r\n\r\n            /* Finally set the width's of the header and footer tables */\r\n            var iOuterWidth = table.outerWidth();\r\n            divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );\r\n            divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );\r\n\r\n            // Figure out if there are scrollbar present - if so then we need a the header and footer to\r\n            // provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\r\n            var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\r\n            var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );\r\n            divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+\"px\" : \"0px\";\r\n\r\n            if ( footer ) {\r\n                divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );\r\n                divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );\r\n                divFooterInner[0].style[padding] = bScrolling ? barWidth+\"px\" : \"0px\";\r\n            }\r\n\r\n            /* Adjust the position of the header in case we loose the y-scrollbar */\r\n            divBody.scroll();\r\n\r\n            // If sorting or filtering has occurred, jump the scrolling back to the top\r\n            // only if we aren't holding the position\r\n            if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {\r\n                divBodyEl.scrollTop = 0;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Apply a given function to the display child nodes of an element array (typically\r\n         * TD children of TR rows\r\n         *  @param {function} fn Method to apply to the objects\r\n         *  @param array {nodes} an1 List of elements to look through for display children\r\n         *  @param array {nodes} an2 Another list (identical structure to the first) - optional\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnApplyToChildren( fn, an1, an2 )\r\n        {\r\n            var index=0, i=0, iLen=an1.length;\r\n            var nNode1, nNode2;\r\n\r\n            while ( i < iLen ) {\r\n                nNode1 = an1[i].firstChild;\r\n                nNode2 = an2 ? an2[i].firstChild : null;\r\n\r\n                while ( nNode1 ) {\r\n                    if ( nNode1.nodeType === 1 ) {\r\n                        if ( an2 ) {\r\n                            fn( nNode1, nNode2, index );\r\n                        }\r\n                        else {\r\n                            fn( nNode1, index );\r\n                        }\r\n\r\n                        index++;\r\n                    }\r\n\r\n                    nNode1 = nNode1.nextSibling;\r\n                    nNode2 = an2 ? nNode2.nextSibling : null;\r\n                }\r\n\r\n                i++;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        var __re_html_remove = /<.*?>/g;\r\n\r\n\r\n        /**\r\n         * Calculate the width of columns for the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnCalculateColumnWidths ( oSettings )\r\n        {\r\n            var\r\n                table = oSettings.nTable,\r\n                columns = oSettings.aoColumns,\r\n                scroll = oSettings.oScroll,\r\n                scrollY = scroll.sY,\r\n                scrollX = scroll.sX,\r\n                scrollXInner = scroll.sXInner,\r\n                columnCount = columns.length,\r\n                visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),\r\n                headerCells = $('th', oSettings.nTHead),\r\n                tableWidthAttr = table.getAttribute('width'),\r\n                tableContainer = table.parentNode,\r\n                userInputs = false,\r\n                i, column, columnIdx, width, outerWidth;\r\n\r\n            /* Convert any user input sizes into pixel sizes */\r\n            for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                column = columns[ visibleColumns[i] ];\r\n\r\n                if ( column.sWidth !== null ) {\r\n                    column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );\r\n\r\n                    userInputs = true;\r\n                }\r\n            }\r\n\r\n            /* If the number of columns in the DOM equals the number that we have to\r\n             * process in DataTables, then we can use the offsets that are created by\r\n             * the web- browser. No custom sizes can be set in order for this to happen,\r\n             * nor scrolling used\r\n             */\r\n            if ( ! userInputs && ! scrollX && ! scrollY &&\r\n                columnCount == _fnVisbleColumns( oSettings ) &&\r\n                columnCount == headerCells.length\r\n            ) {\r\n                for ( i=0 ; i<columnCount ; i++ ) {\r\n                    columns[i].sWidth = _fnStringToCss( headerCells.eq(i).width() );\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // Otherwise construct a single row table with the widest node in the\r\n                // data, assign any user defined widths, then insert it into the DOM and\r\n                // allow the browser to do all the hard work of calculating table widths\r\n                var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table\r\n                    .empty()\r\n                    .css( 'visibility', 'hidden' )\r\n                    .removeAttr( 'id' )\r\n                    .append( $(oSettings.nTHead).clone( false ) )\r\n                    .append( $(oSettings.nTFoot).clone( false ) )\r\n                    .append( $('<tbody><tr/></tbody>') );\r\n\r\n                // Remove any assigned widths from the footer (from scrolling)\r\n                tmpTable.find('tfoot th, tfoot td').css('width', '');\r\n\r\n                var tr = tmpTable.find( 'tbody tr' );\r\n\r\n                // Apply custom sizing to the cloned header\r\n                headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );\r\n\r\n                for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                    column = columns[ visibleColumns[i] ];\r\n\r\n                    headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?\r\n                        _fnStringToCss( column.sWidthOrig ) :\r\n                        '';\r\n                }\r\n\r\n                // Find the widest cell for each column and put it into the table\r\n                if ( oSettings.aoData.length ) {\r\n                    for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                        columnIdx = visibleColumns[i];\r\n                        column = columns[ columnIdx ];\r\n\r\n                        $( _fnGetWidestNode( oSettings, columnIdx ) )\r\n                            .clone( false )\r\n                            .append( column.sContentPadding )\r\n                            .appendTo( tr );\r\n                    }\r\n                }\r\n\r\n                // Table has been built, attach to the document so we can work with it\r\n                tmpTable.appendTo( tableContainer );\r\n\r\n                // When scrolling (X or Y) we want to set the width of the table as \r\n                // appropriate. However, when not scrolling leave the table width as it\r\n                // is. This results in slightly different, but I think correct behaviour\r\n                if ( scrollX && scrollXInner ) {\r\n                    tmpTable.width( scrollXInner );\r\n                }\r\n                else if ( scrollX ) {\r\n                    tmpTable.css( 'width', 'auto' );\r\n\r\n                    if ( tmpTable.width() < tableContainer.offsetWidth ) {\r\n                        tmpTable.width( tableContainer.offsetWidth );\r\n                    }\r\n                }\r\n                else if ( scrollY ) {\r\n                    tmpTable.width( tableContainer.offsetWidth );\r\n                }\r\n                else if ( tableWidthAttr ) {\r\n                    tmpTable.width( tableWidthAttr );\r\n                }\r\n\r\n                // Take into account the y scrollbar\r\n                _fnScrollingWidthAdjust( oSettings, tmpTable[0] );\r\n\r\n                // Browsers need a bit of a hand when a width is assigned to any columns\r\n                // when x-scrolling as they tend to collapse the table to the min-width,\r\n                // even if we sent the column widths. So we need to keep track of what\r\n                // the table width should be by summing the user given values, and the\r\n                // automatic values\r\n                if ( scrollX )\r\n                {\r\n                    var total = 0;\r\n\r\n                    for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                        column = columns[ visibleColumns[i] ];\r\n                        outerWidth = $(headerCells[i]).outerWidth();\r\n\r\n                        total += column.sWidthOrig === null ?\r\n                            outerWidth :\r\n                        parseInt( column.sWidth, 10 ) + outerWidth - $(headerCells[i]).width();\r\n                    }\r\n\r\n                    tmpTable.width( _fnStringToCss( total ) );\r\n                    table.style.width = _fnStringToCss( total );\r\n                }\r\n\r\n                // Get the width of each column in the constructed table\r\n                for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                    column = columns[ visibleColumns[i] ];\r\n                    width = $(headerCells[i]).width();\r\n\r\n                    if ( width ) {\r\n                        column.sWidth = _fnStringToCss( width );\r\n                    }\r\n                }\r\n\r\n                table.style.width = _fnStringToCss( tmpTable.css('width') );\r\n\r\n                // Finished with the table - ditch it\r\n                tmpTable.remove();\r\n            }\r\n\r\n            // If there is a width attr, we want to attach an event listener which\r\n            // allows the table sizing to automatically adjust when the window is\r\n            // resized. Use the width attr rather than CSS, since we can't know if the\r\n            // CSS is a relative value or absolute - DOM read is always px.\r\n            if ( tableWidthAttr ) {\r\n                table.style.width = _fnStringToCss( tableWidthAttr );\r\n            }\r\n\r\n            if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {\r\n                $(window).bind('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {\r\n                    _fnAdjustColumnSizing( oSettings );\r\n                } ) );\r\n\r\n                oSettings._reszEvt = true;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Throttle the calls to a function. Arguments and context are maintained for\r\n         * the throttled function\r\n         *  @param {function} fn Function to be called\r\n         *  @param {int} [freq=200] call frequency in mS\r\n         *  @returns {function} wrapped function\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnThrottle( fn, freq ) {\r\n            var\r\n                frequency = freq || 200,\r\n                last,\r\n                timer;\r\n\r\n            return function () {\r\n                var\r\n                    that = this,\r\n                    now  = +new Date(),\r\n                    args = arguments;\r\n\r\n                if ( last && now < last + frequency ) {\r\n                    clearTimeout( timer );\r\n\r\n                    timer = setTimeout( function () {\r\n                        last = undefined;\r\n                        fn.apply( that, args );\r\n                    }, frequency );\r\n                }\r\n                else if ( last ) {\r\n                    last = now;\r\n                    fn.apply( that, args );\r\n                }\r\n                else {\r\n                    last = now;\r\n                }\r\n            };\r\n        }\r\n\r\n\r\n        /**\r\n         * Convert a CSS unit width to pixels (e.g. 2em)\r\n         *  @param {string} width width to be converted\r\n         *  @param {node} parent parent to get the with for (required for relative widths) - optional\r\n         *  @returns {int} width in pixels\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnConvertToWidth ( width, parent )\r\n        {\r\n            if ( ! width ) {\r\n                return 0;\r\n            }\r\n\r\n            var n = $('<div/>')\r\n                .css( 'width', _fnStringToCss( width ) )\r\n                .appendTo( parent || document.body );\r\n\r\n            var val = n[0].offsetWidth;\r\n            n.remove();\r\n\r\n            return val;\r\n        }\r\n\r\n\r\n        /**\r\n         * Adjust a table's width to take account of vertical scroll bar\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {node} n table node\r\n         *  @memberof DataTable#oApi\r\n         */\r\n\r\n        function _fnScrollingWidthAdjust ( settings, n )\r\n        {\r\n            var scroll = settings.oScroll;\r\n\r\n            if ( scroll.sX || scroll.sY ) {\r\n                // When y-scrolling only, we want to remove the width of the scroll bar\r\n                // so the table + scroll bar will fit into the area available, otherwise\r\n                // we fix the table at its current size with no adjustment\r\n                var correction = ! scroll.sX ? scroll.iBarWidth : 0;\r\n                n.style.width = _fnStringToCss( $(n).outerWidth() - correction );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the widest node\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {int} colIdx column of interest\r\n         *  @returns {node} widest table node\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetWidestNode( settings, colIdx )\r\n        {\r\n            var idx = _fnGetMaxLenString( settings, colIdx );\r\n            if ( idx < 0 ) {\r\n                return null;\r\n            }\r\n\r\n            var data = settings.aoData[ idx ];\r\n            return ! data.nTr ? // Might not have been created when deferred rendering\r\n                $('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :\r\n                data.anCells[ colIdx ];\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the maximum strlen for each data column\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {int} colIdx column of interest\r\n         *  @returns {string} max string length for each column\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetMaxLenString( settings, colIdx )\r\n        {\r\n            var s, max=-1, maxIdx = -1;\r\n\r\n            for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n                s = _fnGetCellData( settings, i, colIdx, 'display' )+'';\r\n                s = s.replace( __re_html_remove, '' );\r\n\r\n                if ( s.length > max ) {\r\n                    max = s.length;\r\n                    maxIdx = i;\r\n                }\r\n            }\r\n\r\n            return maxIdx;\r\n        }\r\n\r\n\r\n        /**\r\n         * Append a CSS unit (only if required) to a string\r\n         *  @param {string} value to css-ify\r\n         *  @returns {string} value with css unit\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnStringToCss( s )\r\n        {\r\n            if ( s === null ) {\r\n                return '0px';\r\n            }\r\n\r\n            if ( typeof s == 'number' ) {\r\n                return s < 0 ?\r\n                    '0px' :\r\n                s+'px';\r\n            }\r\n\r\n            // Check it has a unit character already\r\n            return s.match(/\\d$/) ?\r\n            s+'px' :\r\n                s;\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the width of a scroll bar in this browser being used\r\n         *  @returns {int} width in pixels\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnScrollBarWidth ()\r\n        {\r\n            // On first run a static variable is set, since this is only needed once.\r\n            // Subsequent runs will just use the previously calculated value\r\n            if ( ! DataTable.__scrollbarWidth ) {\r\n                var inner = $('<p/>').css( {\r\n                    width: '100%',\r\n                    height: 200,\r\n                    padding: 0\r\n                } )[0];\r\n\r\n                var outer = $('<div/>')\r\n                    .css( {\r\n                        position: 'absolute',\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: 200,\r\n                        height: 150,\r\n                        padding: 0,\r\n                        overflow: 'hidden',\r\n                        visibility: 'hidden'\r\n                    } )\r\n                    .append( inner )\r\n                    .appendTo( 'body' );\r\n\r\n                var w1 = inner.offsetWidth;\r\n                outer.css( 'overflow', 'scroll' );\r\n                var w2 = inner.offsetWidth;\r\n\r\n                if ( w1 === w2 ) {\r\n                    w2 = outer[0].clientWidth;\r\n                }\r\n\r\n                outer.remove();\r\n\r\n                DataTable.__scrollbarWidth = w1 - w2;\r\n            }\r\n\r\n            return DataTable.__scrollbarWidth;\r\n        }\r\n\r\n\r\n\r\n        function _fnSortFlatten ( settings )\r\n        {\r\n            var\r\n                i, iLen, k, kLen,\r\n                aSort = [],\r\n                aiOrig = [],\r\n                aoColumns = settings.aoColumns,\r\n                aDataSort, iCol, sType, srcCol,\r\n                fixed = settings.aaSortingFixed,\r\n                fixedObj = $.isPlainObject( fixed ),\r\n                nestedSort = [],\r\n                add = function ( a ) {\r\n                    if ( a.length && ! $.isArray( a[0] ) ) {\r\n                        // 1D array\r\n                        nestedSort.push( a );\r\n                    }\r\n                    else {\r\n                        // 2D array\r\n                        nestedSort.push.apply( nestedSort, a );\r\n                    }\r\n                };\r\n\r\n            // Build the sort array, with pre-fix and post-fix options if they have been\r\n            // specified\r\n            if ( $.isArray( fixed ) ) {\r\n                add( fixed );\r\n            }\r\n\r\n            if ( fixedObj && fixed.pre ) {\r\n                add( fixed.pre );\r\n            }\r\n\r\n            add( settings.aaSorting );\r\n\r\n            if (fixedObj && fixed.post ) {\r\n                add( fixed.post );\r\n            }\r\n\r\n            for ( i=0 ; i<nestedSort.length ; i++ )\r\n            {\r\n                srcCol = nestedSort[i][0];\r\n                aDataSort = aoColumns[ srcCol ].aDataSort;\r\n\r\n                for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )\r\n                {\r\n                    iCol = aDataSort[k];\r\n                    sType = aoColumns[ iCol ].sType || 'string';\r\n\r\n                    aSort.push( {\r\n                        src:       srcCol,\r\n                        col:       iCol,\r\n                        dir:       nestedSort[i][1],\r\n                        index:     nestedSort[i][2],\r\n                        type:      sType,\r\n                        formatter: DataTable.ext.type.order[ sType+\"-pre\" ]\r\n                    } );\r\n                }\r\n            }\r\n\r\n            return aSort;\r\n        }\r\n\r\n        /**\r\n         * Change the order of the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         *  @todo This really needs split up!\r\n         */\r\n        function _fnSort ( oSettings )\r\n        {\r\n            var\r\n                i, ien, iLen, j, jLen, k, kLen,\r\n                sDataType, nTh,\r\n                aiOrig = [],\r\n                oExtSort = DataTable.ext.type.order,\r\n                aoData = oSettings.aoData,\r\n                aoColumns = oSettings.aoColumns,\r\n                aDataSort, data, iCol, sType, oSort,\r\n                formatters = 0,\r\n                sortCol,\r\n                displayMaster = oSettings.aiDisplayMaster,\r\n                aSort;\r\n\r\n            // Resolve any column types that are unknown due to addition or invalidation\r\n            // @todo Can this be moved into a 'data-ready' handler which is called when\r\n            //   data is going to be used in the table?\r\n            _fnColumnTypes( oSettings );\r\n\r\n            aSort = _fnSortFlatten( oSettings );\r\n\r\n            for ( i=0, ien=aSort.length ; i<ien ; i++ ) {\r\n                sortCol = aSort[i];\r\n\r\n                // Track if we can use the fast sort algorithm\r\n                if ( sortCol.formatter ) {\r\n                    formatters++;\r\n                }\r\n\r\n                // Load the data needed for the sort, for each cell\r\n                _fnSortData( oSettings, sortCol.col );\r\n            }\r\n\r\n            /* No sorting required if server-side or no sorting array */\r\n            if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )\r\n            {\r\n                // Create a value - key array of the current row positions such that we can use their\r\n                // current position during the sort, if values match, in order to perform stable sorting\r\n                for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {\r\n                    aiOrig[ displayMaster[i] ] = i;\r\n                }\r\n\r\n                /* Do the sort - here we want multi-column sorting based on a given data source (column)\r\n                 * and sorting function (from oSort) in a certain direction. It's reasonably complex to\r\n                 * follow on it's own, but this is what we want (example two column sorting):\r\n                 *  fnLocalSorting = function(a,b){\r\n                 *    var iTest;\r\n                 *    iTest = oSort['string-asc']('data11', 'data12');\r\n                 *      if (iTest !== 0)\r\n                 *        return iTest;\r\n                 *    iTest = oSort['numeric-desc']('data21', 'data22');\r\n                 *    if (iTest !== 0)\r\n                 *      return iTest;\r\n                 *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\r\n                 *  }\r\n                 * Basically we have a test for each sorting column, if the data in that column is equal,\r\n                 * test the next column. If all columns match, then we use a numeric sort on the row\r\n                 * positions in the original data array to provide a stable sort.\r\n                 *\r\n                 * Note - I know it seems excessive to have two sorting methods, but the first is around\r\n                 * 15% faster, so the second is only maintained for backwards compatibility with sorting\r\n                 * methods which do not have a pre-sort formatting function.\r\n                 */\r\n                if ( formatters === aSort.length ) {\r\n                    // All sort types have formatting functions\r\n                    displayMaster.sort( function ( a, b ) {\r\n                        var\r\n                            x, y, k, test, sort,\r\n                            len=aSort.length,\r\n                            dataA = aoData[a]._aSortData,\r\n                            dataB = aoData[b]._aSortData;\r\n\r\n                        for ( k=0 ; k<len ; k++ ) {\r\n                            sort = aSort[k];\r\n\r\n                            x = dataA[ sort.col ];\r\n                            y = dataB[ sort.col ];\r\n\r\n                            test = x<y ? -1 : x>y ? 1 : 0;\r\n                            if ( test !== 0 ) {\r\n                                return sort.dir === 'asc' ? test : -test;\r\n                            }\r\n                        }\r\n\r\n                        x = aiOrig[a];\r\n                        y = aiOrig[b];\r\n                        return x<y ? -1 : x>y ? 1 : 0;\r\n                    } );\r\n                }\r\n                else {\r\n                    // Depreciated - remove in 1.11 (providing a plug-in option)\r\n                    // Not all sort types have formatting methods, so we have to call their sorting\r\n                    // methods.\r\n                    displayMaster.sort( function ( a, b ) {\r\n                        var\r\n                            x, y, k, l, test, sort, fn,\r\n                            len=aSort.length,\r\n                            dataA = aoData[a]._aSortData,\r\n                            dataB = aoData[b]._aSortData;\r\n\r\n                        for ( k=0 ; k<len ; k++ ) {\r\n                            sort = aSort[k];\r\n\r\n                            x = dataA[ sort.col ];\r\n                            y = dataB[ sort.col ];\r\n\r\n                            fn = oExtSort[ sort.type+\"-\"+sort.dir ] || oExtSort[ \"string-\"+sort.dir ];\r\n                            test = fn( x, y );\r\n                            if ( test !== 0 ) {\r\n                                return test;\r\n                            }\r\n                        }\r\n\r\n                        x = aiOrig[a];\r\n                        y = aiOrig[b];\r\n                        return x<y ? -1 : x>y ? 1 : 0;\r\n                    } );\r\n                }\r\n            }\r\n\r\n            /* Tell the draw function that we have sorted the data */\r\n            oSettings.bSorted = true;\r\n        }\r\n\r\n\r\n        function _fnSortAria ( settings )\r\n        {\r\n            var label;\r\n            var nextSort;\r\n            var columns = settings.aoColumns;\r\n            var aSort = _fnSortFlatten( settings );\r\n            var oAria = settings.oLanguage.oAria;\r\n\r\n            // ARIA attributes - need to loop all columns, to update all (removing old\r\n            // attributes as needed)\r\n            for ( var i=0, iLen=columns.length ; i<iLen ; i++ )\r\n            {\r\n                var col = columns[i];\r\n                var asSorting = col.asSorting;\r\n                var sTitle = col.sTitle.replace( /<.*?>/g, \"\" );\r\n                var th = col.nTh;\r\n\r\n                // IE7 is throwing an error when setting these properties with jQuery's\r\n                // attr() and removeAttr() methods...\r\n                th.removeAttribute('aria-sort');\r\n\r\n                /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\r\n                if ( col.bSortable ) {\r\n                    if ( aSort.length > 0 && aSort[0].col == i ) {\r\n                        th.setAttribute('aria-sort', aSort[0].dir==\"asc\" ? \"ascending\" : \"descending\" );\r\n                        nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];\r\n                    }\r\n                    else {\r\n                        nextSort = asSorting[0];\r\n                    }\r\n\r\n                    label = sTitle + ( nextSort === \"asc\" ?\r\n                        oAria.sSortAscending :\r\n                        oAria.sSortDescending\r\n                    );\r\n                }\r\n                else {\r\n                    label = sTitle;\r\n                }\r\n\r\n                th.setAttribute('aria-label', label);\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Function to run on user sort request\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {node} attachTo node to attach the handler to\r\n         *  @param {int} colIdx column sorting index\r\n         *  @param {boolean} [append=false] Append the requested sort to the existing\r\n         *    sort if true (i.e. multi-column sort)\r\n         *  @param {function} [callback] callback function\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSortListener ( settings, colIdx, append, callback )\r\n        {\r\n            var col = settings.aoColumns[ colIdx ];\r\n            var sorting = settings.aaSorting;\r\n            var asSorting = col.asSorting;\r\n            var nextSortIdx;\r\n            var next = function ( a ) {\r\n                var idx = a._idx;\r\n                if ( idx === undefined ) {\r\n                    idx = $.inArray( a[1], asSorting );\r\n                }\r\n\r\n                return idx+1 >= asSorting.length ? 0 : idx+1;\r\n            };\r\n\r\n            // Convert to 2D array if needed\r\n            if ( typeof sorting[0] === 'number' ) {\r\n                sorting = settings.aaSorting = [ sorting ];\r\n            }\r\n\r\n            // If appending the sort then we are multi-column sorting\r\n            if ( append && settings.oFeatures.bSortMulti ) {\r\n                // Are we already doing some kind of sort on this column?\r\n                var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );\r\n\r\n                if ( sortIdx !== -1 ) {\r\n                    // Yes, modify the sort\r\n                    nextSortIdx = next( sorting[sortIdx] );\r\n\r\n                    sorting[sortIdx][1] = asSorting[ nextSortIdx ];\r\n                    sorting[sortIdx]._idx = nextSortIdx;\r\n                }\r\n                else {\r\n                    // No sort on this column yet\r\n                    sorting.push( [ colIdx, asSorting[0], 0 ] );\r\n                    sorting[sorting.length-1]._idx = 0;\r\n                }\r\n            }\r\n            else if ( sorting.length && sorting[0][0] == colIdx ) {\r\n                // Single column - already sorting on this column, modify the sort\r\n                nextSortIdx = next( sorting[0] );\r\n\r\n                sorting.length = 1;\r\n                sorting[0][1] = asSorting[ nextSortIdx ];\r\n                sorting[0]._idx = nextSortIdx;\r\n            }\r\n            else {\r\n                // Single column - sort only on this column\r\n                sorting.length = 0;\r\n                sorting.push( [ colIdx, asSorting[0] ] );\r\n                sorting[0]._idx = 0;\r\n            }\r\n\r\n            // Run the sort by calling a full redraw\r\n            _fnReDraw( settings );\r\n\r\n            // callback used for async user interaction\r\n            if ( typeof callback == 'function' ) {\r\n                callback( settings );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Attach a sort handler (click) to a node\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {node} attachTo node to attach the handler to\r\n         *  @param {int} colIdx column sorting index\r\n         *  @param {function} [callback] callback function\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSortAttachListener ( settings, attachTo, colIdx, callback )\r\n        {\r\n            var col = settings.aoColumns[ colIdx ];\r\n\r\n            _fnBindAction( attachTo, {}, function (e) {\r\n                /* If the column is not sortable - don't to anything */\r\n                if ( col.bSortable === false ) {\r\n                    return;\r\n                }\r\n\r\n                // If processing is enabled use a timeout to allow the processing\r\n                // display to be shown - otherwise to it synchronously\r\n                if ( settings.oFeatures.bProcessing ) {\r\n                    _fnProcessingDisplay( settings, true );\r\n\r\n                    setTimeout( function() {\r\n                        _fnSortListener( settings, colIdx, e.shiftKey, callback );\r\n\r\n                        // In server-side processing, the draw callback will remove the\r\n                        // processing display\r\n                        if ( _fnDataSource( settings ) !== 'ssp' ) {\r\n                            _fnProcessingDisplay( settings, false );\r\n                        }\r\n                    }, 0 );\r\n                }\r\n                else {\r\n                    _fnSortListener( settings, colIdx, e.shiftKey, callback );\r\n                }\r\n            } );\r\n        }\r\n\r\n\r\n        /**\r\n         * Set the sorting classes on table's body, Note: it is safe to call this function\r\n         * when bSort and bSortClasses are false\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSortingClasses( settings )\r\n        {\r\n            var oldSort = settings.aLastSort;\r\n            var sortClass = settings.oClasses.sSortColumn;\r\n            var sort = _fnSortFlatten( settings );\r\n            var features = settings.oFeatures;\r\n            var i, ien, colIdx;\r\n\r\n            if ( features.bSort && features.bSortClasses ) {\r\n                // Remove old sorting classes\r\n                for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {\r\n                    colIdx = oldSort[i].src;\r\n\r\n                    // Remove column sorting\r\n                    $( _pluck( settings.aoData, 'anCells', colIdx ) )\r\n                        .removeClass( sortClass + (i<2 ? i+1 : 3) );\r\n                }\r\n\r\n                // Add new column sorting\r\n                for ( i=0, ien=sort.length ; i<ien ; i++ ) {\r\n                    colIdx = sort[i].src;\r\n\r\n                    $( _pluck( settings.aoData, 'anCells', colIdx ) )\r\n                        .addClass( sortClass + (i<2 ? i+1 : 3) );\r\n                }\r\n            }\r\n\r\n            settings.aLastSort = sort;\r\n        }\r\n\r\n\r\n        // Get the data to sort a column, be it from cache, fresh (populating the\r\n        // cache), or from a sort formatter\r\n        function _fnSortData( settings, idx )\r\n        {\r\n            // Custom sorting function - provided by the sort data type\r\n            var column = settings.aoColumns[ idx ];\r\n            var customSort = DataTable.ext.order[ column.sSortDataType ];\r\n            var customData;\r\n\r\n            if ( customSort ) {\r\n                customData = customSort.call( settings.oInstance, settings, idx,\r\n                    _fnColumnIndexToVisible( settings, idx )\r\n                );\r\n            }\r\n\r\n            // Use / populate cache\r\n            var row, cellData;\r\n            var formatter = DataTable.ext.type.order[ column.sType+\"-pre\" ];\r\n\r\n            for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n                row = settings.aoData[i];\r\n\r\n                if ( ! row._aSortData ) {\r\n                    row._aSortData = [];\r\n                }\r\n\r\n                if ( ! row._aSortData[idx] || customSort ) {\r\n                    cellData = customSort ?\r\n                        customData[i] : // If there was a custom sort function, use data from there\r\n                        _fnGetCellData( settings, i, idx, 'sort' );\r\n\r\n                    row._aSortData[ idx ] = formatter ?\r\n                        formatter( cellData ) :\r\n                        cellData;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Save the state of a table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSaveState ( settings )\r\n        {\r\n            if ( !settings.oFeatures.bStateSave || settings.bDestroying )\r\n            {\r\n                return;\r\n            }\r\n\r\n            /* Store the interesting variables */\r\n            var state = {\r\n                time:    +new Date(),\r\n                start:   settings._iDisplayStart,\r\n                length:  settings._iDisplayLength,\r\n                order:   $.extend( true, [], settings.aaSorting ),\r\n                search:  _fnSearchToCamel( settings.oPreviousSearch ),\r\n                columns: $.map( settings.aoColumns, function ( col, i ) {\r\n                    return {\r\n                        visible: col.bVisible,\r\n                        search: _fnSearchToCamel( settings.aoPreSearchCols[i] )\r\n                    };\r\n                } )\r\n            };\r\n\r\n            _fnCallbackFire( settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state] );\r\n\r\n            settings.oSavedState = state;\r\n            settings.fnStateSaveCallback.call( settings.oInstance, settings, state );\r\n        }\r\n\r\n\r\n        /**\r\n         * Attempt to load a saved table state\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {object} oInit DataTables init object so we can override settings\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnLoadState ( settings, oInit )\r\n        {\r\n            var i, ien;\r\n            var columns = settings.aoColumns;\r\n\r\n            if ( ! settings.oFeatures.bStateSave ) {\r\n                return;\r\n            }\r\n\r\n            var state = settings.fnStateLoadCallback.call( settings.oInstance, settings );\r\n            if ( ! state || ! state.time ) {\r\n                return;\r\n            }\r\n\r\n            /* Allow custom and plug-in manipulation functions to alter the saved data set and\r\n             * cancelling of loading by returning false\r\n             */\r\n            var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, state] );\r\n            if ( $.inArray( false, abStateLoad ) !== -1 ) {\r\n                return;\r\n            }\r\n\r\n            /* Reject old data */\r\n            var duration = settings.iStateDuration;\r\n            if ( duration > 0 && state.time < +new Date() - (duration*1000) ) {\r\n                return;\r\n            }\r\n\r\n            // Number of columns have changed - all bets are off, no restore of settings\r\n            if ( columns.length !== state.columns.length ) {\r\n                return;\r\n            }\r\n\r\n            // Store the saved state so it might be accessed at any time\r\n            settings.oLoadedState = $.extend( true, {}, state );\r\n\r\n            // Restore key features - todo - for 1.11 this needs to be done by\r\n            // subscribed events\r\n            settings._iDisplayStart    = state.start;\r\n            settings.iInitDisplayStart = state.start;\r\n            settings._iDisplayLength   = state.length;\r\n            settings.aaSorting = [];\r\n\r\n            // Order\r\n            $.each( state.order, function ( i, col ) {\r\n                settings.aaSorting.push( col[0] >= columns.length ?\r\n                        [ 0, col[1] ] :\r\n                        col\r\n                );\r\n            } );\r\n\r\n            // Search\r\n            $.extend( settings.oPreviousSearch, _fnSearchToHung( state.search ) );\r\n\r\n            // Columns\r\n            for ( i=0, ien=state.columns.length ; i<ien ; i++ ) {\r\n                var col = state.columns[i];\r\n\r\n                // Visibility\r\n                columns[i].bVisible = col.visible;\r\n\r\n                // Search\r\n                $.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );\r\n            }\r\n\r\n            _fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, state] );\r\n        }\r\n\r\n\r\n        /**\r\n         * Return the settings object for a particular table\r\n         *  @param {node} table table we are using as a dataTable\r\n         *  @returns {object} Settings object - or null if not found\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSettingsFromNode ( table )\r\n        {\r\n            var settings = DataTable.settings;\r\n            var idx = $.inArray( table, _pluck( settings, 'nTable' ) );\r\n\r\n            return idx !== -1 ?\r\n                settings[ idx ] :\r\n                null;\r\n        }\r\n\r\n\r\n        /**\r\n         * Log an error message\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {int} level log error messages, or display them to the user\r\n         *  @param {string} msg error message\r\n         *  @param {int} tn Technical note id to get more information about the error.\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnLog( settings, level, msg, tn )\r\n        {\r\n            msg = 'DataTables warning: '+\r\n            (settings!==null ? 'table id='+settings.sTableId+' - ' : '')+msg;\r\n\r\n            if ( tn ) {\r\n                msg += '. For more information about this error, please see '+\r\n                'http://datatables.net/tn/'+tn;\r\n            }\r\n\r\n            if ( ! level  ) {\r\n                // Backwards compatibility pre 1.10\r\n                var ext = DataTable.ext;\r\n                var type = ext.sErrMode || ext.errMode;\r\n\r\n                if ( type == 'alert' ) {\r\n                    alert( msg );\r\n                }\r\n                else {\r\n                    throw new Error(msg);\r\n                }\r\n            }\r\n            else if ( window.console && console.log ) {\r\n                console.log( msg );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * See if a property is defined on one object, if so assign it to the other object\r\n         *  @param {object} ret target object\r\n         *  @param {object} src source object\r\n         *  @param {string} name property\r\n         *  @param {string} [mappedName] name to map too - optional, name used if not given\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnMap( ret, src, name, mappedName )\r\n        {\r\n            if ( $.isArray( name ) ) {\r\n                $.each( name, function (i, val) {\r\n                    if ( $.isArray( val ) ) {\r\n                        _fnMap( ret, src, val[0], val[1] );\r\n                    }\r\n                    else {\r\n                        _fnMap( ret, src, val );\r\n                    }\r\n                } );\r\n\r\n                return;\r\n            }\r\n\r\n            if ( mappedName === undefined ) {\r\n                mappedName = name;\r\n            }\r\n\r\n            if ( src[name] !== undefined ) {\r\n                ret[mappedName] = src[name];\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Extend objects - very similar to jQuery.extend, but deep copy objects, and\r\n         * shallow copy arrays. The reason we need to do this, is that we don't want to\r\n         * deep copy array init values (such as aaSorting) since the dev wouldn't be\r\n         * able to override them, but we do want to deep copy arrays.\r\n         *  @param {object} out Object to extend\r\n         *  @param {object} extender Object from which the properties will be applied to\r\n         *      out\r\n         *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\r\n         *      independent copy with the exception of the `data` or `aaData` parameters\r\n         *      if they are present. This is so you can pass in a collection to\r\n         *      DataTables and have that used as your data source without breaking the\r\n         *      references\r\n         *  @returns {object} out Reference, just for convenience - out === the return.\r\n         *  @memberof DataTable#oApi\r\n         *  @todo This doesn't take account of arrays inside the deep copied objects.\r\n         */\r\n        function _fnExtend( out, extender, breakRefs )\r\n        {\r\n            var val;\r\n\r\n            for ( var prop in extender ) {\r\n                if ( extender.hasOwnProperty(prop) ) {\r\n                    val = extender[prop];\r\n\r\n                    if ( $.isPlainObject( val ) ) {\r\n                        if ( ! $.isPlainObject( out[prop] ) ) {\r\n                            out[prop] = {};\r\n                        }\r\n                        $.extend( true, out[prop], val );\r\n                    }\r\n                    else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {\r\n                        out[prop] = val.slice();\r\n                    }\r\n                    else {\r\n                        out[prop] = val;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return out;\r\n        }\r\n\r\n\r\n        /**\r\n         * Bind an event handers to allow a click or return key to activate the callback.\r\n         * This is good for accessibility since a return on the keyboard will have the\r\n         * same effect as a click, if the element has focus.\r\n         *  @param {element} n Element to bind the action to\r\n         *  @param {object} oData Data object to pass to the triggered function\r\n         *  @param {function} fn Callback function for when the event is triggered\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnBindAction( n, oData, fn )\r\n        {\r\n            $(n)\r\n                .bind( 'click.DT', oData, function (e) {\r\n                    n.blur(); // Remove focus outline for mouse users\r\n                    fn(e);\r\n                } )\r\n                .bind( 'keypress.DT', oData, function (e){\r\n                    if ( e.which === 13 ) {\r\n                        e.preventDefault();\r\n                        fn(e);\r\n                    }\r\n                } )\r\n                .bind( 'selectstart.DT', function () {\r\n                    /* Take the brutal approach to cancelling text selection */\r\n                    return false;\r\n                } );\r\n        }\r\n\r\n\r\n        /**\r\n         * Register a callback function. Easily allows a callback function to be added to\r\n         * an array store of callback functions that can then all be called together.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {string} sStore Name of the array storage for the callbacks in oSettings\r\n         *  @param {function} fn Function to be called back\r\n         *  @param {string} sName Identifying name for the callback (i.e. a label)\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnCallbackReg( oSettings, sStore, fn, sName )\r\n        {\r\n            if ( fn )\r\n            {\r\n                oSettings[sStore].push( {\r\n                    \"fn\": fn,\r\n                    \"sName\": sName\r\n                } );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Fire callback functions and trigger events. Note that the loop over the\r\n         * callback array store is done backwards! Further note that you do not want to\r\n         * fire off triggers in time sensitive applications (for example cell creation)\r\n         * as its slow.\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {string} callbackArr Name of the array storage for the callbacks in\r\n         *      oSettings\r\n         *  @param {string} event Name of the jQuery custom event to trigger. If null no\r\n         *      trigger is fired\r\n         *  @param {array} args Array of arguments to pass to the callback function /\r\n         *      trigger\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnCallbackFire( settings, callbackArr, e, args )\r\n        {\r\n            var ret = [];\r\n\r\n            if ( callbackArr ) {\r\n                ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {\r\n                    return val.fn.apply( settings.oInstance, args );\r\n                } );\r\n            }\r\n\r\n            if ( e !== null ) {\r\n                $(settings.nTable).trigger( e+'.dt', args );\r\n            }\r\n\r\n            return ret;\r\n        }\r\n\r\n\r\n        function _fnLengthOverflow ( settings )\r\n        {\r\n            var\r\n                start = settings._iDisplayStart,\r\n                end = settings.fnDisplayEnd(),\r\n                len = settings._iDisplayLength;\r\n\r\n            /* If we have space to show extra rows (backing up from the end point - then do so */\r\n            if ( end === settings.fnRecordsDisplay() )\r\n            {\r\n                start = end - len;\r\n            }\r\n\r\n            if ( len === -1 || start < 0 )\r\n            {\r\n                start = 0;\r\n            }\r\n\r\n            settings._iDisplayStart = start;\r\n        }\r\n\r\n\r\n        function _fnRenderer( settings, type )\r\n        {\r\n            var renderer = settings.renderer;\r\n            var host = DataTable.ext.renderer[type];\r\n\r\n            if ( $.isPlainObject( renderer ) && renderer[type] ) {\r\n                // Specific renderer for this type. If available use it, otherwise use\r\n                // the default.\r\n                return host[renderer[type]] || host._;\r\n            }\r\n            else if ( typeof renderer === 'string' ) {\r\n                // Common renderer - if there is one available for this type use it,\r\n                // otherwise use the default\r\n                return host[renderer] || host._;\r\n            }\r\n\r\n            // Use the default\r\n            return host._;\r\n        }\r\n\r\n\r\n        /**\r\n         * Detect the data source being used for the table. Used to simplify the code\r\n         * a little (ajax) and to make it compress a little smaller.\r\n         *\r\n         *  @param {object} settings dataTables settings object\r\n         *  @returns {string} Data source\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnDataSource ( settings )\r\n        {\r\n            if ( settings.oFeatures.bServerSide ) {\r\n                return 'ssp';\r\n            }\r\n            else if ( settings.ajax || settings.sAjaxSource ) {\r\n                return 'ajax';\r\n            }\r\n            return 'dom';\r\n        }\r\n\r\n\r\n        DataTable = function( options )\r\n        {\r\n            /**\r\n             * Perform a jQuery selector action on the table's TR elements (from the tbody) and\r\n             * return the resulting jQuery object.\r\n             *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\r\n             *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\r\n             *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\r\n             *    criterion (\"applied\") or all TR elements (i.e. no filter).\r\n             *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\r\n             *    Can be either 'current', whereby the current sorting of the table is used, or\r\n             *    'original' whereby the original order the data was read into the table is used.\r\n             *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\r\n             *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\r\n             *    'current' and filter is 'applied', regardless of what they might be given as.\r\n             *  @returns {object} jQuery object, filtered by the given selector.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Highlight every second row\r\n\t\t *      oTable.$('tr:odd').css('backgroundColor', 'blue');\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Filter to rows with 'Webkit' in them, add a background colour and then\r\n\t\t *      // remove the filter, thus highlighting the 'Webkit' rows only.\r\n\t\t *      oTable.fnFilter('Webkit');\r\n\t\t *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\r\n\t\t *      oTable.fnFilter('');\r\n\t\t *    } );\r\n             */\r\n            this.$ = function ( sSelector, oOpts )\r\n            {\r\n                return this.api(true).$( sSelector, oOpts );\r\n            };\r\n\r\n\r\n            /**\r\n             * Almost identical to $ in operation, but in this case returns the data for the matched\r\n             * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\r\n             * rather than any descendants, so the data can be obtained for the row/cell. If matching\r\n             * rows are found, the data returned is the original data array/object that was used to\r\n             * create the row (or a generated array if from a DOM source).\r\n             *\r\n             * This method is often useful in-combination with $ where both functions are given the\r\n             * same parameters and the array indexes will match identically.\r\n             *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\r\n             *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\r\n             *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\r\n             *    criterion (\"applied\") or all elements (i.e. no filter).\r\n             *  @param {string} [oOpts.order=current] Order of the data in the processed array.\r\n             *    Can be either 'current', whereby the current sorting of the table is used, or\r\n             *    'original' whereby the original order the data was read into the table is used.\r\n             *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\r\n             *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\r\n             *    'current' and filter is 'applied', regardless of what they might be given as.\r\n             *  @returns {array} Data for the matched elements. If any elements, as a result of the\r\n             *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\r\n             *    entry in the array.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Get the data from the first row in the table\r\n\t\t *      var data = oTable._('tr:first');\r\n\t\t *\r\n\t\t *      // Do something useful with the data\r\n\t\t *      alert( \"First cell is: \"+data[0] );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Filter to 'Webkit' and get all data for\r\n\t\t *      oTable.fnFilter('Webkit');\r\n\t\t *      var data = oTable._('tr', {\"search\": \"applied\"});\r\n\t\t *\r\n\t\t *      // Do something with the data\r\n\t\t *      alert( data.length+\" rows matched the search\" );\r\n\t\t *    } );\r\n             */\r\n            this._ = function ( sSelector, oOpts )\r\n            {\r\n                return this.api(true).rows( sSelector, oOpts ).data();\r\n            };\r\n\r\n\r\n            /**\r\n             * Create a DataTables Api instance, with the currently selected tables for\r\n             * the Api's context.\r\n             * @param {boolean} [traditional=false] Set the API instance's context to be\r\n             *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\r\n             *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\r\n             *   or if all tables captured in the jQuery object should be used.\r\n             * @return {DataTables.Api}\r\n             */\r\n            this.api = function ( traditional )\r\n            {\r\n                return traditional ?\r\n                    new _Api(\r\n                        _fnSettingsFromNode( this[ _ext.iApiIndex ] )\r\n                    ) :\r\n                    new _Api( this );\r\n            };\r\n\r\n\r\n            /**\r\n             * Add a single new row or multiple rows of data to the table. Please note\r\n             * that this is suitable for client-side processing only - if you are using\r\n             * server-side processing (i.e. \"bServerSide\": true), then to add data, you\r\n             * must add it to the data source, i.e. the server-side, through an Ajax call.\r\n             *  @param {array|object} data The data to be added to the table. This can be:\r\n             *    <ul>\r\n             *      <li>1D array of data - add a single row with the data provided</li>\r\n             *      <li>2D array of arrays - add multiple rows in a single call</li>\r\n             *      <li>object - data object when using <i>mData</i></li>\r\n             *      <li>array of objects - multiple data objects when using <i>mData</i></li>\r\n             *    </ul>\r\n             *  @param {bool} [redraw=true] redraw the table or not\r\n             *  @returns {array} An array of integers, representing the list of indexes in\r\n             *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\r\n             *    the table.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    // Global var for counter\r\n             *    var giCount = 2;\r\n             *\r\n             *    $(document).ready(function() {\r\n\t\t *      $('#example').dataTable();\r\n\t\t *    } );\r\n             *\r\n             *    function fnClickAddRow() {\r\n\t\t *      $('#example').dataTable().fnAddData( [\r\n\t\t *        giCount+\".1\",\r\n\t\t *        giCount+\".2\",\r\n\t\t *        giCount+\".3\",\r\n\t\t *        giCount+\".4\" ]\r\n\t\t *      );\r\n\t\t *\r\n\t\t *      giCount++;\r\n\t\t *    }\r\n             */\r\n            this.fnAddData = function( data, redraw )\r\n            {\r\n                var api = this.api( true );\r\n\r\n                /* Check if we want to add multiple rows or not */\r\n                var rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?\r\n                    api.rows.add( data ) :\r\n                    api.row.add( data );\r\n\r\n                if ( redraw === undefined || redraw ) {\r\n                    api.draw();\r\n                }\r\n\r\n                return rows.flatten().toArray();\r\n            };\r\n\r\n\r\n            /**\r\n             * This function will make DataTables recalculate the column sizes, based on the data\r\n             * contained in the table and the sizes applied to the columns (in the DOM, CSS or\r\n             * through the sWidth parameter). This can be useful when the width of the table's\r\n             * parent element changes (for example a window resize).\r\n             *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable( {\r\n\t\t *        \"sScrollY\": \"200px\",\r\n\t\t *        \"bPaginate\": false\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      $(window).bind('resize', function () {\r\n\t\t *        oTable.fnAdjustColumnSizing();\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            this.fnAdjustColumnSizing = function ( bRedraw )\r\n            {\r\n                var api = this.api( true ).columns.adjust();\r\n                var settings = api.settings()[0];\r\n                var scroll = settings.oScroll;\r\n\r\n                if ( bRedraw === undefined || bRedraw ) {\r\n                    api.draw( false );\r\n                }\r\n                else if ( scroll.sX !== \"\" || scroll.sY !== \"\" ) {\r\n                    /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\r\n                    _fnScrollDraw( settings );\r\n                }\r\n            };\r\n\r\n\r\n            /**\r\n             * Quickly and simply clear a table\r\n             *  @param {bool} [bRedraw=true] redraw the table or not\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\r\n\t\t *      oTable.fnClearTable();\r\n\t\t *    } );\r\n             */\r\n            this.fnClearTable = function( bRedraw )\r\n            {\r\n                var api = this.api( true ).clear();\r\n\r\n                if ( bRedraw === undefined || bRedraw ) {\r\n                    api.draw();\r\n                }\r\n            };\r\n\r\n\r\n            /**\r\n             * The exact opposite of 'opening' a row, this function will close any rows which\r\n             * are currently 'open'.\r\n             *  @param {node} nTr the table row to 'close'\r\n             *  @returns {int} 0 on success, or 1 if failed (can't find the row)\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable;\r\n\t\t *\r\n\t\t *      // 'open' an information row when a row is clicked on\r\n\t\t *      $('#example tbody tr').click( function () {\r\n\t\t *        if ( oTable.fnIsOpen(this) ) {\r\n\t\t *          oTable.fnClose( this );\r\n\t\t *        } else {\r\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *    } );\r\n             */\r\n            this.fnClose = function( nTr )\r\n            {\r\n                this.api( true ).row( nTr ).child.hide();\r\n            };\r\n\r\n\r\n            /**\r\n             * Remove a row for the table\r\n             *  @param {mixed} target The index of the row from aoData to be deleted, or\r\n             *    the TR element you want to delete\r\n             *  @param {function|null} [callBack] Callback function\r\n             *  @param {bool} [redraw=true] Redraw the table or not\r\n             *  @returns {array} The row that was deleted\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Immediately remove the first row\r\n\t\t *      oTable.fnDeleteRow( 0 );\r\n\t\t *    } );\r\n             */\r\n            this.fnDeleteRow = function( target, callback, redraw )\r\n            {\r\n                var api = this.api( true );\r\n                var rows = api.rows( target );\r\n                var settings = rows.settings()[0];\r\n                var data = settings.aoData[ rows[0][0] ];\r\n\r\n                rows.remove();\r\n\r\n                if ( callback ) {\r\n                    callback.call( this, settings, data );\r\n                }\r\n\r\n                if ( redraw === undefined || redraw ) {\r\n                    api.draw();\r\n                }\r\n\r\n                return data;\r\n            };\r\n\r\n\r\n            /**\r\n             * Restore the table to it's original state in the DOM by removing all of DataTables\r\n             * enhancements, alterations to the DOM structure of the table and event listeners.\r\n             *  @param {boolean} [remove=false] Completely remove the table from the DOM\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      oTable.fnDestroy();\r\n\t\t *    } );\r\n             */\r\n            this.fnDestroy = function ( remove )\r\n            {\r\n                this.api( true ).destroy( remove );\r\n            };\r\n\r\n\r\n            /**\r\n             * Redraw the table\r\n             *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\r\n\t\t *      oTable.fnDraw();\r\n\t\t *    } );\r\n             */\r\n            this.fnDraw = function( complete )\r\n            {\r\n                // Note that this isn't an exact match to the old call to _fnDraw - it takes\r\n                // into account the new data, but can old position.\r\n                this.api( true ).draw( ! complete );\r\n            };\r\n\r\n\r\n            /**\r\n             * Filter the input based on data\r\n             *  @param {string} sInput String to filter the table on\r\n             *  @param {int|null} [iColumn] Column to limit filtering to\r\n             *  @param {bool} [bRegex=false] Treat as regular expression or not\r\n             *  @param {bool} [bSmart=true] Perform smart filtering or not\r\n             *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\r\n             *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Sometime later - filter...\r\n\t\t *      oTable.fnFilter( 'test string' );\r\n\t\t *    } );\r\n             */\r\n            this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )\r\n            {\r\n                var api = this.api( true );\r\n\r\n                if ( iColumn === null || iColumn === undefined ) {\r\n                    api.search( sInput, bRegex, bSmart, bCaseInsensitive );\r\n                }\r\n                else {\r\n                    api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );\r\n                }\r\n\r\n                api.draw();\r\n            };\r\n\r\n\r\n            /**\r\n             * Get the data for the whole table, an individual row or an individual cell based on the\r\n             * provided parameters.\r\n             *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\r\n             *    a TR node then the data source for the whole row will be returned. If given as a\r\n             *    TD/TH cell node then iCol will be automatically calculated and the data for the\r\n             *    cell returned. If given as an integer, then this is treated as the aoData internal\r\n             *    data index for the row (see fnGetPosition) and the data for that row used.\r\n             *  @param {int} [col] Optional column index that you want the data of.\r\n             *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\r\n             *    returned. If mRow is defined, just data for that row, and is iCol is\r\n             *    defined, only data for the designated cell is returned.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    // Row data\r\n             *    $(document).ready(function() {\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      oTable.$('tr').click( function () {\r\n\t\t *        var data = oTable.fnGetData( this );\r\n\t\t *        // ... do something with the array / object of data for the row\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Individual cell data\r\n             *    $(document).ready(function() {\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      oTable.$('td').click( function () {\r\n\t\t *        var sData = oTable.fnGetData( this );\r\n\t\t *        alert( 'The cell clicked on had the value of '+sData );\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            this.fnGetData = function( src, col )\r\n            {\r\n                var api = this.api( true );\r\n\r\n                if ( src !== undefined ) {\r\n                    var type = src.nodeName ? src.nodeName.toLowerCase() : '';\r\n\r\n                    return col !== undefined || type == 'td' || type == 'th' ?\r\n                        api.cell( src, col ).data() :\r\n                    api.row( src ).data() || null;\r\n                }\r\n\r\n                return api.data().toArray();\r\n            };\r\n\r\n\r\n            /**\r\n             * Get an array of the TR nodes that are used in the table's body. Note that you will\r\n             * typically want to use the '$' API method in preference to this as it is more\r\n             * flexible.\r\n             *  @param {int} [iRow] Optional row index for the TR element you want\r\n             *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\r\n             *    in the table's body, or iRow is defined, just the TR element requested.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Get the nodes from the table\r\n\t\t *      var nNodes = oTable.fnGetNodes( );\r\n\t\t *    } );\r\n             */\r\n            this.fnGetNodes = function( iRow )\r\n            {\r\n                var api = this.api( true );\r\n\r\n                return iRow !== undefined ?\r\n                    api.row( iRow ).node() :\r\n                    api.rows().nodes().flatten().toArray();\r\n            };\r\n\r\n\r\n            /**\r\n             * Get the array indexes of a particular cell from it's DOM element\r\n             * and column index including hidden columns\r\n             *  @param {node} node this can either be a TR, TD or TH in the table's body\r\n             *  @returns {int} If nNode is given as a TR, then a single index is returned, or\r\n             *    if given as a cell, an array of [row index, column index (visible),\r\n             *    column index (all)] is given.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      $('#example tbody td').click( function () {\r\n\t\t *        // Get the position of the current data from the node\r\n\t\t *        var aPos = oTable.fnGetPosition( this );\r\n\t\t *\r\n\t\t *        // Get the data array for this row\r\n\t\t *        var aData = oTable.fnGetData( aPos[0] );\r\n\t\t *\r\n\t\t *        // Update the data array and return the value\r\n\t\t *        aData[ aPos[1] ] = 'clicked';\r\n\t\t *        this.innerHTML = 'clicked';\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      // Init DataTables\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *    } );\r\n             */\r\n            this.fnGetPosition = function( node )\r\n            {\r\n                var api = this.api( true );\r\n                var nodeName = node.nodeName.toUpperCase();\r\n\r\n                if ( nodeName == 'TR' ) {\r\n                    return api.row( node ).index();\r\n                }\r\n                else if ( nodeName == 'TD' || nodeName == 'TH' ) {\r\n                    var cell = api.cell( node ).index();\r\n\r\n                    return [\r\n                        cell.row,\r\n                        cell.columnVisible,\r\n                        cell.column\r\n                    ];\r\n                }\r\n                return null;\r\n            };\r\n\r\n\r\n            /**\r\n             * Check to see if a row is 'open' or not.\r\n             *  @param {node} nTr the table row to check\r\n             *  @returns {boolean} true if the row is currently open, false otherwise\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable;\r\n\t\t *\r\n\t\t *      // 'open' an information row when a row is clicked on\r\n\t\t *      $('#example tbody tr').click( function () {\r\n\t\t *        if ( oTable.fnIsOpen(this) ) {\r\n\t\t *          oTable.fnClose( this );\r\n\t\t *        } else {\r\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *    } );\r\n             */\r\n            this.fnIsOpen = function( nTr )\r\n            {\r\n                return this.api( true ).row( nTr ).child.isShown();\r\n            };\r\n\r\n\r\n            /**\r\n             * This function will place a new row directly after a row which is currently\r\n             * on display on the page, with the HTML contents that is passed into the\r\n             * function. This can be used, for example, to ask for confirmation that a\r\n             * particular record should be deleted.\r\n             *  @param {node} nTr The table row to 'open'\r\n             *  @param {string|node|jQuery} mHtml The HTML to put into the row\r\n             *  @param {string} sClass Class to give the new TD cell\r\n             *  @returns {node} The row opened. Note that if the table row passed in as the\r\n             *    first parameter, is not found in the table, this method will silently\r\n             *    return.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable;\r\n\t\t *\r\n\t\t *      // 'open' an information row when a row is clicked on\r\n\t\t *      $('#example tbody tr').click( function () {\r\n\t\t *        if ( oTable.fnIsOpen(this) ) {\r\n\t\t *          oTable.fnClose( this );\r\n\t\t *        } else {\r\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *    } );\r\n             */\r\n            this.fnOpen = function( nTr, mHtml, sClass )\r\n            {\r\n                return this.api( true )\r\n                    .row( nTr )\r\n                    .child( mHtml, sClass )\r\n                    .show()\r\n                    .child()[0];\r\n            };\r\n\r\n\r\n            /**\r\n             * Change the pagination - provides the internal logic for pagination in a simple API\r\n             * function. With this function you can have a DataTables table go to the next,\r\n             * previous, first or last pages.\r\n             *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\r\n             *    or page number to jump to (integer), note that page 0 is the first page.\r\n             *  @param {bool} [bRedraw=true] Redraw the table or not\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      oTable.fnPageChange( 'next' );\r\n\t\t *    } );\r\n             */\r\n            this.fnPageChange = function ( mAction, bRedraw )\r\n            {\r\n                var api = this.api( true ).page( mAction );\r\n\r\n                if ( bRedraw === undefined || bRedraw ) {\r\n                    api.draw(false);\r\n                }\r\n            };\r\n\r\n\r\n            /**\r\n             * Show a particular column\r\n             *  @param {int} iCol The column whose display should be changed\r\n             *  @param {bool} bShow Show (true) or hide (false) the column\r\n             *  @param {bool} [bRedraw=true] Redraw the table or not\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Hide the second column after initialisation\r\n\t\t *      oTable.fnSetColumnVis( 1, false );\r\n\t\t *    } );\r\n             */\r\n            this.fnSetColumnVis = function ( iCol, bShow, bRedraw )\r\n            {\r\n                var api = this.api( true ).column( iCol ).visible( bShow );\r\n\r\n                if ( bRedraw === undefined || bRedraw ) {\r\n                    api.columns.adjust().draw();\r\n                }\r\n            };\r\n\r\n\r\n            /**\r\n             * Get the settings for a particular table for external manipulation\r\n             *  @returns {object} DataTables settings object. See\r\n             *    {@link DataTable.models.oSettings}\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      var oSettings = oTable.fnSettings();\r\n\t\t *\r\n\t\t *      // Show an example parameter from the settings\r\n\t\t *      alert( oSettings._iDisplayStart );\r\n\t\t *    } );\r\n             */\r\n            this.fnSettings = function()\r\n            {\r\n                return _fnSettingsFromNode( this[_ext.iApiIndex] );\r\n            };\r\n\r\n\r\n            /**\r\n             * Sort the table by a particular column\r\n             *  @param {int} iCol the data index to sort on. Note that this will not match the\r\n             *    'display index' if you have hidden data entries\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Sort immediately with columns 0 and 1\r\n\t\t *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\r\n\t\t *    } );\r\n             */\r\n            this.fnSort = function( aaSort )\r\n            {\r\n                this.api( true ).order( aaSort ).draw();\r\n            };\r\n\r\n\r\n            /**\r\n             * Attach a sort listener to an element for a given column\r\n             *  @param {node} nNode the element to attach the sort listener to\r\n             *  @param {int} iColumn the column that a click on this node will sort on\r\n             *  @param {function} [fnCallback] callback function when sort is run\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Sort on column 1, when 'sorter' is clicked on\r\n\t\t *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\r\n\t\t *    } );\r\n             */\r\n            this.fnSortListener = function( nNode, iColumn, fnCallback )\r\n            {\r\n                this.api( true ).order.listener( nNode, iColumn, fnCallback );\r\n            };\r\n\r\n\r\n            /**\r\n             * Update a table cell or row - this method will accept either a single value to\r\n             * update the cell with, an array of values with one element for each column or\r\n             * an object in the same format as the original data source. The function is\r\n             * self-referencing in order to make the multi column updates easier.\r\n             *  @param {object|array|string} mData Data to update the cell/row with\r\n             *  @param {node|int} mRow TR element you want to update or the aoData index\r\n             *  @param {int} [iColumn] The column to update, give as null or undefined to\r\n             *    update a whole row.\r\n             *  @param {bool} [bRedraw=true] Redraw the table or not\r\n             *  @param {bool} [bAction=true] Perform pre-draw actions or not\r\n             *  @returns {int} 0 on success, 1 on error\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\r\n\t\t *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\r\n\t\t *    } );\r\n             */\r\n            this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )\r\n            {\r\n                var api = this.api( true );\r\n\r\n                if ( iColumn === undefined || iColumn === null ) {\r\n                    api.row( mRow ).data( mData );\r\n                }\r\n                else {\r\n                    api.cell( mRow, iColumn ).data( mData );\r\n                }\r\n\r\n                if ( bAction === undefined || bAction ) {\r\n                    api.columns.adjust();\r\n                }\r\n\r\n                if ( bRedraw === undefined || bRedraw ) {\r\n                    api.draw();\r\n                }\r\n                return 0;\r\n            };\r\n\r\n\r\n            /**\r\n             * Provide a common method for plug-ins to check the version of DataTables being used, in order\r\n             * to ensure compatibility.\r\n             *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\r\n             *    formats \"X\" and \"X.Y\" are also acceptable.\r\n             *  @returns {boolean} true if this version of DataTables is greater or equal to the required\r\n             *    version, or false if this version of DataTales is not suitable\r\n             *  @method\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      alert( oTable.fnVersionCheck( '1.9.0' ) );\r\n\t\t *    } );\r\n             */\r\n            this.fnVersionCheck = _ext.fnVersionCheck;\r\n\r\n\r\n            var _that = this;\r\n            var emptyInit = options === undefined;\r\n            var len = this.length;\r\n\r\n            if ( emptyInit ) {\r\n                options = {};\r\n            }\r\n\r\n            this.oApi = this.internal = _ext.internal;\r\n\r\n            // Extend with old style plug-in API methods\r\n            for ( var fn in DataTable.ext.internal ) {\r\n                if ( fn ) {\r\n                    this[fn] = _fnExternApiFunc(fn);\r\n                }\r\n            }\r\n\r\n            this.each(function() {\r\n                // For each initialisation we want to give it a clean initialisation\r\n                // object that can be bashed around\r\n                var o = {};\r\n                var oInit = len > 1 ? // optimisation for single table case\r\n                    _fnExtend( o, options, true ) :\r\n                    options;\r\n\r\n                /*global oInit,_that,emptyInit*/\r\n                var i=0, iLen, j, jLen, k, kLen;\r\n                var sId = this.getAttribute( 'id' );\r\n                var bInitHandedOff = false;\r\n                var defaults = DataTable.defaults;\r\n\r\n\r\n                /* Sanity check */\r\n                if ( this.nodeName.toLowerCase() != 'table' )\r\n                {\r\n                    _fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );\r\n                    return;\r\n                }\r\n\r\n                /* Backwards compatibility for the defaults */\r\n                _fnCompatOpts( defaults );\r\n                _fnCompatCols( defaults.column );\r\n\r\n                /* Convert the camel-case defaults to Hungarian */\r\n                _fnCamelToHungarian( defaults, defaults, true );\r\n                _fnCamelToHungarian( defaults.column, defaults.column, true );\r\n\r\n                /* Setting up the initialisation object */\r\n                _fnCamelToHungarian( defaults, oInit );\r\n\r\n                /* Check to see if we are re-initialising a table */\r\n                var allSettings = DataTable.settings;\r\n                for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )\r\n                {\r\n                    /* Base check on table node */\r\n                    if ( allSettings[i].nTable == this )\r\n                    {\r\n                        var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\r\n                        var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\r\n\r\n                        if ( emptyInit || bRetrieve )\r\n                        {\r\n                            return allSettings[i].oInstance;\r\n                        }\r\n                        else if ( bDestroy )\r\n                        {\r\n                            allSettings[i].oInstance.fnDestroy();\r\n                            break;\r\n                        }\r\n                        else\r\n                        {\r\n                            _fnLog( allSettings[i], 0, 'Cannot reinitialise DataTable', 3 );\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    /* If the element we are initialising has the same ID as a table which was previously\r\n                     * initialised, but the table nodes don't match (from before) then we destroy the old\r\n                     * instance by simply deleting it. This is under the assumption that the table has been\r\n                     * destroyed by other methods. Anyone using non-id selectors will need to do this manually\r\n                     */\r\n                    if ( allSettings[i].sTableId == this.id )\r\n                    {\r\n                        allSettings.splice( i, 1 );\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                /* Ensure the table has an ID - required for accessibility */\r\n                if ( sId === null || sId === \"\" )\r\n                {\r\n                    sId = \"DataTables_Table_\"+(DataTable.ext._unique++);\r\n                    this.id = sId;\r\n                }\r\n\r\n                /* Create the settings object for this table and set some of the default parameters */\r\n                var oSettings = $.extend( true, {}, DataTable.models.oSettings, {\r\n                    \"nTable\":        this,\r\n                    \"oApi\":          _that.internal,\r\n                    \"oInit\":         oInit,\r\n                    \"sDestroyWidth\": $(this)[0].style.width,\r\n                    \"sInstance\":     sId,\r\n                    \"sTableId\":      sId\r\n                } );\r\n                allSettings.push( oSettings );\r\n\r\n                // Need to add the instance after the instance after the settings object has been added\r\n                // to the settings array, so we can self reference the table instance if more than one\r\n                oSettings.oInstance = (_that.length===1) ? _that : $(this).dataTable();\r\n\r\n                // Backwards compatibility, before we apply all the defaults\r\n                _fnCompatOpts( oInit );\r\n\r\n                if ( oInit.oLanguage )\r\n                {\r\n                    _fnLanguageCompat( oInit.oLanguage );\r\n                }\r\n\r\n                // If the length menu is given, but the init display length is not, use the length menu\r\n                if ( oInit.aLengthMenu && ! oInit.iDisplayLength )\r\n                {\r\n                    oInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?\r\n                        oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\r\n                }\r\n\r\n                // Apply the defaults and init options to make a single init object will all\r\n                // options defined from defaults and instance options.\r\n                oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );\r\n\r\n\r\n                // Map the initialisation options onto the settings object\r\n                _fnMap( oSettings.oFeatures, oInit, [\r\n                    \"bPaginate\",\r\n                    \"bLengthChange\",\r\n                    \"bFilter\",\r\n                    \"bSort\",\r\n                    \"bSortMulti\",\r\n                    \"bInfo\",\r\n                    \"bProcessing\",\r\n                    \"bAutoWidth\",\r\n                    \"bSortClasses\",\r\n                    \"bServerSide\",\r\n                    \"bDeferRender\"\r\n                ] );\r\n                _fnMap( oSettings, oInit, [\r\n                    \"asStripeClasses\",\r\n                    \"ajax\",\r\n                    \"fnServerData\",\r\n                    \"fnFormatNumber\",\r\n                    \"sServerMethod\",\r\n                    \"aaSorting\",\r\n                    \"aaSortingFixed\",\r\n                    \"aLengthMenu\",\r\n                    \"sPaginationType\",\r\n                    \"sAjaxSource\",\r\n                    \"sAjaxDataProp\",\r\n                    \"iStateDuration\",\r\n                    \"sDom\",\r\n                    \"bSortCellsTop\",\r\n                    \"iTabIndex\",\r\n                    \"fnStateLoadCallback\",\r\n                    \"fnStateSaveCallback\",\r\n                    \"renderer\",\r\n                    [ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat\r\n                    [ \"oSearch\", \"oPreviousSearch\" ],\r\n                    [ \"aoSearchCols\", \"aoPreSearchCols\" ],\r\n                    [ \"iDisplayLength\", \"_iDisplayLength\" ],\r\n                    [ \"bJQueryUI\", \"bJUI\" ]\r\n                ] );\r\n                _fnMap( oSettings.oScroll, oInit, [\r\n                    [ \"sScrollX\", \"sX\" ],\r\n                    [ \"sScrollXInner\", \"sXInner\" ],\r\n                    [ \"sScrollY\", \"sY\" ],\r\n                    [ \"bScrollCollapse\", \"bCollapse\" ]\r\n                ] );\r\n                _fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );\r\n\r\n                /* Callback functions which are array driven */\r\n                _fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );\r\n                _fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );\r\n                _fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );\r\n                _fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );\r\n                _fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );\r\n                _fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );\r\n                _fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );\r\n                _fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );\r\n                _fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );\r\n                _fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );\r\n                _fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );\r\n\r\n                var oClasses = oSettings.oClasses;\r\n\r\n                // @todo Remove in 1.11\r\n                if ( oInit.bJQueryUI )\r\n                {\r\n                    /* Use the JUI classes object for display. You could clone the oStdClasses object if\r\n                     * you want to have multiple tables with multiple independent classes\r\n                     */\r\n                    $.extend( oClasses, DataTable.ext.oJUIClasses, oInit.oClasses );\r\n\r\n                    if ( oInit.sDom === defaults.sDom && defaults.sDom === \"lfrtip\" )\r\n                    {\r\n                        /* Set the DOM to use a layout suitable for jQuery UI's theming */\r\n                        oSettings.sDom = '<\"H\"lfr>t<\"F\"ip>';\r\n                    }\r\n\r\n                    if ( ! oSettings.renderer ) {\r\n                        oSettings.renderer = 'jqueryui';\r\n                    }\r\n                    else if ( $.isPlainObject( oSettings.renderer ) && ! oSettings.renderer.header ) {\r\n                        oSettings.renderer.header = 'jqueryui';\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    $.extend( oClasses, DataTable.ext.classes, oInit.oClasses );\r\n                }\r\n                $(this).addClass( oClasses.sTable );\r\n\r\n                /* Calculate the scroll bar width and cache it for use later on */\r\n                if ( oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\" )\r\n                {\r\n                    oSettings.oScroll.iBarWidth = _fnScrollBarWidth();\r\n                }\r\n                if ( oSettings.oScroll.sX === true ) { // Easy initialisation of x-scrolling\r\n                    oSettings.oScroll.sX = '100%';\r\n                }\r\n\r\n                if ( oSettings.iInitDisplayStart === undefined )\r\n                {\r\n                    /* Display start point, taking into account the save saving */\r\n                    oSettings.iInitDisplayStart = oInit.iDisplayStart;\r\n                    oSettings._iDisplayStart = oInit.iDisplayStart;\r\n                }\r\n\r\n                if ( oInit.iDeferLoading !== null )\r\n                {\r\n                    oSettings.bDeferLoading = true;\r\n                    var tmp = $.isArray( oInit.iDeferLoading );\r\n                    oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\r\n                    oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\r\n                }\r\n\r\n                /* Language definitions */\r\n                if ( oInit.oLanguage.sUrl !== \"\" )\r\n                {\r\n                    /* Get the language definitions from a file - because this Ajax call makes the language\r\n                     * get async to the remainder of this function we use bInitHandedOff to indicate that\r\n                     * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\r\n                     */\r\n                    oSettings.oLanguage.sUrl = oInit.oLanguage.sUrl;\r\n                    $.getJSON( oSettings.oLanguage.sUrl, null, function( json ) {\r\n                        _fnLanguageCompat( json );\r\n                        _fnCamelToHungarian( defaults.oLanguage, json );\r\n                        $.extend( true, oSettings.oLanguage, oInit.oLanguage, json );\r\n                        _fnInitialise( oSettings );\r\n                    } );\r\n                    bInitHandedOff = true;\r\n                }\r\n                else\r\n                {\r\n                    $.extend( true, oSettings.oLanguage, oInit.oLanguage );\r\n                }\r\n\r\n\r\n                /*\r\n                 * Stripes\r\n                 */\r\n                if ( oInit.asStripeClasses === null )\r\n                {\r\n                    oSettings.asStripeClasses =[\r\n                        oClasses.sStripeOdd,\r\n                        oClasses.sStripeEven\r\n                    ];\r\n                }\r\n\r\n                /* Remove row stripe classes if they are already on the table row */\r\n                var stripeClasses = oSettings.asStripeClasses;\r\n                var rowOne = $('tbody tr:eq(0)', this);\r\n                if ( $.inArray( true, $.map( stripeClasses, function(el, i) {\r\n                        return rowOne.hasClass(el);\r\n                    } ) ) !== -1 ) {\r\n                    $('tbody tr', this).removeClass( stripeClasses.join(' ') );\r\n                    oSettings.asDestroyStripes = stripeClasses.slice();\r\n                }\r\n\r\n                /*\r\n                 * Columns\r\n                 * See if we should load columns automatically or use defined ones\r\n                 */\r\n                var anThs = [];\r\n                var aoColumnsInit;\r\n                var nThead = this.getElementsByTagName('thead');\r\n                if ( nThead.length !== 0 )\r\n                {\r\n                    _fnDetectHeader( oSettings.aoHeader, nThead[0] );\r\n                    anThs = _fnGetUniqueThs( oSettings );\r\n                }\r\n\r\n                /* If not given a column array, generate one with nulls */\r\n                if ( oInit.aoColumns === null )\r\n                {\r\n                    aoColumnsInit = [];\r\n                    for ( i=0, iLen=anThs.length ; i<iLen ; i++ )\r\n                    {\r\n                        aoColumnsInit.push( null );\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    aoColumnsInit = oInit.aoColumns;\r\n                }\r\n\r\n                /* Add the columns */\r\n                for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )\r\n                {\r\n                    _fnAddColumn( oSettings, anThs ? anThs[i] : null );\r\n                }\r\n\r\n                /* Apply the column definitions */\r\n                _fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\r\n                    _fnColumnOptions( oSettings, iCol, oDef );\r\n                } );\r\n\r\n                /* HTML5 attribute detection - build an mData object automatically if the\r\n                 * attributes are found\r\n                 */\r\n                if ( rowOne.length ) {\r\n                    var a = function ( cell, name ) {\r\n                        return cell.getAttribute( 'data-'+name ) ? name : null;\r\n                    };\r\n\r\n                    $.each( _fnGetRowElements( oSettings, rowOne[0] ).cells, function (i, cell) {\r\n                        var col = oSettings.aoColumns[i];\r\n\r\n                        if ( col.mData === i ) {\r\n                            var sort = a( cell, 'sort' ) || a( cell, 'order' );\r\n                            var filter = a( cell, 'filter' ) || a( cell, 'search' );\r\n\r\n                            if ( sort !== null || filter !== null ) {\r\n                                col.mData = {\r\n                                    _:      i+'.display',\r\n                                    sort:   sort !== null   ? i+'.@data-'+sort   : undefined,\r\n                                    type:   sort !== null   ? i+'.@data-'+sort   : undefined,\r\n                                    filter: filter !== null ? i+'.@data-'+filter : undefined\r\n                                };\r\n\r\n                                _fnColumnOptions( oSettings, i );\r\n                            }\r\n                        }\r\n                    } );\r\n                }\r\n\r\n                var features = oSettings.oFeatures;\r\n\r\n                /* Must be done after everything which can be overridden by the state saving! */\r\n                if ( oInit.bStateSave )\r\n                {\r\n                    features.bStateSave = true;\r\n                    _fnLoadState( oSettings, oInit );\r\n                    _fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );\r\n                }\r\n\r\n\r\n                /*\r\n                 * Sorting\r\n                 * @todo For modularisation (1.11) this needs to do into a sort start up handler\r\n                 */\r\n\r\n                // If aaSorting is not defined, then we use the first indicator in asSorting\r\n                // in case that has been altered, so the default sort reflects that option\r\n                if ( oInit.aaSorting === undefined )\r\n                {\r\n                    var sorting = oSettings.aaSorting;\r\n                    for ( i=0, iLen=sorting.length ; i<iLen ; i++ )\r\n                    {\r\n                        sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];\r\n                    }\r\n                }\r\n\r\n                /* Do a first pass on the sorting classes (allows any size changes to be taken into\r\n                 * account, and also will apply sorting disabled classes if disabled\r\n                 */\r\n                _fnSortingClasses( oSettings );\r\n\r\n                if ( features.bSort )\r\n                {\r\n                    _fnCallbackReg( oSettings, 'aoDrawCallback', function () {\r\n                        if ( oSettings.bSorted ) {\r\n                            var aSort = _fnSortFlatten( oSettings );\r\n                            var sortedColumns = {};\r\n\r\n                            $.each( aSort, function (i, val) {\r\n                                sortedColumns[ val.src ] = val.dir;\r\n                            } );\r\n\r\n                            _fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );\r\n                            _fnSortAria( oSettings );\r\n                        }\r\n                    } );\r\n                }\r\n\r\n                _fnCallbackReg( oSettings, 'aoDrawCallback', function () {\r\n                    if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {\r\n                        _fnSortingClasses( oSettings );\r\n                    }\r\n                }, 'sc' );\r\n\r\n\r\n                /*\r\n                 * Final init\r\n                 * Cache the header, body and footer as required, creating them if needed\r\n                 */\r\n\r\n                /* Browser support detection */\r\n                _fnBrowserDetect( oSettings );\r\n\r\n                // Work around for Webkit bug 83867 - store the caption-side before removing from doc\r\n                var captions = $(this).children('caption').each( function () {\r\n                    this._captionSide = $(this).css('caption-side');\r\n                } );\r\n\r\n                var thead = $(this).children('thead');\r\n                if ( thead.length === 0 )\r\n                {\r\n                    thead = $('<thead/>').appendTo(this);\r\n                }\r\n                oSettings.nTHead = thead[0];\r\n\r\n                var tbody = $(this).children('tbody');\r\n                if ( tbody.length === 0 )\r\n                {\r\n                    tbody = $('<tbody/>').appendTo(this);\r\n                }\r\n                oSettings.nTBody = tbody[0];\r\n\r\n                var tfoot = $(this).children('tfoot');\r\n                if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") )\r\n                {\r\n                    // If we are a scrolling table, and no footer has been given, then we need to create\r\n                    // a tfoot element for the caption element to be appended to\r\n                    tfoot = $('<tfoot/>').appendTo(this);\r\n                }\r\n\r\n                if ( tfoot.length === 0 || tfoot.children().length === 0 ) {\r\n                    $(this).addClass( oClasses.sNoFooter );\r\n                }\r\n                else if ( tfoot.length > 0 ) {\r\n                    oSettings.nTFoot = tfoot[0];\r\n                    _fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );\r\n                }\r\n\r\n                /* Check if there is data passing into the constructor */\r\n                if ( oInit.aaData )\r\n                {\r\n                    for ( i=0 ; i<oInit.aaData.length ; i++ )\r\n                    {\r\n                        _fnAddData( oSettings, oInit.aaData[ i ] );\r\n                    }\r\n                }\r\n                else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' )\r\n                {\r\n                    /* Grab the data from the page - only do this when deferred loading or no Ajax\r\n                     * source since there is no point in reading the DOM data if we are then going\r\n                     * to replace it with Ajax data\r\n                     */\r\n                    _fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );\r\n                }\r\n\r\n                /* Copy the data index array */\r\n                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\r\n\r\n                /* Initialisation complete - table can be drawn */\r\n                oSettings.bInitialised = true;\r\n\r\n                /* Check if we need to initialise the table (it might not have been handed off to the\r\n                 * language processor)\r\n                 */\r\n                if ( bInitHandedOff === false )\r\n                {\r\n                    _fnInitialise( oSettings );\r\n                }\r\n            } );\r\n            _that = null;\r\n            return this;\r\n        };\r\n\r\n\r\n\r\n        /**\r\n         * Computed structure of the DataTables API, defined by the options passed to\r\n         * `DataTable.Api.register()` when building the API.\r\n         *\r\n         * The structure is built in order to speed creation and extension of the Api\r\n         * objects since the extensions are effectively pre-parsed.\r\n         *\r\n         * The array is an array of objects with the following structure, where this\r\n         * base array represents the Api prototype base:\r\n         *\r\n         *     [\r\n         *       {\r\n\t *         name:      'data'                -- string   - Property name\r\n\t *         val:       function () {},       -- function - Api method (or undefined if just an object\r\n\t *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\r\n\t *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\r\n\t *       },\r\n         *       {\r\n\t *         name:     'row'\r\n\t *         val:       {},\r\n\t *         methodExt: [ ... ],\r\n\t *         propExt:   [\r\n\t *           {\r\n\t *             name:      'data'\r\n\t *             val:       function () {},\r\n\t *             methodExt: [ ... ],\r\n\t *             propExt:   [ ... ]\r\n\t *           },\r\n\t *           ...\r\n\t *         ]\r\n\t *       }\r\n         *     ]\r\n         *\r\n         * @type {Array}\r\n         * @ignore\r\n         */\r\n        var __apiStruct = [];\r\n\r\n\r\n        /**\r\n         * `Array.prototype` reference.\r\n         *\r\n         * @type object\r\n         * @ignore\r\n         */\r\n        var __arrayProto = Array.prototype;\r\n\r\n\r\n        /**\r\n         * Abstraction for `context` parameter of the `Api` constructor to allow it to\r\n         * take several different forms for ease of use.\r\n         *\r\n         * Each of the input parameter types will be converted to a DataTables settings\r\n         * object where possible.\r\n         *\r\n         * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\r\n         *   of:\r\n         *\r\n         *   * `string` - jQuery selector. Any DataTables' matching the given selector\r\n         *     with be found and used.\r\n         *   * `node` - `TABLE` node which has already been formed into a DataTable.\r\n         *   * `jQuery` - A jQuery object of `TABLE` nodes.\r\n         *   * `object` - DataTables settings object\r\n         *   * `DataTables.Api` - API instance\r\n         * @return {array|null} Matching DataTables settings objects. `null` or\r\n         *   `undefined` is returned if no matching DataTable is found.\r\n         * @ignore\r\n         */\r\n        var _toSettings = function ( mixed )\r\n        {\r\n            var idx, jq;\r\n            var settings = DataTable.settings;\r\n            var tables = $.map( settings, function (el, i) {\r\n                return el.nTable;\r\n            } );\r\n\r\n            if ( ! mixed ) {\r\n                return [];\r\n            }\r\n            else if ( mixed.nTable && mixed.oApi ) {\r\n                // DataTables settings object\r\n                return [ mixed ];\r\n            }\r\n            else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {\r\n                // Table node\r\n                idx = $.inArray( mixed, tables );\r\n                return idx !== -1 ? [ settings[idx] ] : null;\r\n            }\r\n            else if ( mixed && typeof mixed.settings === 'function' ) {\r\n                return mixed.settings().toArray();\r\n            }\r\n            else if ( typeof mixed === 'string' ) {\r\n                // jQuery selector\r\n                jq = $(mixed);\r\n            }\r\n            else if ( mixed instanceof $ ) {\r\n                // jQuery object (also DataTables instance)\r\n                jq = mixed;\r\n            }\r\n\r\n            if ( jq ) {\r\n                return jq.map( function(i) {\r\n                    idx = $.inArray( this, tables );\r\n                    return idx !== -1 ? settings[idx] : null;\r\n                } ).toArray();\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * DataTables API class - used to control and interface with  one or more\r\n         * DataTables enhanced tables.\r\n         *\r\n         * The API class is heavily based on jQuery, presenting a chainable interface\r\n         * that you can use to interact with tables. Each instance of the API class has\r\n         * a \"context\" - i.e. the tables that it will operate on. This could be a single\r\n         * table, all tables on a page or a sub-set thereof.\r\n         *\r\n         * Additionally the API is designed to allow you to easily work with the data in\r\n         * the tables, retrieving and manipulating it as required. This is done by\r\n         * presenting the API class as an array like interface. The contents of the\r\n         * array depend upon the actions requested by each method (for example\r\n         * `rows().nodes()` will return an array of nodes, while `rows().data()` will\r\n         * return an array of objects or arrays depending upon your table's\r\n         * configuration). The API object has a number of array like methods (`push`,\r\n         * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\r\n         * `unique` etc) to assist your working with the data held in a table.\r\n         *\r\n         * Most methods (those which return an Api instance) are chainable, which means\r\n         * the return from a method call also has all of the methods available that the\r\n         * top level object had. For example, these two calls are equivalent:\r\n         *\r\n         *     // Not chained\r\n         *     api.row.add( {...} );\r\n         *     api.draw();\r\n         *\r\n         *     // Chained\r\n         *     api.row.add( {...} ).draw();\r\n         *\r\n         * @class DataTable.Api\r\n         * @param {array|object|string|jQuery} context DataTable identifier. This is\r\n         *   used to define which DataTables enhanced tables this API will operate on.\r\n         *   Can be one of:\r\n         *\r\n         *   * `string` - jQuery selector. Any DataTables' matching the given selector\r\n         *     with be found and used.\r\n         *   * `node` - `TABLE` node which has already been formed into a DataTable.\r\n         *   * `jQuery` - A jQuery object of `TABLE` nodes.\r\n         *   * `object` - DataTables settings object\r\n         * @param {array} [data] Data to initialise the Api instance with.\r\n         *\r\n         * @example\r\n         *   // Direct initialisation during DataTables construction\r\n         *   var api = $('#example').DataTable();\r\n         *\r\n         * @example\r\n         *   // Initialisation using a DataTables jQuery object\r\n         *   var api = $('#example').dataTable().api();\r\n         *\r\n         * @example\r\n         *   // Initialisation as a constructor\r\n         *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\r\n         */\r\n        _Api = function ( context, data )\r\n        {\r\n            if ( ! this instanceof _Api ) {\r\n                throw 'DT API must be constructed as a new object';\r\n                // or should it do the 'new' for the caller?\r\n                // return new _Api.apply( this, arguments );\r\n            }\r\n\r\n            var settings = [];\r\n            var ctxSettings = function ( o ) {\r\n                var a = _toSettings( o );\r\n                if ( a ) {\r\n                    settings.push.apply( settings, a );\r\n                }\r\n            };\r\n\r\n            if ( $.isArray( context ) ) {\r\n                for ( var i=0, ien=context.length ; i<ien ; i++ ) {\r\n                    ctxSettings( context[i] );\r\n                }\r\n            }\r\n            else {\r\n                ctxSettings( context );\r\n            }\r\n\r\n            // Remove duplicates\r\n            this.context = _unique( settings );\r\n\r\n            // Initial data\r\n            if ( data ) {\r\n                this.push.apply( this, data.toArray ? data.toArray() : data );\r\n            }\r\n\r\n            // selector\r\n            this.selector = {\r\n                rows: null,\r\n                cols: null,\r\n                opts: null\r\n            };\r\n\r\n            _Api.extend( this, this, __apiStruct );\r\n        };\r\n\r\n        DataTable.Api = _Api;\r\n\r\n        _Api.prototype = /** @lends DataTables.Api */{\r\n            /**\r\n             * Return a new Api instance, comprised of the data held in the current\r\n             * instance, join with the other array(s) and/or value(s).\r\n             *\r\n             * An alias for `Array.prototype.concat`.\r\n             *\r\n             * @type method\r\n             * @param {*} value1 Arrays and/or values to concatenate.\r\n             * @param {*} [...] Additional arrays and/or values to concatenate.\r\n             * @returns {DataTables.Api} New API instance, comprising of the combined\r\n             *   array.\r\n             */\r\n            concat:  __arrayProto.concat,\r\n\r\n\r\n            context: [], // array of table settings objects\r\n\r\n\r\n            each: function ( fn )\r\n            {\r\n                for ( var i=0, ien=this.length ; i<ien; i++ ) {\r\n                    fn.call( this, this[i], i, this );\r\n                }\r\n\r\n                return this;\r\n            },\r\n\r\n\r\n            eq: function ( idx )\r\n            {\r\n                var ctx = this.context;\r\n\r\n                return ctx.length > idx ?\r\n                    new _Api( ctx[idx], this[idx] ) :\r\n                    null;\r\n            },\r\n\r\n\r\n            filter: function ( fn )\r\n            {\r\n                var a = [];\r\n\r\n                if ( __arrayProto.filter ) {\r\n                    a = __arrayProto.filter.call( this, fn, this );\r\n                }\r\n                else {\r\n                    // Compatibility for browsers without EMCA-252-5 (JS 1.6)\r\n                    for ( var i=0, ien=this.length ; i<ien ; i++ ) {\r\n                        if ( fn.call( this, this[i], i, this ) ) {\r\n                            a.push( this[i] );\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return new _Api( this.context, a );\r\n            },\r\n\r\n\r\n            flatten: function ()\r\n            {\r\n                var a = [];\r\n                return new _Api( this.context, a.concat.apply( a, this.toArray() ) );\r\n            },\r\n\r\n\r\n            join:    __arrayProto.join,\r\n\r\n\r\n            indexOf: __arrayProto.indexOf || function (obj, start)\r\n            {\r\n                for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {\r\n                    if ( this[i] === obj ) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return -1;\r\n            },\r\n\r\n            // Internal only at the moment - relax?\r\n            iterator: function ( flatten, type, fn ) {\r\n                var\r\n                    a = [], ret,\r\n                    i, ien, j, jen,\r\n                    context = this.context,\r\n                    rows, items, item,\r\n                    selector = this.selector;\r\n\r\n                // Argument shifting\r\n                if ( typeof flatten === 'string' ) {\r\n                    fn = type;\r\n                    type = flatten;\r\n                    flatten = false;\r\n                }\r\n\r\n                for ( i=0, ien=context.length ; i<ien ; i++ ) {\r\n                    if ( type === 'table' ) {\r\n                        ret = fn( context[i], i );\r\n\r\n                        if ( ret !== undefined ) {\r\n                            a.push( ret );\r\n                        }\r\n                    }\r\n                    else if ( type === 'columns' || type === 'rows' ) {\r\n                        // this has same length as context - one entry for each table\r\n                        ret = fn( context[i], this[i], i );\r\n\r\n                        if ( ret !== undefined ) {\r\n                            a.push( ret );\r\n                        }\r\n                    }\r\n                    else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {\r\n                        // columns and rows share the same structure.\r\n                        // 'this' is an array of column indexes for each context\r\n                        items = this[i];\r\n\r\n                        if ( type === 'column-rows' ) {\r\n                            rows = _selector_row_indexes( context[i], selector.opts );\r\n                        }\r\n\r\n                        for ( j=0, jen=items.length ; j<jen ; j++ ) {\r\n                            item = items[j];\r\n\r\n                            if ( type === 'cell' ) {\r\n                                ret = fn( context[i], item.row, item.column, i, j );\r\n                            }\r\n                            else {\r\n                                ret = fn( context[i], item, i, j, rows );\r\n                            }\r\n\r\n                            if ( ret !== undefined ) {\r\n                                a.push( ret );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if ( a.length ) {\r\n                    var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );\r\n                    var apiSelector = api.selector;\r\n                    apiSelector.rows = selector.rows;\r\n                    apiSelector.cols = selector.cols;\r\n                    apiSelector.opts = selector.opts;\r\n                    return api;\r\n                }\r\n                return this;\r\n            },\r\n\r\n\r\n            lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)\r\n            {\r\n                // Bit cheeky...\r\n                return this.indexOf.apply( this.toArray.reverse(), arguments );\r\n            },\r\n\r\n\r\n            length:  0,\r\n\r\n\r\n            map: function ( fn )\r\n            {\r\n                var a = [];\r\n\r\n                if ( __arrayProto.map ) {\r\n                    a = __arrayProto.map.call( this, fn, this );\r\n                }\r\n                else {\r\n                    // Compatibility for browsers without EMCA-252-5 (JS 1.6)\r\n                    for ( var i=0, ien=this.length ; i<ien ; i++ ) {\r\n                        a.push( fn.call( this, this[i], i ) );\r\n                    }\r\n                }\r\n\r\n                return new _Api( this.context, a );\r\n            },\r\n\r\n\r\n            pluck: function ( prop )\r\n            {\r\n                return this.map( function ( el ) {\r\n                    return el[ prop ];\r\n                } );\r\n            },\r\n\r\n            pop:     __arrayProto.pop,\r\n\r\n\r\n            push:    __arrayProto.push,\r\n\r\n\r\n            // Does not return an API instance\r\n            reduce: __arrayProto.reduce || function ( fn, init )\r\n            {\r\n                return _fnReduce( this, fn, init, 0, this.length, 1 );\r\n            },\r\n\r\n\r\n            reduceRight: __arrayProto.reduceRight || function ( fn, init )\r\n            {\r\n                return _fnReduce( this, fn, init, this.length-1, -1, -1 );\r\n            },\r\n\r\n\r\n            reverse: __arrayProto.reverse,\r\n\r\n\r\n            // Object with rows, columns and opts\r\n            selector: null,\r\n\r\n\r\n            shift:   __arrayProto.shift,\r\n\r\n\r\n            sort:    __arrayProto.sort, // ? name - order?\r\n\r\n\r\n            splice:  __arrayProto.splice,\r\n\r\n\r\n            toArray: function ()\r\n            {\r\n                return __arrayProto.slice.call( this );\r\n            },\r\n\r\n\r\n            to$: function ()\r\n            {\r\n                return $( this );\r\n            },\r\n\r\n\r\n            toJQuery: function ()\r\n            {\r\n                return $( this );\r\n            },\r\n\r\n\r\n            unique: function ()\r\n            {\r\n                return new _Api( this.context, _unique(this) );\r\n            },\r\n\r\n\r\n            unshift: __arrayProto.unshift\r\n        };\r\n\r\n\r\n        _Api.extend = function ( scope, obj, ext )\r\n        {\r\n            // Only extend API instances and static properties of the API\r\n            if ( ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {\r\n                return;\r\n            }\r\n\r\n            var\r\n                i, ien,\r\n                j, jen,\r\n                struct, inner,\r\n                methodScoping = function ( scope, fn, struc ) {\r\n                    return function () {\r\n                        var ret = fn.apply( scope, arguments );\r\n\r\n                        // Method extension\r\n                        _Api.extend( ret, ret, struc.methodExt );\r\n                        return ret;\r\n                    };\r\n                };\r\n\r\n            for ( i=0, ien=ext.length ; i<ien ; i++ ) {\r\n                struct = ext[i];\r\n\r\n                // Value\r\n                obj[ struct.name ] = typeof struct.val === 'function' ?\r\n                    methodScoping( scope, struct.val, struct ) :\r\n                    $.isPlainObject( struct.val ) ?\r\n                    {} :\r\n                        struct.val;\r\n\r\n                obj[ struct.name ].__dt_wrapper = true;\r\n\r\n                // Property extension\r\n                _Api.extend( scope, obj[ struct.name ], struct.propExt );\r\n            }\r\n        };\r\n\r\n\r\n        // @todo - Is there need for an augment function?\r\n        // _Api.augment = function ( inst, name )\r\n        // {\r\n        // \t// Find src object in the structure from the name\r\n        // \tvar parts = name.split('.');\r\n\r\n        // \t_Api.extend( inst, obj );\r\n        // };\r\n\r\n\r\n        //     [\r\n        //       {\r\n        //         name:      'data'                -- string   - Property name\r\n        //         val:       function () {},       -- function - Api method (or undefined if just an object\r\n        //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\r\n        //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\r\n        //       },\r\n        //       {\r\n        //         name:     'row'\r\n        //         val:       {},\r\n        //         methodExt: [ ... ],\r\n        //         propExt:   [\r\n        //           {\r\n        //             name:      'data'\r\n        //             val:       function () {},\r\n        //             methodExt: [ ... ],\r\n        //             propExt:   [ ... ]\r\n        //           },\r\n        //           ...\r\n        //         ]\r\n        //       }\r\n        //     ]\r\n\r\n        _Api.register = _api_register = function ( name, val )\r\n        {\r\n            if ( $.isArray( name ) ) {\r\n                for ( var j=0, jen=name.length ; j<jen ; j++ ) {\r\n                    _Api.register( name[j], val );\r\n                }\r\n                return;\r\n            }\r\n\r\n            var\r\n                i, ien,\r\n                heir = name.split('.'),\r\n                struct = __apiStruct,\r\n                key, method;\r\n\r\n            var find = function ( src, name ) {\r\n                for ( var i=0, ien=src.length ; i<ien ; i++ ) {\r\n                    if ( src[i].name === name ) {\r\n                        return src[i];\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n\r\n            for ( i=0, ien=heir.length ; i<ien ; i++ ) {\r\n                method = heir[i].indexOf('()') !== -1;\r\n                key = method ?\r\n                    heir[i].replace('()', '') :\r\n                    heir[i];\r\n\r\n                var src = find( struct, key );\r\n                if ( ! src ) {\r\n                    src = {\r\n                        name:      key,\r\n                        val:       {},\r\n                        methodExt: [],\r\n                        propExt:   []\r\n                    };\r\n                    struct.push( src );\r\n                }\r\n\r\n                if ( i === ien-1 ) {\r\n                    src.val = val;\r\n                }\r\n                else {\r\n                    struct = method ?\r\n                        src.methodExt :\r\n                        src.propExt;\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        _Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {\r\n            _Api.register( pluralName, val );\r\n\r\n            _Api.register( singularName, function () {\r\n                var ret = val.apply( this, arguments );\r\n\r\n                if ( ret === this ) {\r\n                    // Returned item is the API instance that was passed in, return it\r\n                    return this;\r\n                }\r\n                else if ( ret instanceof _Api ) {\r\n                    // New API instance returned, want the value from the first item\r\n                    // in the returned array for the singular result.\r\n                    return ret.length ?\r\n                        $.isArray( ret[0] ) ?\r\n                            new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'\r\n                            ret[0] :\r\n                        undefined;\r\n                }\r\n\r\n                // Non-API return - just fire it back\r\n                return ret;\r\n            } );\r\n        };\r\n\r\n\r\n        /**\r\n         * Selector for HTML tables. Apply the given selector to the give array of\r\n         * DataTables settings objects.\r\n         *\r\n         * @param {string|integer} [selector] jQuery selector string or integer\r\n         * @param  {array} Array of DataTables settings objects to be filtered\r\n         * @return {array}\r\n         * @ignore\r\n         */\r\n        var __table_selector = function ( selector, a )\r\n        {\r\n            // Integer is used to pick out a table by index\r\n            if ( typeof selector === 'number' ) {\r\n                return [ a[ selector ] ];\r\n            }\r\n\r\n            // Perform a jQuery selector on the table nodes\r\n            var nodes = $.map( a, function (el, i) {\r\n                return el.nTable;\r\n            } );\r\n\r\n            return $(nodes)\r\n                .filter( selector )\r\n                .map( function (i) {\r\n                    // Need to translate back from the table node to the settings\r\n                    var idx = $.inArray( this, nodes );\r\n                    return a[ idx ];\r\n                } )\r\n                .toArray();\r\n        };\r\n\r\n\r\n\r\n        /**\r\n         * Context selector for the API's context (i.e. the tables the API instance\r\n         * refers to.\r\n         *\r\n         * @name    DataTable.Api#tables\r\n         * @param {string|integer} [selector] Selector to pick which tables the iterator\r\n         *   should operate on. If not given, all tables in the current context are\r\n         *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\r\n         *   select multiple tables or as an integer to select a single table.\r\n         * @returns {DataTable.Api} Returns a new API instance if a selector is given.\r\n         */\r\n        _api_register( 'tables()', function ( selector ) {\r\n            // A new instance is created if there was a selector specified\r\n            return selector ?\r\n                new _Api( __table_selector( selector, this.context ) ) :\r\n                this;\r\n        } );\r\n\r\n\r\n        _api_register( 'table()', function ( selector ) {\r\n            var tables = this.tables( selector );\r\n            var ctx = tables.context;\r\n\r\n            // Truncate to the first matched table\r\n            return ctx.length ?\r\n                new _Api( ctx[0] ) :\r\n                tables;\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'tables().nodes()', 'table().node()' , function () {\r\n            return this.iterator( 'table', function ( ctx ) {\r\n                return ctx.nTable;\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'tables().body()', 'table().body()' , function () {\r\n            return this.iterator( 'table', function ( ctx ) {\r\n                return ctx.nTBody;\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'tables().header()', 'table().header()' , function () {\r\n            return this.iterator( 'table', function ( ctx ) {\r\n                return ctx.nTHead;\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'tables().footer()', 'table().footer()' , function () {\r\n            return this.iterator( 'table', function ( ctx ) {\r\n                return ctx.nTFoot;\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'tables().containers()', 'table().container()' , function () {\r\n            return this.iterator( 'table', function ( ctx ) {\r\n                return ctx.nTableWrapper;\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        /**\r\n         * Redraw the tables in the current context.\r\n         *\r\n         * @param {boolean} [reset=true] Reset (default) or hold the current paging\r\n         *   position. A full re-sort and re-filter is performed when this method is\r\n         *   called, which is why the pagination reset is the default action.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'draw()', function ( resetPaging ) {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnReDraw( settings, resetPaging===false );\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        /**\r\n         * Get the current page index.\r\n         *\r\n         * @return {integer} Current page index (zero based)\r\n         *//**\r\n         * Set the current page.\r\n         *\r\n         * Note that if you attempt to show a page which does not exist, DataTables will\r\n         * not throw an error, but rather reset the paging.\r\n         *\r\n         * @param {integer|string} action The paging action to take. This can be one of:\r\n         *  * `integer` - The page index to jump to\r\n         *  * `string` - An action to take:\r\n         *    * `first` - Jump to first page.\r\n         *    * `next` - Jump to the next page\r\n         *    * `previous` - Jump to previous page\r\n         *    * `last` - Jump to the last page.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'page()', function ( action ) {\r\n            if ( action === undefined ) {\r\n                return this.page.info().page; // not an expensive call\r\n            }\r\n\r\n            // else, have an action to take on all tables\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnPageChange( settings, action );\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         * Paging information for the first table in the current context.\r\n         *\r\n         * If you require paging information for another table, use the `table()` method\r\n         * with a suitable selector.\r\n         *\r\n         * @return {object} Object with the following properties set:\r\n         *  * `page` - Current page index (zero based - i.e. the first page is `0`)\r\n         *  * `pages` - Total number of pages\r\n         *  * `start` - Display index for the first record shown on the current page\r\n         *  * `end` - Display index for the last record shown on the current page\r\n         *  * `length` - Display length (number of records). Note that generally `start\r\n         *    + length = end`, but this is not always true, for example if there are\r\n         *    only 2 records to show on the final page, with a length of 10.\r\n         *  * `recordsTotal` - Full data set length\r\n         *  * `recordsDisplay` - Data set length once the current filtering criterion\r\n         *    are applied.\r\n         */\r\n        _api_register( 'page.info()', function ( action ) {\r\n            if ( this.context.length === 0 ) {\r\n                return undefined;\r\n            }\r\n\r\n            var\r\n                settings   = this.context[0],\r\n                start      = settings._iDisplayStart,\r\n                len        = settings._iDisplayLength,\r\n                visRecords = settings.fnRecordsDisplay(),\r\n                all        = len === -1;\r\n\r\n            return {\r\n                \"page\":           all ? 0 : Math.floor( start / len ),\r\n                \"pages\":          all ? 1 : Math.ceil( visRecords / len ),\r\n                \"start\":          start,\r\n                \"end\":            settings.fnDisplayEnd(),\r\n                \"length\":         len,\r\n                \"recordsTotal\":   settings.fnRecordsTotal(),\r\n                \"recordsDisplay\": visRecords\r\n            };\r\n        } );\r\n\r\n\r\n        /**\r\n         * Get the current page length.\r\n         *\r\n         * @return {integer} Current page length. Note `-1` indicates that all records\r\n         *   are to be shown.\r\n         *//**\r\n         * Set the current page length.\r\n         *\r\n         * @param {integer} Page length to set. Use `-1` to show all records.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'page.len()', function ( len ) {\r\n            // Note that we can't call this function 'length()' because `length`\r\n            // is a Javascript property of functions which defines how many arguments\r\n            // the function expects.\r\n            if ( len === undefined ) {\r\n                return this.context.length !== 0 ?\r\n                    this.context[0]._iDisplayLength :\r\n                    undefined;\r\n            }\r\n\r\n            // else, set the page length\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnLengthChange( settings, len );\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        var __reload = function ( settings, holdPosition, callback ) {\r\n            if ( _fnDataSource( settings ) == 'ssp' ) {\r\n                _fnReDraw( settings, holdPosition );\r\n            }\r\n            else {\r\n                // Trigger xhr\r\n                _fnProcessingDisplay( settings, true );\r\n\r\n                _fnBuildAjax( settings, [], function( json ) {\r\n                    _fnClearTable( settings );\r\n\r\n                    var data = _fnAjaxDataSrc( settings, json );\r\n                    for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                        _fnAddData( settings, data[i] );\r\n                    }\r\n\r\n                    _fnReDraw( settings, holdPosition );\r\n                    _fnProcessingDisplay( settings, false );\r\n                } );\r\n            }\r\n\r\n            // Use the draw event to trigger a callback, regardless of if it is an async\r\n            // or sync draw\r\n            if ( callback ) {\r\n                var api = new _Api( settings );\r\n\r\n                api.one( 'draw', function () {\r\n                    callback( api.ajax.json() );\r\n                } );\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * Get the JSON response from the last Ajax request that DataTables made to the\r\n         * server. Note that this returns the JSON from the first table in the current\r\n         * context.\r\n         *\r\n         * @return {object} JSON received from the server.\r\n         */\r\n        _api_register( 'ajax.json()', function () {\r\n            var ctx = this.context;\r\n\r\n            if ( ctx.length > 0 ) {\r\n                return ctx[0].json;\r\n            }\r\n\r\n            // else return undefined;\r\n        } );\r\n\r\n\r\n        /**\r\n         * Get the data submitted in the last Ajax request\r\n         */\r\n        _api_register( 'ajax.params()', function () {\r\n            var ctx = this.context;\r\n\r\n            if ( ctx.length > 0 ) {\r\n                return ctx[0].oAjaxData;\r\n            }\r\n\r\n            // else return undefined;\r\n        } );\r\n\r\n\r\n        /**\r\n         * Reload tables from the Ajax data source. Note that this function will\r\n         * automatically re-draw the table when the remote data has been loaded.\r\n         *\r\n         * @param {boolean} [reset=true] Reset (default) or hold the current paging\r\n         *   position. A full re-sort and re-filter is performed when this method is\r\n         *   called, which is why the pagination reset is the default action.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'ajax.reload()', function ( callback, resetPaging ) {\r\n            return this.iterator( 'table', function (settings) {\r\n                __reload( settings, resetPaging===false, callback );\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         * Get the current Ajax URL. Note that this returns the URL from the first\r\n         * table in the current context.\r\n         *\r\n         * @return {string} Current Ajax source URL\r\n         *//**\r\n         * Set the Ajax URL. Note that this will set the URL for all tables in the\r\n         * current context.\r\n         *\r\n         * @param {string} url URL to set.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'ajax.url()', function ( url ) {\r\n            var ctx = this.context;\r\n\r\n            if ( url === undefined ) {\r\n                // get\r\n                if ( ctx.length === 0 ) {\r\n                    return undefined;\r\n                }\r\n                ctx = ctx[0];\r\n\r\n                return ctx.ajax ?\r\n                    $.isPlainObject( ctx.ajax ) ?\r\n                        ctx.ajax.url :\r\n                        ctx.ajax :\r\n                    ctx.sAjaxSource;\r\n            }\r\n\r\n            // set\r\n            return this.iterator( 'table', function ( settings ) {\r\n                if ( $.isPlainObject( settings.ajax ) ) {\r\n                    settings.ajax.url = url;\r\n                }\r\n                else {\r\n                    settings.ajax = url;\r\n                }\r\n                // No need to consider sAjaxSource here since DataTables gives priority\r\n                // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\r\n                // value of `sAjaxSource` redundant.\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         * Load data from the newly set Ajax URL. Note that this method is only\r\n         * available when `ajax.url()` is used to set a URL. Additionally, this method\r\n         * has the same effect as calling `ajax.reload()` but is provided for\r\n         * convenience when setting a new URL. Like `ajax.reload()` it will\r\n         * automatically redraw the table once the remote data has been loaded.\r\n         *\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'ajax.url().load()', function ( callback, resetPaging ) {\r\n            // Same as a reload, but makes sense to present it for easy access after a\r\n            // url change\r\n            return this.iterator( 'table', function ( ctx ) {\r\n                __reload( ctx, resetPaging===false, callback );\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n\r\n        var _selector_run = function ( selector, select )\r\n        {\r\n            var\r\n                out = [], res,\r\n                a, i, ien, j, jen;\r\n\r\n            // Can't just check for isArray here, as an API or jQuery instance might be\r\n            // given with their array like look\r\n            if ( ! selector || typeof selector === 'string' || selector.length === undefined ) {\r\n                selector = [ selector ];\r\n            }\r\n\r\n            for ( i=0, ien=selector.length ; i<ien ; i++ ) {\r\n                a = selector[i] && selector[i].split ?\r\n                    selector[i].split(',') :\r\n                    [ selector[i] ];\r\n\r\n                for ( j=0, jen=a.length ; j<jen ; j++ ) {\r\n                    res = select( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );\r\n\r\n                    if ( res && res.length ) {\r\n                        out.push.apply( out, res );\r\n                    }\r\n                }\r\n            }\r\n\r\n            return out;\r\n        };\r\n\r\n\r\n        var _selector_opts = function ( opts )\r\n        {\r\n            if ( ! opts ) {\r\n                opts = {};\r\n            }\r\n\r\n            // Backwards compatibility for 1.9- which used the terminology filter rather\r\n            // than search\r\n            if ( opts.filter && ! opts.search ) {\r\n                opts.search = opts.filter;\r\n            }\r\n\r\n            return {\r\n                search: opts.search || 'none',\r\n                order:  opts.order  || 'current',\r\n                page:   opts.page   || 'all'\r\n            };\r\n        };\r\n\r\n\r\n        var _selector_first = function ( inst )\r\n        {\r\n            // Reduce the API instance to the first item found\r\n            for ( var i=0, ien=inst.length ; i<ien ; i++ ) {\r\n                if ( inst[i].length > 0 ) {\r\n                    // Assign the first element to the first item in the instance\r\n                    // and truncate the instance and context\r\n                    inst[0] = inst[i];\r\n                    inst.length = 1;\r\n                    inst.context = [ inst.context[i] ];\r\n\r\n                    return inst;\r\n                }\r\n            }\r\n\r\n            // Not found - return an empty instance\r\n            inst.length = 0;\r\n            return inst;\r\n        };\r\n\r\n\r\n        var _selector_row_indexes = function ( settings, opts )\r\n        {\r\n            var\r\n                i, ien, tmp, a=[],\r\n                displayFiltered = settings.aiDisplay,\r\n                displayMaster = settings.aiDisplayMaster;\r\n\r\n            var\r\n                search = opts.search,  // none, applied, removed\r\n                order  = opts.order,   // applied, current, index (original - compatibility with 1.9)\r\n                page   = opts.page;    // all, current\r\n\r\n            if ( _fnDataSource( settings ) == 'ssp' ) {\r\n                // In server-side processing mode, most options are irrelevant since\r\n                // rows not shown don't exist and the index order is the applied order\r\n                // Removed is a special case - for consistency just return an empty\r\n                // array\r\n                return search === 'removed' ?\r\n                    [] :\r\n                    _range( 0, displayMaster.length );\r\n            }\r\n            else if ( page == 'current' ) {\r\n                // Current page implies that order=current and fitler=applied, since it is\r\n                // fairly senseless otherwise, regardless of what order and search actually\r\n                // are\r\n                for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {\r\n                    a.push( displayFiltered[i] );\r\n                }\r\n            }\r\n            else if ( order == 'current' || order == 'applied' ) {\r\n                a = search == 'none' ?\r\n                    displayMaster.slice() :                      // no search\r\n                    search == 'applied' ?\r\n                        displayFiltered.slice() :                // applied search\r\n                        $.map( displayMaster, function (el, i) { // removed search\r\n                            return $.inArray( el, displayFiltered ) === -1 ? el : null;\r\n                        } );\r\n            }\r\n            else if ( order == 'index' || order == 'original' ) {\r\n                for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n                    if ( search == 'none' ) {\r\n                        a.push( i );\r\n                    }\r\n                    else { // applied | removed\r\n                        tmp = $.inArray( i, displayFiltered );\r\n\r\n                        if ((tmp === -1 && search == 'removed') ||\r\n                            (tmp >= 0   && search == 'applied') )\r\n                        {\r\n                            a.push( i );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return a;\r\n        };\r\n\r\n\r\n        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n         * Rows\r\n         *\r\n         * {}          - no selector - use all available rows\r\n         * {integer}   - row aoData index\r\n         * {node}      - TR node\r\n         * {string}    - jQuery selector to apply to the TR elements\r\n         * {array}     - jQuery array of nodes, or simply an array of TR nodes\r\n         *\r\n         */\r\n\r\n\r\n        var __row_selector = function ( settings, selector, opts )\r\n        {\r\n            return _selector_run( selector, function ( sel ) {\r\n                var selInt = _intVal( sel );\r\n\r\n                // Short cut - selector is a number and no options provided (default is\r\n                // all records, so no need to check if the index is in there, since it\r\n                // must be - dev error if the index doesn't exist).\r\n                if ( selInt !== null && ! opts ) {\r\n                    return [ selInt ];\r\n                }\r\n\r\n                var rows = _selector_row_indexes( settings, opts );\r\n\r\n                if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {\r\n                    // Selector - integer\r\n                    return [ selInt ];\r\n                }\r\n                else if ( ! sel ) {\r\n                    // Selector - none\r\n                    return rows;\r\n                }\r\n\r\n                // Get nodes in the order from the `rows` array (can't use `pluck`) @todo - use pluck_order\r\n                var nodes = [];\r\n                for ( var i=0, ien=rows.length ; i<ien ; i++ ) {\r\n                    nodes.push( settings.aoData[ rows[i] ].nTr );\r\n                }\r\n\r\n                if ( sel.nodeName ) {\r\n                    // Selector - node\r\n                    if ( $.inArray( sel, nodes ) !== -1 ) {\r\n                        return [ sel._DT_RowIndex ];// sel is a TR node that is in the table\r\n                        // and DataTables adds a prop for fast lookup\r\n                    }\r\n                }\r\n\r\n                // Selector - jQuery selector string, array of nodes or jQuery object/\r\n                // As jQuery's .filter() allows jQuery objects to be passed in filter,\r\n                // it also allows arrays, so this will cope with all three options\r\n                return $(nodes)\r\n                    .filter( sel )\r\n                    .map( function () {\r\n                        return this._DT_RowIndex;\r\n                    } )\r\n                    .toArray();\r\n            } );\r\n        };\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_register( 'rows()', function ( selector, opts ) {\r\n            // argument shifting\r\n            if ( selector === undefined ) {\r\n                selector = '';\r\n            }\r\n            else if ( $.isPlainObject( selector ) ) {\r\n                opts = selector;\r\n                selector = '';\r\n            }\r\n\r\n            opts = _selector_opts( opts );\r\n\r\n            var inst = this.iterator( 'table', function ( settings ) {\r\n                return __row_selector( settings, selector, opts );\r\n            } );\r\n\r\n            // Want argument shifting here and in __row_selector?\r\n            inst.selector.rows = selector;\r\n            inst.selector.opts = opts;\r\n\r\n            return inst;\r\n        } );\r\n\r\n\r\n        _api_register( 'rows().nodes()', function () {\r\n            return this.iterator( 'row', function ( settings, row ) {\r\n                return settings.aoData[ row ].nTr || undefined;\r\n            } );\r\n        } );\r\n\r\n        _api_register( 'rows().data()', function () {\r\n            return this.iterator( true, 'rows', function ( settings, rows ) {\r\n                return _pluck_order( settings.aoData, rows, '_aData' );\r\n            } );\r\n        } );\r\n\r\n        _api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {\r\n            return this.iterator( 'row', function ( settings, row ) {\r\n                var r = settings.aoData[ row ];\r\n                return type === 'search' ? r._aFilterData : r._aSortData;\r\n            } );\r\n        } );\r\n\r\n        _api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {\r\n            return this.iterator( 'row', function ( settings, row ) {\r\n                _fnInvalidateRow( settings, row, src );\r\n            } );\r\n        } );\r\n\r\n        _api_registerPlural( 'rows().indexes()', 'row().index()', function () {\r\n            return this.iterator( 'row', function ( settings, row ) {\r\n                return row;\r\n            } );\r\n        } );\r\n\r\n        _api_registerPlural( 'rows().remove()', 'row().remove()', function () {\r\n            var that = this;\r\n\r\n            return this.iterator( 'row', function ( settings, row, thatIdx ) {\r\n                var data = settings.aoData;\r\n\r\n                data.splice( row, 1 );\r\n\r\n                // Update the _DT_RowIndex parameter on all rows in the table\r\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                    if ( data[i].nTr !== null ) {\r\n                        data[i].nTr._DT_RowIndex = i;\r\n                    }\r\n                }\r\n\r\n                // Remove the target row from the search array\r\n                var displayIndex = $.inArray( row, settings.aiDisplay );\r\n\r\n                // Delete from the display arrays\r\n                _fnDeleteIndex( settings.aiDisplayMaster, row );\r\n                _fnDeleteIndex( settings.aiDisplay, row );\r\n                _fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes\r\n\r\n                // Check for an 'overflow' they case for displaying the table\r\n                _fnLengthOverflow( settings );\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( 'rows.add()', function ( rows ) {\r\n            var newRows = this.iterator( 'table', function ( settings ) {\r\n                var row, i, ien;\r\n                var out = [];\r\n\r\n                for ( i=0, ien=rows.length ; i<ien ; i++ ) {\r\n                    row = rows[i];\r\n\r\n                    if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\r\n                        out.push( _fnAddTr( settings, row )[0] );\r\n                    }\r\n                    else {\r\n                        out.push( _fnAddData( settings, row ) );\r\n                    }\r\n                }\r\n\r\n                return out;\r\n            } );\r\n\r\n            // Return an Api.rows() extended instance, so rows().nodes() etc can be used\r\n            var modRows = this.rows( -1 );\r\n            modRows.pop();\r\n            modRows.push.apply( modRows, newRows.toArray() );\r\n\r\n            return modRows;\r\n        } );\r\n\r\n\r\n\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_register( 'row()', function ( selector, opts ) {\r\n            return _selector_first( this.rows( selector, opts ) );\r\n        } );\r\n\r\n\r\n        _api_register( 'row().data()', function ( data ) {\r\n            var ctx = this.context;\r\n\r\n            if ( data === undefined ) {\r\n                // Get\r\n                return ctx.length && this.length ?\r\n                    ctx[0].aoData[ this[0] ]._aData :\r\n                    undefined;\r\n            }\r\n\r\n            // Set\r\n            ctx[0].aoData[ this[0] ]._aData = data;\r\n\r\n            // Automatically invalidate\r\n            _fnInvalidateRow( ctx[0], this[0], 'data' );\r\n\r\n            return this;\r\n        } );\r\n\r\n\r\n        _api_register( 'row().node()', function () {\r\n            var ctx = this.context;\r\n\r\n            return ctx.length && this.length ?\r\n            ctx[0].aoData[ this[0] ].nTr || null :\r\n                null;\r\n        } );\r\n\r\n\r\n        _api_register( 'row.add()', function ( row ) {\r\n            // Allow a jQuery object to be passed in - only a single row is added from\r\n            // it though - the first element in the set\r\n            if ( row instanceof $ && row.length ) {\r\n                row = row[0];\r\n            }\r\n\r\n            var rows = this.iterator( 'table', function ( settings ) {\r\n                if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\r\n                    return _fnAddTr( settings, row )[0];\r\n                }\r\n                return _fnAddData( settings, row );\r\n            } );\r\n\r\n            // Return an Api.rows() extended instance, with the newly added row selected\r\n            return this.row( rows[0] );\r\n        } );\r\n\r\n\r\n\r\n        var __details_add = function ( ctx, row, data, klass )\r\n        {\r\n            // Convert to array of TR elements\r\n            var rows = [];\r\n            var addRow = function ( r, k ) {\r\n                // If we get a TR element, then just add it directly - up to the dev\r\n                // to add the correct number of columns etc\r\n                if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {\r\n                    rows.push( r );\r\n                }\r\n                else {\r\n                    // Otherwise create a row with a wrapper\r\n                    var created = $('<tr><td/></tr>').addClass( k );\r\n                    $('td', created)\r\n                        .addClass( k )\r\n                        .html( r )\r\n                        [0].colSpan = _fnVisbleColumns( ctx );\r\n\r\n                    rows.push( created[0] );\r\n                }\r\n            };\r\n\r\n            if ( $.isArray( data ) || data instanceof $ ) {\r\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                    addRow( data[i], klass );\r\n                }\r\n            }\r\n            else {\r\n                addRow( data, klass );\r\n            }\r\n\r\n            if ( row._details ) {\r\n                row._details.remove();\r\n            }\r\n\r\n            row._details = $(rows);\r\n\r\n            // If the children were already shown, that state should be retained\r\n            if ( row._detailsShow ) {\r\n                row._details.insertAfter( row.nTr );\r\n            }\r\n        };\r\n\r\n\r\n        var __details_remove = function ( api )\r\n        {\r\n            var ctx = api.context;\r\n\r\n            if ( ctx.length && api.length ) {\r\n                var row = ctx[0].aoData[ api[0] ];\r\n\r\n                if ( row._details ) {\r\n                    row._details.remove();\r\n\r\n                    row._detailsShow = undefined;\r\n                    row._details = undefined;\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        var __details_display = function ( api, show ) {\r\n            var ctx = api.context;\r\n\r\n            if ( ctx.length && api.length ) {\r\n                var row = ctx[0].aoData[ api[0] ];\r\n\r\n                if ( row._details ) {\r\n                    row._detailsShow = show;\r\n\r\n                    if ( show ) {\r\n                        row._details.insertAfter( row.nTr );\r\n                    }\r\n                    else {\r\n                        row._details.detach();\r\n                    }\r\n\r\n                    __details_events( ctx[0] );\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        var __details_events = function ( settings )\r\n        {\r\n            var api = new _Api( settings );\r\n            var namespace = '.dt.DT_details';\r\n            var drawEvent = 'draw'+namespace;\r\n            var colvisEvent = 'column-visibility'+namespace;\r\n            var destroyEvent = 'destroy'+namespace;\r\n            var data = settings.aoData;\r\n\r\n            api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );\r\n\r\n            if ( _pluck( data, '_details' ).length > 0 ) {\r\n                // On each draw, insert the required elements into the document\r\n                api.on( drawEvent, function ( e, ctx ) {\r\n                    if ( settings !== ctx ) {\r\n                        return;\r\n                    }\r\n\r\n                    api.rows( {page:'current'} ).eq(0).each( function (idx) {\r\n                        // Internal data grab\r\n                        var row = data[ idx ];\r\n\r\n                        if ( row._detailsShow ) {\r\n                            row._details.insertAfter( row.nTr );\r\n                        }\r\n                    } );\r\n                } );\r\n\r\n                // Column visibility change - update the colspan\r\n                api.on( colvisEvent, function ( e, ctx, idx, vis ) {\r\n                    if ( settings !== ctx ) {\r\n                        return;\r\n                    }\r\n\r\n                    // Update the colspan for the details rows (note, only if it already has\r\n                    // a colspan)\r\n                    var row, visible = _fnVisbleColumns( ctx );\r\n\r\n                    for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                        row = data[i];\r\n\r\n                        if ( row._details ) {\r\n                            row._details.children('td[colspan]').attr('colspan', visible );\r\n                        }\r\n                    }\r\n                } );\r\n\r\n                // Table destroyed - nuke any child rows\r\n                api.on( destroyEvent, function ( e, ctx ) {\r\n                    if ( settings !== ctx ) {\r\n                        return;\r\n                    }\r\n\r\n                    for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                        if ( data[i]._details ) {\r\n                            __details_remove( data[i] );\r\n                        }\r\n                    }\r\n                } );\r\n            }\r\n        };\r\n\r\n        // Strings for the method names to help minification\r\n        var _emp = '';\r\n        var _child_obj = _emp+'row().child';\r\n        var _child_mth = _child_obj+'()';\r\n\r\n        // data can be:\r\n        //  tr\r\n        //  string\r\n        //  jQuery or array of any of the above\r\n        _api_register( _child_mth, function ( data, klass ) {\r\n            var ctx = this.context;\r\n\r\n            if ( data === undefined ) {\r\n                // get\r\n                return ctx.length && this.length ?\r\n                    ctx[0].aoData[ this[0] ]._details :\r\n                    undefined;\r\n            }\r\n            else if ( data === true ) {\r\n                // show\r\n                this.child.show();\r\n            }\r\n            else if ( data === false ) {\r\n                // remove\r\n                __details_remove( this );\r\n            }\r\n            else if ( ctx.length && this.length ) {\r\n                // set\r\n                __details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );\r\n            }\r\n\r\n            return this;\r\n        } );\r\n\r\n\r\n        _api_register( [\r\n            _child_obj+'.show()',\r\n            _child_mth+'.show()' // only when `child()` was called with parameters (without\r\n        ], function ( show ) {   // it returns an object and this method is not executed)\r\n            __details_display( this, true );\r\n            return this;\r\n        } );\r\n\r\n\r\n        _api_register( [\r\n            _child_obj+'.hide()',\r\n            _child_mth+'.hide()' // only when `child()` was called with parameters (without\r\n        ], function () {         // it returns an object and this method is not executed)\r\n            __details_display( this, false );\r\n            return this;\r\n        } );\r\n\r\n\r\n        _api_register( [\r\n            _child_obj+'.remove()',\r\n            _child_mth+'.remove()' // only when `child()` was called with parameters (without\r\n        ], function () {           // it returns an object and this method is not executed)\r\n            __details_remove( this );\r\n            return this;\r\n        } );\r\n\r\n\r\n        _api_register( _child_obj+'.isShown()', function () {\r\n            var ctx = this.context;\r\n\r\n            if ( ctx.length && this.length ) {\r\n                // _detailsShown as false or undefined will fall through to return false\r\n                return ctx[0].aoData[ this[0] ]._detailsShow || false;\r\n            }\r\n            return false;\r\n        } );\r\n\r\n\r\n\r\n        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n         * Columns\r\n         *\r\n         * {integer}           - column index (>=0 count from left, <0 count from right)\r\n         * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\r\n         * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\r\n         * \"{string}:name\"     - column name\r\n         * \"{string}\"          - jQuery selector on column header nodes\r\n         *\r\n         */\r\n\r\n        // can be an array of these items, comma separated list, or an array of comma\r\n        // separated lists\r\n\r\n        var __re_column_selector = /^(.+):(name|visIdx|visible)$/;\r\n\r\n        var __column_selector = function ( settings, selector, opts )\r\n        {\r\n            var\r\n                columns = settings.aoColumns,\r\n                names = _pluck( columns, 'sName' ),\r\n                nodes = _pluck( columns, 'nTh' );\r\n\r\n            return _selector_run( selector, function ( s ) {\r\n                var selInt = _intVal( s );\r\n\r\n                if ( s === '' ) {\r\n                    // All columns\r\n                    return _range( columns.length );\r\n                }\r\n                else if ( selInt !== null ) {\r\n                    // Integer selector\r\n                    return [ selInt >= 0 ?\r\n                        selInt : // Count from left\r\n                    columns.length + selInt // Count from right (+ because its a negative value)\r\n                    ];\r\n                }\r\n                else {\r\n                    var match = typeof s === 'string' ?\r\n                        s.match( __re_column_selector ) :\r\n                        '';\r\n\r\n                    if ( match ) {\r\n                        switch( match[2] ) {\r\n                            case 'visIdx':\r\n                            case 'visible':\r\n                                var idx = parseInt( match[1], 10 );\r\n                                // Visible index given, convert to column index\r\n                                if ( idx < 0 ) {\r\n                                    // Counting from the right\r\n                                    var visColumns = $.map( columns, function (col,i) {\r\n                                        return col.bVisible ? i : null;\r\n                                    } );\r\n                                    return [ visColumns[ visColumns.length + idx ] ];\r\n                                }\r\n                                // Counting from the left\r\n                                return [ _fnVisibleToColumnIndex( settings, idx ) ];\r\n\r\n                            case 'name':\r\n                                // match by name. `names` is column index complete and in order\r\n                                return $.map( names, function (name, i) {\r\n                                    return name === match[1] ? i : null;\r\n                                } );\r\n                        }\r\n                    }\r\n                    else {\r\n                        // jQuery selector on the TH elements for the columns\r\n                        return $( nodes )\r\n                            .filter( s )\r\n                            .map( function () {\r\n                                return $.inArray( this, nodes ); // `nodes` is column index complete and in order\r\n                            } )\r\n                            .toArray();\r\n                    }\r\n                }\r\n            } );\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n        var __setColumnVis = function ( settings, column, vis, recalc ) {\r\n            var\r\n                cols = settings.aoColumns,\r\n                col  = cols[ column ],\r\n                data = settings.aoData,\r\n                row, cells, i, ien, tr;\r\n\r\n            // Get\r\n            if ( vis === undefined ) {\r\n                return col.bVisible;\r\n            }\r\n\r\n            // Set\r\n            // No change\r\n            if ( col.bVisible === vis ) {\r\n                return;\r\n            }\r\n\r\n            if ( vis ) {\r\n                // Insert column\r\n                // Need to decide if we should use appendChild or insertBefore\r\n                var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );\r\n\r\n                for ( i=0, ien=data.length ; i<ien ; i++ ) {\r\n                    tr = data[i].nTr;\r\n                    cells = data[i].anCells;\r\n\r\n                    if ( tr ) {\r\n                        // insertBefore can act like appendChild if 2nd arg is null\r\n                        tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Remove column\r\n                $( _pluck( settings.aoData, 'anCells', column ) ).detach();\r\n            }\r\n\r\n            // Common actions\r\n            col.bVisible = vis;\r\n            _fnDrawHead( settings, settings.aoHeader );\r\n            _fnDrawHead( settings, settings.aoFooter );\r\n\r\n            if ( recalc === undefined || recalc ) {\r\n                // Automatically adjust column sizing\r\n                _fnAdjustColumnSizing( settings );\r\n\r\n                // Realign columns for scrolling\r\n                if ( settings.oScroll.sX || settings.oScroll.sY ) {\r\n                    _fnScrollDraw( settings );\r\n                }\r\n            }\r\n\r\n            _fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis] );\r\n\r\n            _fnSaveState( settings );\r\n        };\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_register( 'columns()', function ( selector, opts ) {\r\n            // argument shifting\r\n            if ( selector === undefined ) {\r\n                selector = '';\r\n            }\r\n            else if ( $.isPlainObject( selector ) ) {\r\n                opts = selector;\r\n                selector = '';\r\n            }\r\n\r\n            opts = _selector_opts( opts );\r\n\r\n            var inst = this.iterator( 'table', function ( settings ) {\r\n                return __column_selector( settings, selector, opts );\r\n            } );\r\n\r\n            // Want argument shifting here and in _row_selector?\r\n            inst.selector.cols = selector;\r\n            inst.selector.opts = opts;\r\n\r\n            return inst;\r\n        } );\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {\r\n            return this.iterator( 'column', function ( settings, column ) {\r\n                return settings.aoColumns[column].nTh;\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {\r\n            return this.iterator( 'column', function ( settings, column ) {\r\n                return settings.aoColumns[column].nTf;\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_registerPlural( 'columns().data()', 'column().data()', function () {\r\n            return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\r\n                var a = [];\r\n                for ( var row=0, ien=rows.length ; row<ien ; row++ ) {\r\n                    a.push( _fnGetCellData( settings, rows[row], column, '' ) );\r\n                }\r\n                return a;\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {\r\n            return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\r\n                return _pluck_order( settings.aoData, rows,\r\n                    type === 'search' ? '_aFilterData' : '_aSortData', column\r\n                );\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {\r\n            return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\r\n                return _pluck_order( settings.aoData, rows, 'anCells', column ) ;\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        _api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {\r\n            return this.iterator( 'column', function ( settings, column ) {\r\n                return vis === undefined ?\r\n                    settings.aoColumns[ column ].bVisible :\r\n                    __setColumnVis( settings, column, vis, calc );\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        _api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {\r\n            return this.iterator( 'column', function ( settings, column ) {\r\n                return type === 'visible' ?\r\n                    _fnColumnIndexToVisible( settings, column ) :\r\n                    column;\r\n            } );\r\n        } );\r\n\r\n\r\n        // _api_register( 'columns().show()', function () {\r\n        // \tvar selector = this.selector;\r\n        // \treturn this.columns( selector.cols, selector.opts ).visible( true );\r\n        // } );\r\n\r\n\r\n        // _api_register( 'columns().hide()', function () {\r\n        // \tvar selector = this.selector;\r\n        // \treturn this.columns( selector.cols, selector.opts ).visible( false );\r\n        // } );\r\n\r\n\r\n\r\n        _api_register( 'columns.adjust()', function () {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnAdjustColumnSizing( settings );\r\n            } );\r\n        } );\r\n\r\n\r\n        // Convert from one column index type, to another type\r\n        _api_register( 'column.index()', function ( type, idx ) {\r\n            if ( this.context.length !== 0 ) {\r\n                var ctx = this.context[0];\r\n\r\n                if ( type === 'fromVisible' || type === 'toData' ) {\r\n                    return _fnVisibleToColumnIndex( ctx, idx );\r\n                }\r\n                else if ( type === 'fromData' || type === 'toVisible' ) {\r\n                    return _fnColumnIndexToVisible( ctx, idx );\r\n                }\r\n            }\r\n        } );\r\n\r\n\r\n        _api_register( 'column()', function ( selector, opts ) {\r\n            return _selector_first( this.columns( selector, opts ) );\r\n        } );\r\n\r\n\r\n\r\n\r\n        var __cell_selector = function ( settings, selector, opts )\r\n        {\r\n            var data = settings.aoData;\r\n            var rows = _selector_row_indexes( settings, opts );\r\n            var cells = _pluck_order( data, rows, 'anCells' );\r\n            var allCells = $( [].concat.apply([], cells) );\r\n            var row;\r\n            var columns = settings.aoColumns.length;\r\n            var a, i, ien, j;\r\n\r\n            return _selector_run( selector, function ( s ) {\r\n                if ( s === null || s === undefined ) {\r\n                    // All cells\r\n                    a = [];\r\n\r\n                    for ( i=0, ien=rows.length ; i<ien ; i++ ) {\r\n                        row = rows[i];\r\n\r\n                        for ( j=0 ; j<columns ; j++ ) {\r\n                            a.push( {\r\n                                row: row,\r\n                                column: j\r\n                            } );\r\n                        }\r\n                    }\r\n\r\n                    return a;\r\n                }\r\n                else if ( $.isPlainObject( s ) ) {\r\n                    return [s];\r\n                }\r\n\r\n                // jQuery filtered cells\r\n                return allCells\r\n                    .filter( s )\r\n                    .map( function (i, el) {\r\n                        row = el.parentNode._DT_RowIndex;\r\n\r\n                        return {\r\n                            row: row,\r\n                            column: $.inArray( el, data[ row ].anCells )\r\n                        };\r\n                    } )\r\n                    .toArray();\r\n            } );\r\n        };\r\n\r\n\r\n\r\n\r\n        _api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {\r\n            // Argument shifting\r\n            if ( $.isPlainObject( rowSelector ) ) {\r\n                // Indexes\r\n                if ( typeof rowSelector.row !== undefined ) {\r\n                    opts = columnSelector;\r\n                    columnSelector = null;\r\n                }\r\n                else {\r\n                    opts = rowSelector;\r\n                    rowSelector = null;\r\n                }\r\n            }\r\n            if ( $.isPlainObject( columnSelector ) ) {\r\n                opts = columnSelector;\r\n                columnSelector = null;\r\n            }\r\n\r\n            // Cell selector\r\n            if ( columnSelector === null || columnSelector === undefined ) {\r\n                return this.iterator( 'table', function ( settings ) {\r\n                    return __cell_selector( settings, rowSelector, _selector_opts( opts ) );\r\n                } );\r\n            }\r\n\r\n            // Row + column selector\r\n            var columns = this.columns( columnSelector, opts );\r\n            var rows = this.rows( rowSelector, opts );\r\n            var a, i, ien, j, jen;\r\n\r\n            var cells = this.iterator( 'table', function ( settings, idx ) {\r\n                a = [];\r\n\r\n                for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {\r\n                    for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {\r\n                        a.push( {\r\n                            row:    rows[idx][i],\r\n                            column: columns[idx][j]\r\n                        } );\r\n                    }\r\n                }\r\n\r\n                return a;\r\n            } );\r\n\r\n            $.extend( cells.selector, {\r\n                cols: columnSelector,\r\n                rows: rowSelector,\r\n                opts: opts\r\n            } );\r\n\r\n            return cells;\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'cells().nodes()', 'cell().node()', function () {\r\n            return this.iterator( 'cell', function ( settings, row, column ) {\r\n                return settings.aoData[ row ].anCells[ column ];\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( 'cells().data()', function () {\r\n            return this.iterator( 'cell', function ( settings, row, column ) {\r\n                return _fnGetCellData( settings, row, column );\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {\r\n            type = type === 'search' ? '_aFilterData' : '_aSortData';\r\n\r\n            return this.iterator( 'cell', function ( settings, row, column ) {\r\n                return settings.aoData[ row ][ type ][ column ];\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'cells().indexes()', 'cell().index()', function () {\r\n            return this.iterator( 'cell', function ( settings, row, column ) {\r\n                return {\r\n                    row: row,\r\n                    column: column,\r\n                    columnVisible: _fnColumnIndexToVisible( settings, column )\r\n                };\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( [\r\n            'cells().invalidate()',\r\n            'cell().invalidate()'\r\n        ], function ( src ) {\r\n            var selector = this.selector;\r\n\r\n            // Use the rows method of the instance to perform the invalidation, rather\r\n            // than doing it here. This avoids needing to handle duplicate rows from\r\n            // the cells.\r\n            this.rows( selector.rows, selector.opts ).invalidate( src );\r\n\r\n            return this;\r\n        } );\r\n\r\n\r\n\r\n\r\n        _api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {\r\n            return _selector_first( this.cells( rowSelector, columnSelector, opts ) );\r\n        } );\r\n\r\n\r\n\r\n        _api_register( 'cell().data()', function ( data ) {\r\n            var ctx = this.context;\r\n            var cell = this[0];\r\n\r\n            if ( data === undefined ) {\r\n                // Get\r\n                return ctx.length && cell.length ?\r\n                    _fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :\r\n                    undefined;\r\n            }\r\n\r\n            // Set\r\n            _fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );\r\n            _fnInvalidateRow( ctx[0], cell[0].row, 'data', cell[0].column );\r\n\r\n            return this;\r\n        } );\r\n\r\n\r\n\r\n        /**\r\n         * Get current ordering (sorting) that has been applied to the table.\r\n         *\r\n         * @returns {array} 2D array containing the sorting information for the first\r\n         *   table in the current context. Each element in the parent array represents\r\n         *   a column being sorted upon (i.e. multi-sorting with two columns would have\r\n         *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\r\n         *   the column index that the sorting condition applies to, the second is the\r\n         *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\r\n         *   index of the sorting order from the `column.sorting` initialisation array.\r\n         *//**\r\n         * Set the ordering for the table.\r\n         *\r\n         * @param {integer} order Column index to sort upon.\r\n         * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\r\n         * @returns {DataTables.Api} this\r\n         *//**\r\n         * Set the ordering for the table.\r\n         *\r\n         * @param {array} order 1D array of sorting information to be applied.\r\n         * @param {array} [...] Optional additional sorting conditions\r\n         * @returns {DataTables.Api} this\r\n         *//**\r\n         * Set the ordering for the table.\r\n         *\r\n         * @param {array} order 2D array of sorting information to be applied.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'order()', function ( order, dir ) {\r\n            var ctx = this.context;\r\n\r\n            if ( order === undefined ) {\r\n                // get\r\n                return ctx.length !== 0 ?\r\n                    ctx[0].aaSorting :\r\n                    undefined;\r\n            }\r\n\r\n            // set\r\n            if ( typeof order === 'number' ) {\r\n                // Simple column / direction passed in\r\n                order = [ [ order, dir ] ];\r\n            }\r\n            else if ( ! $.isArray( order[0] ) ) {\r\n                // Arguments passed in (list of 1D arrays)\r\n                order = Array.prototype.slice.call( arguments );\r\n            }\r\n            // otherwise a 2D array was passed in\r\n\r\n            return this.iterator( 'table', function ( settings ) {\r\n                settings.aaSorting = order.slice();\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         * Attach a sort listener to an element for a given column\r\n         *\r\n         * @param {node|jQuery|string} node Identifier for the element(s) to attach the\r\n         *   listener to. This can take the form of a single DOM node, a jQuery\r\n         *   collection of nodes or a jQuery selector which will identify the node(s).\r\n         * @param {integer} column the column that a click on this node will sort on\r\n         * @param {function} [callback] callback function when sort is run\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'order.listener()', function ( node, column, callback ) {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnSortAttachListener( settings, node, column, callback );\r\n            } );\r\n        } );\r\n\r\n\r\n        // Order by the selected column(s)\r\n        _api_register( [\r\n            'columns().order()',\r\n            'column().order()'\r\n        ], function ( dir ) {\r\n            var that = this;\r\n\r\n            return this.iterator( 'table', function ( settings, i ) {\r\n                var sort = [];\r\n\r\n                $.each( that[i], function (j, col) {\r\n                    sort.push( [ col, dir ] );\r\n                } );\r\n\r\n                settings.aaSorting = sort;\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        _api_register( 'search()', function ( input, regex, smart, caseInsen ) {\r\n            var ctx = this.context;\r\n\r\n            if ( input === undefined ) {\r\n                // get\r\n                return ctx.length !== 0 ?\r\n                    ctx[0].oPreviousSearch.sSearch :\r\n                    undefined;\r\n            }\r\n\r\n            // set\r\n            return this.iterator( 'table', function ( settings ) {\r\n                if ( ! settings.oFeatures.bFilter ) {\r\n                    return;\r\n                }\r\n\r\n                _fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {\r\n                    \"sSearch\": input+\"\",\r\n                    \"bRegex\":  regex === null ? false : regex,\r\n                    \"bSmart\":  smart === null ? true  : smart,\r\n                    \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\r\n                } ), 1 );\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural(\r\n            'columns().search()',\r\n            'column().search()',\r\n            function ( input, regex, smart, caseInsen ) {\r\n                return this.iterator( 'column', function ( settings, column ) {\r\n                    var preSearch = settings.aoPreSearchCols;\r\n\r\n                    if ( input === undefined ) {\r\n                        // get\r\n                        return preSearch[ column ].sSearch;\r\n                    }\r\n\r\n                    // set\r\n                    if ( ! settings.oFeatures.bFilter ) {\r\n                        return;\r\n                    }\r\n\r\n                    $.extend( preSearch[ column ], {\r\n                        \"sSearch\": input+\"\",\r\n                        \"bRegex\":  regex === null ? false : regex,\r\n                        \"bSmart\":  smart === null ? true  : smart,\r\n                        \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\r\n                    } );\r\n\r\n                    _fnFilterComplete( settings, settings.oPreviousSearch, 1 );\r\n                } );\r\n            }\r\n        );\r\n\r\n        /*\r\n         * State API methods\r\n         */\r\n\r\n        _api_register( 'state()', function () {\r\n            return this.context.length ?\r\n                this.context[0].oSavedState :\r\n                null;\r\n        } );\r\n\r\n\r\n        _api_register( 'state.clear()', function () {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                // Save an empty object\r\n                settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( 'state.loaded()', function () {\r\n            return this.context.length ?\r\n                this.context[0].oLoadedState :\r\n                null;\r\n        } );\r\n\r\n\r\n        _api_register( 'state.save()', function () {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnSaveState( settings );\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        /**\r\n         * Provide a common method for plug-ins to check the version of DataTables being\r\n         * used, in order to ensure compatibility.\r\n         *\r\n         *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\r\n         *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\r\n         *  @returns {boolean} true if this version of DataTables is greater or equal to\r\n         *    the required version, or false if this version of DataTales is not\r\n         *    suitable\r\n         *  @static\r\n         *  @dtopt API-Static\r\n         *\r\n         *  @example\r\n         *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\r\n         */\r\n        DataTable.versionCheck = DataTable.fnVersionCheck = function( version )\r\n        {\r\n            var aThis = DataTable.version.split('.');\r\n            var aThat = version.split('.');\r\n            var iThis, iThat;\r\n\r\n            for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {\r\n                iThis = parseInt( aThis[i], 10 ) || 0;\r\n                iThat = parseInt( aThat[i], 10 ) || 0;\r\n\r\n                // Parts are the same, keep comparing\r\n                if (iThis === iThat) {\r\n                    continue;\r\n                }\r\n\r\n                // Parts are different, return immediately\r\n                return iThis > iThat;\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n\r\n        /**\r\n         * Check if a `<table>` node is a DataTable table already or not.\r\n         *\r\n         *  @param {node|jquery|string} table Table node, jQuery object or jQuery\r\n         *      selector for the table to test. Note that if more than more than one\r\n         *      table is passed on, only the first will be checked\r\n         *  @returns {boolean} true the table given is a DataTable, or false otherwise\r\n         *  @static\r\n         *  @dtopt API-Static\r\n         *\r\n         *  @example\r\n         *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\r\n\t *      $('#example').dataTable();\r\n\t *    }\r\n         */\r\n        DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )\r\n        {\r\n            var t = $(table).get(0);\r\n            var is = false;\r\n\r\n            $.each( DataTable.settings, function (i, o) {\r\n                if ( o.nTable === t || o.nScrollHead === t || o.nScrollFoot === t ) {\r\n                    is = true;\r\n                }\r\n            } );\r\n\r\n            return is;\r\n        };\r\n\r\n\r\n        /**\r\n         * Get all DataTable tables that have been initialised - optionally you can\r\n         * select to get only currently visible tables.\r\n         *\r\n         *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\r\n         *    or visible tables only.\r\n         *  @returns {array} Array of `table` nodes (not DataTable instances) which are\r\n         *    DataTables\r\n         *  @static\r\n         *  @dtopt API-Static\r\n         *\r\n         *  @example\r\n         *    $.each( $.fn.dataTable.tables(true), function () {\r\n\t *      $(table).DataTable().columns.adjust();\r\n\t *    } );\r\n         */\r\n        DataTable.tables = DataTable.fnTables = function ( visible )\r\n        {\r\n            return jQuery.map( DataTable.settings, function (o) {\r\n                if ( !visible || (visible && $(o.nTable).is(':visible')) ) {\r\n                    return o.nTable;\r\n                }\r\n            } );\r\n        };\r\n\r\n\r\n        /**\r\n         * Convert from camel case parameters to Hungarian notation. This is made public\r\n         * for the extensions to provide the same ability as DataTables core to accept\r\n         * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\r\n         * parameters.\r\n         *\r\n         *  @param {object} src The model object which holds all parameters that can be\r\n         *    mapped.\r\n         *  @param {object} user The object to convert from camel case to Hungarian.\r\n         *  @param {boolean} force When set to `true`, properties which already have a\r\n         *    Hungarian value in the `user` object will be overwritten. Otherwise they\r\n         *    won't be.\r\n         */\r\n        DataTable.camelToHungarian = _fnCamelToHungarian;\r\n\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_register( '$()', function ( selector, opts ) {\r\n            var\r\n                rows   = this.rows( opts ).nodes(), // Get all rows\r\n                jqRows = $(rows);\r\n\r\n            return $( [].concat(\r\n                jqRows.filter( selector ).toArray(),\r\n                jqRows.find( selector ).toArray()\r\n            ) );\r\n        } );\r\n\r\n\r\n        // jQuery functions to operate on the tables\r\n        $.each( [ 'on', 'one', 'off' ], function (i, key) {\r\n            _api_register( key+'()', function ( /* event, handler */ ) {\r\n                var args = Array.prototype.slice.call(arguments);\r\n\r\n                // Add the `dt` namespace automatically if it isn't already present\r\n                if ( ! args[0].match(/\\.dt\\b/) ) {\r\n                    args[0] += '.dt';\r\n                }\r\n\r\n                var inst = $( this.tables().nodes() );\r\n                inst[key].apply( inst, args );\r\n                return this;\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( 'clear()', function () {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnClearTable( settings );\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( 'settings()', function () {\r\n            return new _Api( this.context, this.context );\r\n        } );\r\n\r\n\r\n        _api_register( 'data()', function () {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                return _pluck( settings.aoData, '_aData' );\r\n            } ).flatten();\r\n        } );\r\n\r\n\r\n        _api_register( 'destroy()', function ( remove ) {\r\n            remove = remove || false;\r\n\r\n            return this.iterator( 'table', function ( settings ) {\r\n                var orig      = settings.nTableWrapper.parentNode;\r\n                var classes   = settings.oClasses;\r\n                var table     = settings.nTable;\r\n                var tbody     = settings.nTBody;\r\n                var thead     = settings.nTHead;\r\n                var tfoot     = settings.nTFoot;\r\n                var jqTable   = $(table);\r\n                var jqTbody   = $(tbody);\r\n                var jqWrapper = $(settings.nTableWrapper);\r\n                var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );\r\n                var i, ien;\r\n\r\n                // Flag to note that the table is currently being destroyed - no action\r\n                // should be taken\r\n                settings.bDestroying = true;\r\n\r\n                // Fire off the destroy callbacks for plug-ins etc\r\n                _fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings] );\r\n\r\n                // If not being removed from the document, make all columns visible\r\n                if ( ! remove ) {\r\n                    new _Api( settings ).columns().visible( true );\r\n                }\r\n\r\n                // Blitz all `DT` namespaced events (these are internal events, the\r\n                // lowercase, `dt` events are user subscribed and they are responsible\r\n                // for removing them\r\n                jqWrapper.unbind('.DT').find(':not(tbody *)').unbind('.DT');\r\n                $(window).unbind('.DT-'+settings.sInstance);\r\n\r\n                // When scrolling we had to break the table up - restore it\r\n                if ( table != thead.parentNode ) {\r\n                    jqTable.children('thead').detach();\r\n                    jqTable.append( thead );\r\n                }\r\n\r\n                if ( tfoot && table != tfoot.parentNode ) {\r\n                    jqTable.children('tfoot').detach();\r\n                    jqTable.append( tfoot );\r\n                }\r\n\r\n                // Remove the DataTables generated nodes, events and classes\r\n                jqTable.detach();\r\n                jqWrapper.detach();\r\n\r\n                settings.aaSorting = [];\r\n                settings.aaSortingFixed = [];\r\n                _fnSortingClasses( settings );\r\n\r\n                $( rows ).removeClass( settings.asStripeClasses.join(' ') );\r\n\r\n                $('th, td', thead).removeClass( classes.sSortable+' '+\r\n                    classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone\r\n                );\r\n\r\n                if ( settings.bJUI ) {\r\n                    $('th span.'+classes.sSortIcon+ ', td span.'+classes.sSortIcon, thead).detach();\r\n                    $('th, td', thead).each( function () {\r\n                        var wrapper = $('div.'+classes.sSortJUIWrapper, this);\r\n                        $(this).append( wrapper.contents() );\r\n                        wrapper.detach();\r\n                    } );\r\n                }\r\n\r\n                if ( ! remove && orig ) {\r\n                    // insertBefore acts like appendChild if !arg[1]\r\n                    orig.insertBefore( table, settings.nTableReinsertBefore );\r\n                }\r\n\r\n                // Add the TR elements back into the table in their original order\r\n                jqTbody.children().detach();\r\n                jqTbody.append( rows );\r\n\r\n                // Restore the width of the original table - was read from the style property,\r\n                // so we can restore directly to that\r\n                jqTable\r\n                    .css( 'width', settings.sDestroyWidth )\r\n                    .removeClass( classes.sTable );\r\n\r\n                // If the were originally stripe classes - then we add them back here.\r\n                // Note this is not fool proof (for example if not all rows had stripe\r\n                // classes - but it's a good effort without getting carried away\r\n                ien = settings.asDestroyStripes.length;\r\n\r\n                if ( ien ) {\r\n                    jqTbody.children().each( function (i) {\r\n                        $(this).addClass( settings.asDestroyStripes[i % ien] );\r\n                    } );\r\n                }\r\n\r\n                /* Remove the settings object from the settings array */\r\n                var idx = $.inArray( settings, DataTable.settings );\r\n                if ( idx !== -1 ) {\r\n                    DataTable.settings.splice( idx, 1 );\r\n                }\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         * Version string for plug-ins to check compatibility. Allowed format is\r\n         * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\r\n         * only for non-release builds. See http://semver.org/ for more information.\r\n         *  @member\r\n         *  @type string\r\n         *  @default Version number\r\n         */\r\n        DataTable.version = \"1.10.2\";\r\n\r\n        /**\r\n         * Private data store, containing all of the settings objects that are\r\n         * created for the tables on a given page.\r\n         *\r\n         * Note that the `DataTable.settings` object is aliased to\r\n         * `jQuery.fn.dataTableExt` through which it may be accessed and\r\n         * manipulated, or `jQuery.fn.dataTable.settings`.\r\n         *  @member\r\n         *  @type array\r\n         *  @default []\r\n         *  @private\r\n         */\r\n        DataTable.settings = [];\r\n\r\n        /**\r\n         * Object models container, for the various models that DataTables has\r\n         * available to it. These models define the objects that are used to hold\r\n         * the active state and configuration of the table.\r\n         *  @namespace\r\n         */\r\n        DataTable.models = {};\r\n\r\n\r\n\r\n        /**\r\n         * Template object for the way in which DataTables holds information about\r\n         * search information for the global filter and individual column filters.\r\n         *  @namespace\r\n         */\r\n        DataTable.models.oSearch = {\r\n            /**\r\n             * Flag to indicate if the filtering should be case insensitive or not\r\n             *  @type boolean\r\n             *  @default true\r\n             */\r\n            \"bCaseInsensitive\": true,\r\n\r\n            /**\r\n             * Applied search term\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             */\r\n            \"sSearch\": \"\",\r\n\r\n            /**\r\n             * Flag to indicate if the search term should be interpreted as a\r\n             * regular expression (true) or not (false) and therefore and special\r\n             * regex characters escaped.\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bRegex\": false,\r\n\r\n            /**\r\n             * Flag to indicate if DataTables is to use its smart filtering or not.\r\n             *  @type boolean\r\n             *  @default true\r\n             */\r\n            \"bSmart\": true\r\n        };\r\n\r\n\r\n\r\n\r\n        /**\r\n         * Template object for the way in which DataTables holds information about\r\n         * each individual row. This is the object format used for the settings\r\n         * aoData array.\r\n         *  @namespace\r\n         */\r\n        DataTable.models.oRow = {\r\n            /**\r\n             * TR element for the row\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTr\": null,\r\n\r\n            /**\r\n             * Array of TD elements for each row. This is null until the row has been\r\n             * created.\r\n             *  @type array nodes\r\n             *  @default []\r\n             */\r\n            \"anCells\": null,\r\n\r\n            /**\r\n             * Data object from the original data source for the row. This is either\r\n             * an array if using the traditional form of DataTables, or an object if\r\n             * using mData options. The exact type will depend on the passed in\r\n             * data from the data source, or will be an array if using DOM a data\r\n             * source.\r\n             *  @type array|object\r\n             *  @default []\r\n             */\r\n            \"_aData\": [],\r\n\r\n            /**\r\n             * Sorting data cache - this array is ostensibly the same length as the\r\n             * number of columns (although each index is generated only as it is\r\n             * needed), and holds the data that is used for sorting each column in the\r\n             * row. We do this cache generation at the start of the sort in order that\r\n             * the formatting of the sort data need be done only once for each cell\r\n             * per sort. This array should not be read from or written to by anything\r\n             * other than the master sorting methods.\r\n             *  @type array\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"_aSortData\": null,\r\n\r\n            /**\r\n             * Per cell filtering data cache. As per the sort data cache, used to\r\n             * increase the performance of the filtering in DataTables\r\n             *  @type array\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"_aFilterData\": null,\r\n\r\n            /**\r\n             * Filtering data cache. This is the same as the cell filtering cache, but\r\n             * in this case a string rather than an array. This is easily computed with\r\n             * a join on `_aFilterData`, but is provided as a cache so the join isn't\r\n             * needed on every search (memory traded for performance)\r\n             *  @type array\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"_sFilterRow\": null,\r\n\r\n            /**\r\n             * Cache of the class name that DataTables has applied to the row, so we\r\n             * can quickly look at this variable rather than needing to do a DOM check\r\n             * on className for the nTr property.\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             *  @private\r\n             */\r\n            \"_sRowStripe\": \"\",\r\n\r\n            /**\r\n             * Denote if the original data source was from the DOM, or the data source\r\n             * object. This is used for invalidating data, so DataTables can\r\n             * automatically read data from the original source, unless uninstructed\r\n             * otherwise.\r\n             *  @type string\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"src\": null\r\n        };\r\n\r\n\r\n        /**\r\n         * Template object for the column information object in DataTables. This object\r\n         * is held in the settings aoColumns array and contains all the information that\r\n         * DataTables needs about each individual column.\r\n         *\r\n         * Note that this object is related to {@link DataTable.defaults.column}\r\n         * but this one is the internal data store for DataTables's cache of columns.\r\n         * It should NOT be manipulated outside of DataTables. Any configuration should\r\n         * be done through the initialisation options.\r\n         *  @namespace\r\n         */\r\n        DataTable.models.oColumn = {\r\n            /**\r\n             * Column index. This could be worked out on-the-fly with $.inArray, but it\r\n             * is faster to just hold it as a variable\r\n             *  @type integer\r\n             *  @default null\r\n             */\r\n            \"idx\": null,\r\n\r\n            /**\r\n             * A list of the columns that sorting should occur on when this column\r\n             * is sorted. That this property is an array allows multi-column sorting\r\n             * to be defined for a column (for example first name / last name columns\r\n             * would benefit from this). The values are integers pointing to the\r\n             * columns to be sorted on (typically it will be a single integer pointing\r\n             * at itself, but that doesn't need to be the case).\r\n             *  @type array\r\n             */\r\n            \"aDataSort\": null,\r\n\r\n            /**\r\n             * Define the sorting directions that are applied to the column, in sequence\r\n             * as the column is repeatedly sorted upon - i.e. the first value is used\r\n             * as the sorting direction when the column if first sorted (clicked on).\r\n             * Sort it again (click again) and it will move on to the next index.\r\n             * Repeat until loop.\r\n             *  @type array\r\n             */\r\n            \"asSorting\": null,\r\n\r\n            /**\r\n             * Flag to indicate if the column is searchable, and thus should be included\r\n             * in the filtering or not.\r\n             *  @type boolean\r\n             */\r\n            \"bSearchable\": null,\r\n\r\n            /**\r\n             * Flag to indicate if the column is sortable or not.\r\n             *  @type boolean\r\n             */\r\n            \"bSortable\": null,\r\n\r\n            /**\r\n             * Flag to indicate if the column is currently visible in the table or not\r\n             *  @type boolean\r\n             */\r\n            \"bVisible\": null,\r\n\r\n            /**\r\n             * Store for manual type assignment using the `column.type` option. This\r\n             * is held in store so we can manipulate the column's `sType` property.\r\n             *  @type string\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"_sManualType\": null,\r\n\r\n            /**\r\n             * Flag to indicate if HTML5 data attributes should be used as the data\r\n             * source for filtering or sorting. True is either are.\r\n             *  @type boolean\r\n             *  @default false\r\n             *  @private\r\n             */\r\n            \"_bAttrSrc\": false,\r\n\r\n            /**\r\n             * Developer definable function that is called whenever a cell is created (Ajax source,\r\n             * etc) or processed for input (DOM source). This can be used as a compliment to mRender\r\n             * allowing you to modify the DOM element (add background colour for example) when the\r\n             * element is available.\r\n             *  @type function\r\n             *  @param {element} nTd The TD node that has been created\r\n             *  @param {*} sData The Data for the cell\r\n             *  @param {array|object} oData The data for the whole row\r\n             *  @param {int} iRow The row index for the aoData data store\r\n             *  @default null\r\n             */\r\n            \"fnCreatedCell\": null,\r\n\r\n            /**\r\n             * Function to get data from a cell in a column. You should <b>never</b>\r\n             * access data directly through _aData internally in DataTables - always use\r\n             * the method attached to this property. It allows mData to function as\r\n             * required. This function is automatically assigned by the column\r\n             * initialisation method\r\n             *  @type function\r\n             *  @param {array|object} oData The data array/object for the array\r\n             *    (i.e. aoData[]._aData)\r\n             *  @param {string} sSpecific The specific data type you want to get -\r\n             *    'display', 'type' 'filter' 'sort'\r\n             *  @returns {*} The data for the cell from the given row's data\r\n             *  @default null\r\n             */\r\n            \"fnGetData\": null,\r\n\r\n            /**\r\n             * Function to set data for a cell in the column. You should <b>never</b>\r\n             * set the data directly to _aData internally in DataTables - always use\r\n             * this method. It allows mData to function as required. This function\r\n             * is automatically assigned by the column initialisation method\r\n             *  @type function\r\n             *  @param {array|object} oData The data array/object for the array\r\n             *    (i.e. aoData[]._aData)\r\n             *  @param {*} sValue Value to set\r\n             *  @default null\r\n             */\r\n            \"fnSetData\": null,\r\n\r\n            /**\r\n             * Property to read the value for the cells in the column from the data\r\n             * source array / object. If null, then the default content is used, if a\r\n             * function is given then the return from the function is used.\r\n             *  @type function|int|string|null\r\n             *  @default null\r\n             */\r\n            \"mData\": null,\r\n\r\n            /**\r\n             * Partner property to mData which is used (only when defined) to get\r\n             * the data - i.e. it is basically the same as mData, but without the\r\n             * 'set' option, and also the data fed to it is the result from mData.\r\n             * This is the rendering method to match the data method of mData.\r\n             *  @type function|int|string|null\r\n             *  @default null\r\n             */\r\n            \"mRender\": null,\r\n\r\n            /**\r\n             * Unique header TH/TD element for this column - this is what the sorting\r\n             * listener is attached to (if sorting is enabled.)\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTh\": null,\r\n\r\n            /**\r\n             * Unique footer TH/TD element for this column (if there is one). Not used\r\n             * in DataTables as such, but can be used for plug-ins to reference the\r\n             * footer for each column.\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTf\": null,\r\n\r\n            /**\r\n             * The class to apply to all TD elements in the table's TBODY for the column\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sClass\": null,\r\n\r\n            /**\r\n             * When DataTables calculates the column widths to assign to each column,\r\n             * it finds the longest string in each column and then constructs a\r\n             * temporary table and reads the widths from that. The problem with this\r\n             * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\r\n             * string - thus the calculation can go wrong (doing it properly and putting\r\n             * it into an DOM object and measuring that is horribly(!) slow). Thus as\r\n             * a \"work around\" we provide this option. It will append its value to the\r\n             * text that is found to be the longest string for the column - i.e. padding.\r\n             *  @type string\r\n             */\r\n            \"sContentPadding\": null,\r\n\r\n            /**\r\n             * Allows a default value to be given for a column's data, and will be used\r\n             * whenever a null data source is encountered (this can be because mData\r\n             * is set to null, or because the data source itself is null).\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sDefaultContent\": null,\r\n\r\n            /**\r\n             * Name for the column, allowing reference to the column by name as well as\r\n             * by index (needs a lookup to work by name).\r\n             *  @type string\r\n             */\r\n            \"sName\": null,\r\n\r\n            /**\r\n             * Custom sorting data type - defines which of the available plug-ins in\r\n             * afnSortData the custom sorting will use - if any is defined.\r\n             *  @type string\r\n             *  @default std\r\n             */\r\n            \"sSortDataType\": 'std',\r\n\r\n            /**\r\n             * Class to be applied to the header element when sorting on this column\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sSortingClass\": null,\r\n\r\n            /**\r\n             * Class to be applied to the header element when sorting on this column -\r\n             * when jQuery UI theming is used.\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sSortingClassJUI\": null,\r\n\r\n            /**\r\n             * Title of the column - what is seen in the TH element (nTh).\r\n             *  @type string\r\n             */\r\n            \"sTitle\": null,\r\n\r\n            /**\r\n             * Column sorting and filtering type\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sType\": null,\r\n\r\n            /**\r\n             * Width of the column\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sWidth\": null,\r\n\r\n            /**\r\n             * Width of the column when it was first \"encountered\"\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sWidthOrig\": null\r\n        };\r\n\r\n\r\n        /*\r\n         * Developer note: The properties of the object below are given in Hungarian\r\n         * notation, that was used as the interface for DataTables prior to v1.10, however\r\n         * from v1.10 onwards the primary interface is camel case. In order to avoid\r\n         * breaking backwards compatibility utterly with this change, the Hungarian\r\n         * version is still, internally the primary interface, but is is not documented\r\n         * - hence the @name tags in each doc comment. This allows a Javascript function\r\n         * to create a map from Hungarian notation to camel case (going the other direction\r\n         * would require each property to be listed, which would at around 3K to the size\r\n         * of DataTables, while this method is about a 0.5K hit.\r\n         *\r\n         * Ultimately this does pave the way for Hungarian notation to be dropped\r\n         * completely, but that is a massive amount of work and will break current\r\n         * installs (therefore is on-hold until v2).\r\n         */\r\n\r\n        /**\r\n         * Initialisation options that can be given to DataTables at initialisation\r\n         * time.\r\n         *  @namespace\r\n         */\r\n        DataTable.defaults = {\r\n            /**\r\n             * An array of data to use for the table, passed in at initialisation which\r\n             * will be used in preference to any data which is already in the DOM. This is\r\n             * particularly useful for constructing tables purely in Javascript, for\r\n             * example with a custom Ajax call.\r\n             *  @type array\r\n             *  @default null\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.data\r\n             *\r\n             *  @example\r\n             *    // Using a 2D array data source\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"data\": [\r\n\t\t *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\r\n\t\t *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\r\n\t\t *        ],\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"title\": \"Engine\" },\r\n\t\t *          { \"title\": \"Browser\" },\r\n\t\t *          { \"title\": \"Platform\" },\r\n\t\t *          { \"title\": \"Version\" },\r\n\t\t *          { \"title\": \"Grade\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using an array of objects as a data source (`data`)\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"data\": [\r\n\t\t *          {\r\n\t\t *            \"engine\":   \"Trident\",\r\n\t\t *            \"browser\":  \"Internet Explorer 4.0\",\r\n\t\t *            \"platform\": \"Win 95+\",\r\n\t\t *            \"version\":  4,\r\n\t\t *            \"grade\":    \"X\"\r\n\t\t *          },\r\n\t\t *          {\r\n\t\t *            \"engine\":   \"Trident\",\r\n\t\t *            \"browser\":  \"Internet Explorer 5.0\",\r\n\t\t *            \"platform\": \"Win 95+\",\r\n\t\t *            \"version\":  5,\r\n\t\t *            \"grade\":    \"C\"\r\n\t\t *          }\r\n\t\t *        ],\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"title\": \"Engine\",   \"data\": \"engine\" },\r\n\t\t *          { \"title\": \"Browser\",  \"data\": \"browser\" },\r\n\t\t *          { \"title\": \"Platform\", \"data\": \"platform\" },\r\n\t\t *          { \"title\": \"Version\",  \"data\": \"version\" },\r\n\t\t *          { \"title\": \"Grade\",    \"data\": \"grade\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"aaData\": null,\r\n\r\n\r\n            /**\r\n             * If ordering is enabled, then DataTables will perform a first pass sort on\r\n             * initialisation. You can define which column(s) the sort is performed\r\n             * upon, and the sorting direction, with this variable. The `sorting` array\r\n             * should contain an array for each column to be sorted initially containing\r\n             * the column's index and a direction string ('asc' or 'desc').\r\n             *  @type array\r\n             *  @default [[0,'asc']]\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.order\r\n             *\r\n             *  @example\r\n             *    // Sort by 3rd column first, and then 4th column\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"order\": [[2,'asc'], [3,'desc']]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *    // No initial sorting\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"order\": []\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"aaSorting\": [[0,'asc']],\r\n\r\n\r\n            /**\r\n             * This parameter is basically identical to the `sorting` parameter, but\r\n             * cannot be overridden by user interaction with the table. What this means\r\n             * is that you could have a column (visible or hidden) which the sorting\r\n             * will always be forced on first - any sorting after that (from the user)\r\n             * will then be performed as required. This can be useful for grouping rows\r\n             * together.\r\n             *  @type array\r\n             *  @default null\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.orderFixed\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"orderFixed\": [[0,'asc']]\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"aaSortingFixed\": [],\r\n\r\n\r\n            /**\r\n             * DataTables can be instructed to load data to display in the table from a\r\n             * Ajax source. This option defines how that Ajax call is made and where to.\r\n             *\r\n             * The `ajax` property has three different modes of operation, depending on\r\n             * how it is defined. These are:\r\n             *\r\n             * * `string` - Set the URL from where the data should be loaded from.\r\n             * * `object` - Define properties for `jQuery.ajax`.\r\n             * * `function` - Custom data get function\r\n             *\r\n             * `string`\r\n             * --------\r\n             *\r\n             * As a string, the `ajax` property simply defines the URL from which\r\n             * DataTables will load data.\r\n             *\r\n             * `object`\r\n             * --------\r\n             *\r\n             * As an object, the parameters in the object are passed to\r\n             * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\r\n             * of the Ajax request. DataTables has a number of default parameters which\r\n             * you can override using this option. Please refer to the jQuery\r\n             * documentation for a full description of the options available, although\r\n             * the following parameters provide additional options in DataTables or\r\n             * require special consideration:\r\n             *\r\n             * * `data` - As with jQuery, `data` can be provided as an object, but it\r\n             *   can also be used as a function to manipulate the data DataTables sends\r\n             *   to the server. The function takes a single parameter, an object of\r\n             *   parameters with the values that DataTables has readied for sending. An\r\n             *   object may be returned which will be merged into the DataTables\r\n             *   defaults, or you can add the items to the object that was passed in and\r\n             *   not return anything from the function. This supersedes `fnServerParams`\r\n             *   from DataTables 1.9-.\r\n             *\r\n             * * `dataSrc` - By default DataTables will look for the property `data` (or\r\n             *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\r\n             *   from an Ajax source or for server-side processing - this parameter\r\n             *   allows that property to be changed. You can use Javascript dotted\r\n             *   object notation to get a data source for multiple levels of nesting, or\r\n             *   it my be used as a function. As a function it takes a single parameter,\r\n             *   the JSON returned from the server, which can be manipulated as\r\n             *   required, with the returned value being that used by DataTables as the\r\n             *   data source for the table. This supersedes `sAjaxDataProp` from\r\n             *   DataTables 1.9-.\r\n             *\r\n             * * `success` - Should not be overridden it is used internally in\r\n             *   DataTables. To manipulate / transform the data returned by the server\r\n             *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\r\n             *\r\n             * `function`\r\n             * ----------\r\n             *\r\n             * As a function, making the Ajax call is left up to yourself allowing\r\n             * complete control of the Ajax request. Indeed, if desired, a method other\r\n             * than Ajax could be used to obtain the required data, such as Web storage\r\n             * or an AIR database.\r\n             *\r\n             * The function is given four parameters and no return is required. The\r\n             * parameters are:\r\n             *\r\n             * 1. _object_ - Data to send to the server\r\n             * 2. _function_ - Callback function that must be executed when the required\r\n             *    data has been obtained. That data should be passed into the callback\r\n             *    as the only parameter\r\n             * 3. _object_ - DataTables settings object for the table\r\n             *\r\n             * Note that this supersedes `fnServerData` from DataTables 1.9-.\r\n             *\r\n             *  @type string|object|function\r\n             *  @default null\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.ajax\r\n             *  @since 1.10.0\r\n             *\r\n             * @example\r\n             *   // Get JSON data from a file via Ajax.\r\n             *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": \"data.json\"\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Get JSON data from a file via Ajax, using `dataSrc` to change\r\n             *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": {\r\n\t\t *       \"url\": \"data.json\",\r\n\t\t *       \"dataSrc\": \"tableData\"\r\n\t\t *     }\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\r\n             *   // from a plain array rather than an array in an object\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": {\r\n\t\t *       \"url\": \"data.json\",\r\n\t\t *       \"dataSrc\": \"\"\r\n\t\t *     }\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Manipulate the data returned from the server - add a link to data\r\n             *   // (note this can, should, be done using `render` for the column - this\r\n             *   // is just a simple example of how the data can be manipulated).\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": {\r\n\t\t *       \"url\": \"data.json\",\r\n\t\t *       \"dataSrc\": function ( json ) {\r\n\t\t *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\r\n\t\t *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\r\n\t\t *         }\r\n\t\t *         return json;\r\n\t\t *       }\r\n\t\t *     }\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Add data to the request\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": {\r\n\t\t *       \"url\": \"data.json\",\r\n\t\t *       \"data\": function ( d ) {\r\n\t\t *         return {\r\n\t\t *           \"extra_search\": $('#extra').val()\r\n\t\t *         };\r\n\t\t *       }\r\n\t\t *     }\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Send request as POST\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": {\r\n\t\t *       \"url\": \"data.json\",\r\n\t\t *       \"type\": \"POST\"\r\n\t\t *     }\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Get the data from localStorage (could interface with a form for\r\n             *   // adding, editing and removing rows).\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": function (data, callback, settings) {\r\n\t\t *       callback(\r\n\t\t *         JSON.parse( localStorage.getItem('dataTablesData') )\r\n\t\t *       );\r\n\t\t *     }\r\n\t\t *   } );\r\n             */\r\n            \"ajax\": null,\r\n\r\n\r\n            /**\r\n             * This parameter allows you to readily specify the entries in the length drop\r\n             * down menu that DataTables shows when pagination is enabled. It can be\r\n             * either a 1D array of options which will be used for both the displayed\r\n             * option and the value, or a 2D array which will use the array in the first\r\n             * position as the value, and the array in the second position as the\r\n             * displayed options (useful for language strings such as 'All').\r\n             *\r\n             * Note that the `pageLength` property will be automatically set to the\r\n             * first value given in this array, unless `pageLength` is also provided.\r\n             *  @type array\r\n             *  @default [ 10, 25, 50, 100 ]\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.lengthMenu\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"aLengthMenu\": [ 10, 25, 50, 100 ],\r\n\r\n\r\n            /**\r\n             * The `columns` option in the initialisation parameter allows you to define\r\n             * details about the way individual columns behave. For a full list of\r\n             * column options that can be set, please see\r\n             * {@link DataTable.defaults.column}. Note that if you use `columns` to\r\n             * define your columns, you must have an entry in the array for every single\r\n             * column that you have in your table (these can be null if you don't which\r\n             * to specify any options).\r\n             *  @member\r\n             *\r\n             *  @name DataTable.defaults.column\r\n             */\r\n            \"aoColumns\": null,\r\n\r\n            /**\r\n             * Very similar to `columns`, `columnDefs` allows you to target a specific\r\n             * column, multiple columns, or all columns, using the `targets` property of\r\n             * each object in the array. This allows great flexibility when creating\r\n             * tables, as the `columnDefs` arrays can be of any length, targeting the\r\n             * columns you specifically want. `columnDefs` may use any of the column\r\n             * options available: {@link DataTable.defaults.column}, but it _must_\r\n             * have `targets` defined in each object in the array. Values in the `targets`\r\n             * array may be:\r\n             *   <ul>\r\n             *     <li>a string - class name will be matched on the TH for the column</li>\r\n             *     <li>0 or a positive integer - column index counting from the left</li>\r\n             *     <li>a negative integer - column index counting from the right</li>\r\n             *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\r\n             *   </ul>\r\n             *  @member\r\n             *\r\n             *  @name DataTable.defaults.columnDefs\r\n             */\r\n            \"aoColumnDefs\": null,\r\n\r\n\r\n            /**\r\n             * Basically the same as `search`, this parameter defines the individual column\r\n             * filtering state at initialisation time. The array must be of the same size\r\n             * as the number of columns, and each element be an object with the parameters\r\n             * `search` and `escapeRegex` (the latter is optional). 'null' is also\r\n             * accepted and the default will be used.\r\n             *  @type array\r\n             *  @default []\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.searchCols\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"searchCols\": [\r\n\t\t *          null,\r\n\t\t *          { \"search\": \"My filter\" },\r\n\t\t *          null,\r\n\t\t *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"aoSearchCols\": [],\r\n\r\n\r\n            /**\r\n             * An array of CSS classes that should be applied to displayed rows. This\r\n             * array may be of any length, and DataTables will apply each class\r\n             * sequentially, looping when required.\r\n             *  @type array\r\n             *  @default null <i>Will take the values determined by the `oClasses.stripe*`\r\n             *    options</i>\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.stripeClasses\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"asStripeClasses\": null,\r\n\r\n\r\n            /**\r\n             * Enable or disable automatic column width calculation. This can be disabled\r\n             * as an optimisation (it takes some time to calculate the widths) if the\r\n             * tables widths are passed in using `columns`.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.autoWidth\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"autoWidth\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bAutoWidth\": true,\r\n\r\n\r\n            /**\r\n             * Deferred rendering can provide DataTables with a huge speed boost when you\r\n             * are using an Ajax or JS data source for the table. This option, when set to\r\n             * true, will cause DataTables to defer the creation of the table elements for\r\n             * each row until they are needed for a draw - saving a significant amount of\r\n             * time.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.deferRender\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"ajax\": \"sources/arrays.txt\",\r\n\t\t *        \"deferRender\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bDeferRender\": false,\r\n\r\n\r\n            /**\r\n             * Replace a DataTable which matches the given selector and replace it with\r\n             * one which has the properties of the new initialisation object passed. If no\r\n             * table matches the selector, then the new DataTable will be constructed as\r\n             * per normal.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.destroy\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"srollY\": \"200px\",\r\n\t\t *        \"paginate\": false\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      // Some time later....\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"filter\": false,\r\n\t\t *        \"destroy\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bDestroy\": false,\r\n\r\n\r\n            /**\r\n             * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\r\n             * that it allows the end user to input multiple words (space separated) and\r\n             * will match a row containing those words, even if not in the order that was\r\n             * specified (this allow matching across multiple columns). Note that if you\r\n             * wish to use filtering in DataTables this must remain 'true' - to remove the\r\n             * default filtering input box and retain filtering abilities, please use\r\n             * {@link DataTable.defaults.dom}.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.searching\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"searching\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bFilter\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable the table information display. This shows information\r\n             * about the data that is currently visible on the page, including information\r\n             * about filtered data if that action is being performed.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.info\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"info\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bInfo\": true,\r\n\r\n\r\n            /**\r\n             * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some\r\n             * slightly different and additional mark-up from what DataTables has\r\n             * traditionally used).\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.jQueryUI\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"jQueryUI\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bJQueryUI\": false,\r\n\r\n\r\n            /**\r\n             * Allows the end user to select the size of a formatted page from a select\r\n             * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.lengthChange\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"lengthChange\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bLengthChange\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable pagination.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.paging\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"paging\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bPaginate\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable the display of a 'processing' indicator when the table is\r\n             * being processed (e.g. a sort). This is particularly useful for tables with\r\n             * large amounts of data where it can take a noticeable amount of time to sort\r\n             * the entries.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.processing\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"processing\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bProcessing\": false,\r\n\r\n\r\n            /**\r\n             * Retrieve the DataTables object for the given selector. Note that if the\r\n             * table has already been initialised, this parameter will cause DataTables\r\n             * to simply return the object that has already been set up - it will not take\r\n             * account of any changes you might have made to the initialisation object\r\n             * passed to DataTables (setting this parameter to true is an acknowledgement\r\n             * that you understand this). `destroy` can be used to reinitialise a table if\r\n             * you need.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.retrieve\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      initTable();\r\n\t\t *      tableActions();\r\n\t\t *    } );\r\n             *\r\n             *    function initTable ()\r\n             *    {\r\n\t\t *      return $('#example').dataTable( {\r\n\t\t *        \"scrollY\": \"200px\",\r\n\t\t *        \"paginate\": false,\r\n\t\t *        \"retrieve\": true\r\n\t\t *      } );\r\n\t\t *    }\r\n             *\r\n             *    function tableActions ()\r\n             *    {\r\n\t\t *      var table = initTable();\r\n\t\t *      // perform API operations with oTable\r\n\t\t *    }\r\n             */\r\n            \"bRetrieve\": false,\r\n\r\n\r\n            /**\r\n             * When vertical (y) scrolling is enabled, DataTables will force the height of\r\n             * the table's viewport to the given height at all times (useful for layout).\r\n             * However, this can look odd when filtering data down to a small data set,\r\n             * and the footer is left \"floating\" further down. This parameter (when\r\n             * enabled) will cause DataTables to collapse the table's viewport down when\r\n             * the result set will fit within the given Y height.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.scrollCollapse\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"scrollY\": \"200\",\r\n\t\t *        \"scrollCollapse\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bScrollCollapse\": false,\r\n\r\n\r\n            /**\r\n             * Configure DataTables to use server-side processing. Note that the\r\n             * `ajax` parameter must also be given in order to give DataTables a\r\n             * source to obtain the required data for each draw.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.serverSide\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"serverSide\": true,\r\n\t\t *        \"ajax\": \"xhr.php\"\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bServerSide\": false,\r\n\r\n\r\n            /**\r\n             * Enable or disable sorting of columns. Sorting of individual columns can be\r\n             * disabled by the `sortable` option for each column.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.ordering\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"ordering\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bSort\": true,\r\n\r\n\r\n            /**\r\n             * Enable or display DataTables' ability to sort multiple columns at the\r\n             * same time (activated by shift-click by the user).\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.orderMulti\r\n             *\r\n             *  @example\r\n             *    // Disable multiple column sorting ability\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"orderMulti\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bSortMulti\": true,\r\n\r\n\r\n            /**\r\n             * Allows control over whether DataTables should use the top (true) unique\r\n             * cell that is found for a single column, or the bottom (false - default).\r\n             * This is useful when using complex headers.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.orderCellsTop\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"orderCellsTop\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bSortCellsTop\": false,\r\n\r\n\r\n            /**\r\n             * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\r\n             * `sorting\\_3` to the columns which are currently being sorted on. This is\r\n             * presented as a feature switch as it can increase processing time (while\r\n             * classes are removed and added) so for large data sets you might want to\r\n             * turn this off.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.orderClasses\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"orderClasses\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bSortClasses\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable state saving. When enabled HTML5 `localStorage` will be\r\n             * used to save table display information such as pagination information,\r\n             * display length, filtering and sorting. As such when the end user reloads\r\n             * the page the display display will match what thy had previously set up.\r\n             *\r\n             * Due to the use of `localStorage` the default state saving is not supported\r\n             * in IE6 or 7. If state saving is required in those browsers, use\r\n             * `stateSaveCallback` to provide a storage solution such as cookies.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.stateSave\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bStateSave\": false,\r\n\r\n\r\n            /**\r\n             * This function is called when a TR element is created (and all TD child\r\n             * elements have been inserted), or registered if using a DOM source, allowing\r\n             * manipulation of the TR element (adding classes etc).\r\n             *  @type function\r\n             *  @param {node} row \"TR\" element for the current row\r\n             *  @param {array} data Raw data array for this row\r\n             *  @param {int} dataIndex The index of this row in the internal aoData array\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.createdRow\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"createdRow\": function( row, data, dataIndex ) {\r\n\t\t *          // Bold the grade for all 'A' grade browsers\r\n\t\t *          if ( data[4] == \"A\" )\r\n\t\t *          {\r\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\r\n\t\t *          }\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnCreatedRow\": null,\r\n\r\n\r\n            /**\r\n             * This function is called on every 'draw' event, and allows you to\r\n             * dynamically modify any aspect you want about the created DOM.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.drawCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"drawCallback\": function( settings ) {\r\n\t\t *          alert( 'DataTables has redrawn the table' );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnDrawCallback\": null,\r\n\r\n\r\n            /**\r\n             * Identical to fnHeaderCallback() but for the table footer this function\r\n             * allows you to modify the table footer on every 'draw' event.\r\n             *  @type function\r\n             *  @param {node} foot \"TR\" element for the footer\r\n             *  @param {array} data Full table data (as derived from the original HTML)\r\n             *  @param {int} start Index for the current display starting point in the\r\n             *    display array\r\n             *  @param {int} end Index for the current display ending point in the\r\n             *    display array\r\n             *  @param {array int} display Index array to translate the visual position\r\n             *    to the full data array\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.footerCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"footerCallback\": function( tfoot, data, start, end, display ) {\r\n\t\t *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"fnFooterCallback\": null,\r\n\r\n\r\n            /**\r\n             * When rendering large numbers in the information element for the table\r\n             * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\r\n             * to have a comma separator for the 'thousands' units (e.g. 1 million is\r\n             * rendered as \"1,000,000\") to help readability for the end user. This\r\n             * function will override the default method DataTables uses.\r\n             *  @type function\r\n             *  @member\r\n             *  @param {int} toFormat number to be formatted\r\n             *  @returns {string} formatted string for DataTables to show the number\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.formatNumber\r\n             *\r\n             *  @example\r\n             *    // Format a number using a single quote for the separator (note that\r\n             *    // this can also be done with the language.thousands option)\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"formatNumber\": function ( toFormat ) {\r\n\t\t *          return toFormat.toString().replace(\r\n\t\t *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\r\n\t\t *          );\r\n\t\t *        };\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnFormatNumber\": function ( toFormat ) {\r\n                return toFormat.toString().replace(\r\n                    /\\B(?=(\\d{3})+(?!\\d))/g,\r\n                    this.oLanguage.sThousands\r\n                );\r\n            },\r\n\r\n\r\n            /**\r\n             * This function is called on every 'draw' event, and allows you to\r\n             * dynamically modify the header row. This can be used to calculate and\r\n             * display useful information about the table.\r\n             *  @type function\r\n             *  @param {node} head \"TR\" element for the header\r\n             *  @param {array} data Full table data (as derived from the original HTML)\r\n             *  @param {int} start Index for the current display starting point in the\r\n             *    display array\r\n             *  @param {int} end Index for the current display ending point in the\r\n             *    display array\r\n             *  @param {array int} display Index array to translate the visual position\r\n             *    to the full data array\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.headerCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"fheaderCallback\": function( head, data, start, end, display ) {\r\n\t\t *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"fnHeaderCallback\": null,\r\n\r\n\r\n            /**\r\n             * The information element can be used to convey information about the current\r\n             * state of the table. Although the internationalisation options presented by\r\n             * DataTables are quite capable of dealing with most customisations, there may\r\n             * be times where you wish to customise the string further. This callback\r\n             * allows you to do exactly that.\r\n             *  @type function\r\n             *  @param {object} oSettings DataTables settings object\r\n             *  @param {int} start Starting position in data for the draw\r\n             *  @param {int} end End position in data for the draw\r\n             *  @param {int} max Total number of rows in the table (regardless of\r\n             *    filtering)\r\n             *  @param {int} total Total number of rows in the data set, after filtering\r\n             *  @param {string} pre The string that DataTables has formatted using it's\r\n             *    own rules\r\n             *  @returns {string} The string to be displayed in the information element.\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.infoCallback\r\n             *\r\n             *  @example\r\n             *    $('#example').dataTable( {\r\n\t\t *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\r\n\t\t *        return start +\" to \"+ end;\r\n\t\t *      }\r\n\t\t *    } );\r\n             */\r\n            \"fnInfoCallback\": null,\r\n\r\n\r\n            /**\r\n             * Called when the table has been initialised. Normally DataTables will\r\n             * initialise sequentially and there will be no need for this function,\r\n             * however, this does not hold true when using external language information\r\n             * since that is obtained using an async XHR call.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} json The JSON object request from the server - only\r\n             *    present if client-side Ajax sourced data is used\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.initComplete\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"initComplete\": function(settings, json) {\r\n\t\t *          alert( 'DataTables has finished its initialisation.' );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"fnInitComplete\": null,\r\n\r\n\r\n            /**\r\n             * Called at the very start of each table draw and can be used to cancel the\r\n             * draw by returning false, any other return (including undefined) results in\r\n             * the full draw occurring).\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @returns {boolean} False will cancel the draw, anything else (including no\r\n             *    return) will allow it to complete.\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.preDrawCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"preDrawCallback\": function( settings ) {\r\n\t\t *          if ( $('#test').val() == 1 ) {\r\n\t\t *            return false;\r\n\t\t *          }\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnPreDrawCallback\": null,\r\n\r\n\r\n            /**\r\n             * This function allows you to 'post process' each row after it have been\r\n             * generated for each table draw, but before it is rendered on screen. This\r\n             * function might be used for setting the row class name etc.\r\n             *  @type function\r\n             *  @param {node} row \"TR\" element for the current row\r\n             *  @param {array} data Raw data array for this row\r\n             *  @param {int} displayIndex The display index for the current table draw\r\n             *  @param {int} displayIndexFull The index of the data in the full list of\r\n             *    rows (after filtering)\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.rowCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\r\n\t\t *          // Bold the grade for all 'A' grade browsers\r\n\t\t *          if ( data[4] == \"A\" ) {\r\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\r\n\t\t *          }\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnRowCallback\": null,\r\n\r\n\r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             * This parameter allows you to override the default function which obtains\r\n             * the data from the server so something more suitable for your application.\r\n             * For example you could use POST data, or pull information from a Gears or\r\n             * AIR database.\r\n             *  @type function\r\n             *  @member\r\n             *  @param {string} source HTTP source to obtain the data from (`ajax`)\r\n             *  @param {array} data A key/value pair object containing the data to send\r\n             *    to the server\r\n             *  @param {function} callback to be called on completion of the data get\r\n             *    process that will draw the data on the page.\r\n             *  @param {object} settings DataTables settings object\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.serverData\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"fnServerData\": null,\r\n\r\n\r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             *  It is often useful to send extra data to the server when making an Ajax\r\n             * request - for example custom filtering information, and this callback\r\n             * function makes it trivial to send extra information to the server. The\r\n             * passed in parameter is the data set that has been constructed by\r\n             * DataTables, and you can add to this or modify it as you require.\r\n             *  @type function\r\n             *  @param {array} data Data array (array of objects which are name/value\r\n             *    pairs) that has been constructed by DataTables and will be sent to the\r\n             *    server. In the case of Ajax sourced data with server-side processing\r\n             *    this will be an empty array, for server-side processing there will be a\r\n             *    significant number of parameters!\r\n             *  @returns {undefined} Ensure that you modify the data array passed in,\r\n             *    as this is passed by reference.\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.serverParams\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"fnServerParams\": null,\r\n\r\n\r\n            /**\r\n             * Load the table state. With this function you can define from where, and how, the\r\n             * state of a table is loaded. By default DataTables will load from `localStorage`\r\n             * but you might wish to use a server-side database or cookies.\r\n             *  @type function\r\n             *  @member\r\n             *  @param {object} settings DataTables settings object\r\n             *  @return {object} The DataTables state object to be loaded\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateLoadCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateLoadCallback\": function (settings) {\r\n\t\t *          var o;\r\n\t\t *\r\n\t\t *          // Send an Ajax request to the server to get the data. Note that\r\n\t\t *          // this is a synchronous request.\r\n\t\t *          $.ajax( {\r\n\t\t *            \"url\": \"/state_load\",\r\n\t\t *            \"async\": false,\r\n\t\t *            \"dataType\": \"json\",\r\n\t\t *            \"success\": function (json) {\r\n\t\t *              o = json;\r\n\t\t *            }\r\n\t\t *          } );\r\n\t\t *\r\n\t\t *          return o;\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnStateLoadCallback\": function ( settings ) {\r\n                try {\r\n                    return JSON.parse(\r\n                        (settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(\r\n                            'DataTables_'+settings.sInstance+'_'+location.pathname\r\n                        )\r\n                    );\r\n                } catch (e) {}\r\n            },\r\n\r\n\r\n            /**\r\n             * Callback which allows modification of the saved state prior to loading that state.\r\n             * This callback is called when the table is loading state from the stored data, but\r\n             * prior to the settings object being modified by the saved state. Note that for\r\n             * plug-in authors, you should use the `stateLoadParams` event to load parameters for\r\n             * a plug-in.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} data The state object that is to be loaded\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateLoadParams\r\n             *\r\n             *  @example\r\n             *    // Remove a saved filter, so filtering is never loaded\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateLoadParams\": function (settings, data) {\r\n\t\t *          data.oSearch.sSearch = \"\";\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Disallow state loading by returning false\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateLoadParams\": function (settings, data) {\r\n\t\t *          return false;\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnStateLoadParams\": null,\r\n\r\n\r\n            /**\r\n             * Callback that is called when the state has been loaded from the state saving method\r\n             * and the DataTables settings object has been modified as a result of the loaded state.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} data The state object that was loaded\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateLoaded\r\n             *\r\n             *  @example\r\n             *    // Show an alert with the filtering value that was saved\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateLoaded\": function (settings, data) {\r\n\t\t *          alert( 'Saved filter was: '+data.oSearch.sSearch );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnStateLoaded\": null,\r\n\r\n\r\n            /**\r\n             * Save the table state. This function allows you to define where and how the state\r\n             * information for the table is stored By default DataTables will use `localStorage`\r\n             * but you might wish to use a server-side database or cookies.\r\n             *  @type function\r\n             *  @member\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} data The state object to be saved\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateSaveCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateSaveCallback\": function (settings, data) {\r\n\t\t *          // Send an Ajax request to the server with the state object\r\n\t\t *          $.ajax( {\r\n\t\t *            \"url\": \"/state_save\",\r\n\t\t *            \"data\": data,\r\n\t\t *            \"dataType\": \"json\",\r\n\t\t *            \"method\": \"POST\"\r\n\t\t *            \"success\": function () {}\r\n\t\t *          } );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnStateSaveCallback\": function ( settings, data ) {\r\n                try {\r\n                    (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(\r\n                        'DataTables_'+settings.sInstance+'_'+location.pathname,\r\n                        JSON.stringify( data )\r\n                    );\r\n                } catch (e) {}\r\n            },\r\n\r\n\r\n            /**\r\n             * Callback which allows modification of the state to be saved. Called when the table\r\n             * has changed state a new state save is required. This method allows modification of\r\n             * the state saving object prior to actually doing the save, including addition or\r\n             * other state properties or modification. Note that for plug-in authors, you should\r\n             * use the `stateSaveParams` event to save parameters for a plug-in.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} data The state object to be saved\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateSaveParams\r\n             *\r\n             *  @example\r\n             *    // Remove a saved filter, so filtering is never saved\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateSaveParams\": function (settings, data) {\r\n\t\t *          data.oSearch.sSearch = \"\";\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnStateSaveParams\": null,\r\n\r\n\r\n            /**\r\n             * Duration for which the saved state information is considered valid. After this period\r\n             * has elapsed the state will be returned to the default.\r\n             * Value is given in seconds.\r\n             *  @type int\r\n             *  @default 7200 <i>(2 hours)</i>\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.stateDuration\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateDuration\": 60*60*24; // 1 day\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"iStateDuration\": 7200,\r\n\r\n\r\n            /**\r\n             * When enabled DataTables will not make a request to the server for the first\r\n             * page draw - rather it will use the data already on the page (no sorting etc\r\n             * will be applied to it), thus saving on an XHR at load time. `deferLoading`\r\n             * is used to indicate that deferred loading is required, but it is also used\r\n             * to tell DataTables how many records there are in the full table (allowing\r\n             * the information element and pagination to be displayed correctly). In the case\r\n             * where a filtering is applied to the table on initial load, this can be\r\n             * indicated by giving the parameter as an array, where the first element is\r\n             * the number of records available after filtering and the second element is the\r\n             * number of records without filtering (allowing the table information element\r\n             * to be shown correctly).\r\n             *  @type int | array\r\n             *  @default null\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.deferLoading\r\n             *\r\n             *  @example\r\n             *    // 57 records available in the table, no filtering applied\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"serverSide\": true,\r\n\t\t *        \"ajax\": \"scripts/server_processing.php\",\r\n\t\t *        \"deferLoading\": 57\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // 57 records after filtering, 100 without filtering (an initial filter applied)\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"serverSide\": true,\r\n\t\t *        \"ajax\": \"scripts/server_processing.php\",\r\n\t\t *        \"deferLoading\": [ 57, 100 ],\r\n\t\t *        \"search\": {\r\n\t\t *          \"search\": \"my_filter\"\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"iDeferLoading\": null,\r\n\r\n\r\n            /**\r\n             * Number of rows to display on a single page when using pagination. If\r\n             * feature enabled (`lengthChange`) then the end user will be able to override\r\n             * this to a custom setting using a pop-up menu.\r\n             *  @type int\r\n             *  @default 10\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.pageLength\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"pageLength\": 50\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"iDisplayLength\": 10,\r\n\r\n\r\n            /**\r\n             * Define the starting point for data display when using DataTables with\r\n             * pagination. Note that this parameter is the number of records, rather than\r\n             * the page number, so if you have 10 records per page and want to start on\r\n             * the third page, it should be \"20\".\r\n             *  @type int\r\n             *  @default 0\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.displayStart\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"displayStart\": 20\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"iDisplayStart\": 0,\r\n\r\n\r\n            /**\r\n             * By default DataTables allows keyboard navigation of the table (sorting, paging,\r\n             * and filtering) by adding a `tabindex` attribute to the required elements. This\r\n             * allows you to tab through the controls and press the enter key to activate them.\r\n             * The tabindex is default 0, meaning that the tab follows the flow of the document.\r\n             * You can overrule this using this parameter if you wish. Use a value of -1 to\r\n             * disable built-in keyboard navigation.\r\n             *  @type int\r\n             *  @default 0\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.tabIndex\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"tabIndex\": 1\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"iTabIndex\": 0,\r\n\r\n\r\n            /**\r\n             * Classes that DataTables assigns to the various components and features\r\n             * that it adds to the HTML table. This allows classes to be configured\r\n             * during initialisation in addition to through the static\r\n             * {@link DataTable.ext.oStdClasses} object).\r\n             *  @namespace\r\n             *  @name DataTable.defaults.classes\r\n             */\r\n            \"oClasses\": {},\r\n\r\n\r\n            /**\r\n             * All strings that DataTables uses in the user interface that it creates\r\n             * are defined in this object, allowing you to modified them individually or\r\n             * completely replace them all as required.\r\n             *  @namespace\r\n             *  @name DataTable.defaults.language\r\n             */\r\n            \"oLanguage\": {\r\n                /**\r\n                 * Strings that are used for WAI-ARIA labels and controls only (these are not\r\n                 * actually visible on the page, but will be read by screenreaders, and thus\r\n                 * must be internationalised as well).\r\n                 *  @namespace\r\n                 *  @name DataTable.defaults.language.aria\r\n                 */\r\n                \"oAria\": {\r\n                    /**\r\n                     * ARIA label that is added to the table headers when the column may be\r\n                     * sorted ascending by activing the column (click or return when focused).\r\n                     * Note that the column header is prefixed to this string.\r\n                     *  @type string\r\n                     *  @default : activate to sort column ascending\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.aria.sortAscending\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"aria\": {\r\n\t\t\t\t *            \"sortAscending\": \" - click/return to sort ascending\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sSortAscending\": \": activate to sort column ascending\",\r\n\r\n                    /**\r\n                     * ARIA label that is added to the table headers when the column may be\r\n                     * sorted descending by activing the column (click or return when focused).\r\n                     * Note that the column header is prefixed to this string.\r\n                     *  @type string\r\n                     *  @default : activate to sort column ascending\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.aria.sortDescending\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"aria\": {\r\n\t\t\t\t *            \"sortDescending\": \" - click/return to sort descending\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sSortDescending\": \": activate to sort column descending\"\r\n                },\r\n\r\n                /**\r\n                 * Pagination string used by DataTables for the built-in pagination\r\n                 * control types.\r\n                 *  @namespace\r\n                 *  @name DataTable.defaults.language.paginate\r\n                 */\r\n                \"oPaginate\": {\r\n                    /**\r\n                     * Text to use when using the 'full_numbers' type of pagination for the\r\n                     * button to take the user to the first page.\r\n                     *  @type string\r\n                     *  @default First\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.paginate.first\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"paginate\": {\r\n\t\t\t\t *            \"first\": \"First page\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sFirst\": \"First\",\r\n\r\n\r\n                    /**\r\n                     * Text to use when using the 'full_numbers' type of pagination for the\r\n                     * button to take the user to the last page.\r\n                     *  @type string\r\n                     *  @default Last\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.paginate.last\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"paginate\": {\r\n\t\t\t\t *            \"last\": \"Last page\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sLast\": \"Last\",\r\n\r\n\r\n                    /**\r\n                     * Text to use for the 'next' pagination button (to take the user to the\r\n                     * next page).\r\n                     *  @type string\r\n                     *  @default Next\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.paginate.next\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"paginate\": {\r\n\t\t\t\t *            \"next\": \"Next page\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sNext\": \"Next\",\r\n\r\n\r\n                    /**\r\n                     * Text to use for the 'previous' pagination button (to take the user to\r\n                     * the previous page).\r\n                     *  @type string\r\n                     *  @default Previous\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.paginate.previous\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"paginate\": {\r\n\t\t\t\t *            \"previous\": \"Previous page\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sPrevious\": \"Previous\"\r\n                },\r\n\r\n                /**\r\n                 * This string is shown in preference to `zeroRecords` when the table is\r\n                 * empty of data (regardless of filtering). Note that this is an optional\r\n                 * parameter - if it is not given, the value of `zeroRecords` will be used\r\n                 * instead (either the default or given value).\r\n                 *  @type string\r\n                 *  @default No data available in table\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.emptyTable\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"emptyTable\": \"No data available in table\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sEmptyTable\": \"No data available in table\",\r\n\r\n\r\n                /**\r\n                 * This string gives information to the end user about the information\r\n                 * that is current on display on the page. The following tokens can be\r\n                 * used in the string and will be dynamically replaced as the table\r\n                 * display updates. This tokens can be placed anywhere in the string, or\r\n                 * removed as needed by the language requires:\r\n                 *\r\n                 * * `\\_START\\_` - Display index of the first record on the current page\r\n                 * * `\\_END\\_` - Display index of the last record on the current page\r\n                 * * `\\_TOTAL\\_` - Number of records in the table after filtering\r\n                 * * `\\_MAX\\_` - Number of records in the table without filtering\r\n                 * * `\\_PAGE\\_` - Current page number\r\n                 * * `\\_PAGES\\_` - Total number of pages of data in the table\r\n                 *\r\n                 *  @type string\r\n                 *  @default Showing _START_ to _END_ of _TOTAL_ entries\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.info\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\r\n\r\n\r\n                /**\r\n                 * Display information string for when the table is empty. Typically the\r\n                 * format of this string should match `info`.\r\n                 *  @type string\r\n                 *  @default Showing 0 to 0 of 0 entries\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.infoEmpty\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"infoEmpty\": \"No entries to show\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\r\n\r\n\r\n                /**\r\n                 * When a user filters the information in a table, this string is appended\r\n                 * to the information (`info`) to give an idea of how strong the filtering\r\n                 * is. The variable _MAX_ is dynamically updated.\r\n                 *  @type string\r\n                 *  @default (filtered from _MAX_ total entries)\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.infoFiltered\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"infoFiltered\": \" - filtering from _MAX_ records\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\r\n\r\n\r\n                /**\r\n                 * If can be useful to append extra information to the info string at times,\r\n                 * and this variable does exactly that. This information will be appended to\r\n                 * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\r\n                 * being used) at all times.\r\n                 *  @type string\r\n                 *  @default <i>Empty string</i>\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.infoPostFix\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"infoPostFix\": \"All records shown are derived from real information.\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sInfoPostFix\": \"\",\r\n\r\n\r\n                /**\r\n                 * This decimal place operator is a little different from the other\r\n                 * language options since DataTables doesn't output floating point\r\n                 * numbers, so it won't ever use this for display of a number. Rather,\r\n                 * what this parameter does is modify the sort methods of the table so\r\n                 * that numbers which are in a format which has a character other than\r\n                 * a period (`.`) as a decimal place will be sorted numerically.\r\n                 *\r\n                 * Note that numbers with different decimal places cannot be shown in\r\n                 * the same table and still be sortable, the table must be consistent.\r\n                 * However, multiple different tables on the page can use different\r\n                 * decimal place characters.\r\n                 *  @type string\r\n                 *  @default\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.decimal\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"decimal\": \",\"\r\n\t\t\t *          \"thousands\": \".\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sDecimal\": \"\",\r\n\r\n\r\n                /**\r\n                 * DataTables has a build in number formatter (`formatNumber`) which is\r\n                 * used to format large numbers that are used in the table information.\r\n                 * By default a comma is used, but this can be trivially changed to any\r\n                 * character you wish with this parameter.\r\n                 *  @type string\r\n                 *  @default ,\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.thousands\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"thousands\": \"'\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sThousands\": \",\",\r\n\r\n\r\n                /**\r\n                 * Detail the action that will be taken when the drop down menu for the\r\n                 * pagination length option is changed. The '_MENU_' variable is replaced\r\n                 * with a default select list of 10, 25, 50 and 100, and can be replaced\r\n                 * with a custom select box if required.\r\n                 *  @type string\r\n                 *  @default Show _MENU_ entries\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.lengthMenu\r\n                 *\r\n                 *  @example\r\n                 *    // Language change only\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"lengthMenu\": \"Display _MENU_ records\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 *\r\n                 *  @example\r\n                 *    // Language and options change\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"lengthMenu\": 'Display <select>'+\r\n\t\t\t *            '<option value=\"10\">10</option>'+\r\n\t\t\t *            '<option value=\"20\">20</option>'+\r\n\t\t\t *            '<option value=\"30\">30</option>'+\r\n\t\t\t *            '<option value=\"40\">40</option>'+\r\n\t\t\t *            '<option value=\"50\">50</option>'+\r\n\t\t\t *            '<option value=\"-1\">All</option>'+\r\n\t\t\t *            '</select> records'\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sLengthMenu\": \"Show _MENU_ entries\",\r\n\r\n\r\n                /**\r\n                 * When using Ajax sourced data and during the first draw when DataTables is\r\n                 * gathering the data, this message is shown in an empty row in the table to\r\n                 * indicate to the end user the the data is being loaded. Note that this\r\n                 * parameter is not used when loading data by server-side processing, just\r\n                 * Ajax sourced data with client-side processing.\r\n                 *  @type string\r\n                 *  @default Loading...\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.loadingRecords\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"loadingRecords\": \"Please wait - loading...\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sLoadingRecords\": \"Loading...\",\r\n\r\n\r\n                /**\r\n                 * Text which is displayed when the table is processing a user action\r\n                 * (usually a sort command or similar).\r\n                 *  @type string\r\n                 *  @default Processing...\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.processing\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"processing\": \"DataTables is currently busy\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sProcessing\": \"Processing...\",\r\n\r\n\r\n                /**\r\n                 * Details the actions that will be taken when the user types into the\r\n                 * filtering input text box. The variable \"_INPUT_\", if used in the string,\r\n                 * is replaced with the HTML text box for the filtering input allowing\r\n                 * control over where it appears in the string. If \"_INPUT_\" is not given\r\n                 * then the input box is appended to the string automatically.\r\n                 *  @type string\r\n                 *  @default Search:\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.search\r\n                 *\r\n                 *  @example\r\n                 *    // Input text box will be appended at the end automatically\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"search\": \"Filter records:\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 *\r\n                 *  @example\r\n                 *    // Specify where the filter should appear\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"search\": \"Apply filter _INPUT_ to table\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sSearch\": \"Search:\",\r\n\r\n\r\n                /**\r\n                 * Assign a `placeholder` attribute to the search `input` element\r\n                 *  @type string\r\n                 *  @default\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.searchPlaceholder\r\n                 */\r\n                \"sSearchPlaceholder\": \"\",\r\n\r\n\r\n                /**\r\n                 * All of the language information can be stored in a file on the\r\n                 * server-side, which DataTables will look up if this parameter is passed.\r\n                 * It must store the URL of the language file, which is in a JSON format,\r\n                 * and the object has the same properties as the oLanguage object in the\r\n                 * initialiser object (i.e. the above parameters). Please refer to one of\r\n                 * the example language files to see how this works in action.\r\n                 *  @type string\r\n                 *  @default <i>Empty string - i.e. disabled</i>\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.url\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sUrl\": \"\",\r\n\r\n\r\n                /**\r\n                 * Text shown inside the table records when the is no information to be\r\n                 * displayed after filtering. `emptyTable` is shown when there is simply no\r\n                 * information in the table at all (regardless of filtering).\r\n                 *  @type string\r\n                 *  @default No matching records found\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.zeroRecords\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"zeroRecords\": \"No records to display\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sZeroRecords\": \"No matching records found\"\r\n            },\r\n\r\n\r\n            /**\r\n             * This parameter allows you to have define the global filtering state at\r\n             * initialisation time. As an object the `search` parameter must be\r\n             * defined, but all other parameters are optional. When `regex` is true,\r\n             * the search string will be treated as a regular expression, when false\r\n             * (default) it will be treated as a straight string. When `smart`\r\n             * DataTables will use it's smart filtering methods (to word match at\r\n             * any point in the data), when false this will not be done.\r\n             *  @namespace\r\n             *  @extends DataTable.models.oSearch\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.search\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"search\": {\"search\": \"Initial search\"}\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"oSearch\": $.extend( {}, DataTable.models.oSearch ),\r\n\r\n\r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             * By default DataTables will look for the property `data` (or `aaData` for\r\n             * compatibility with DataTables 1.9-) when obtaining data from an Ajax\r\n             * source or for server-side processing - this parameter allows that\r\n             * property to be changed. You can use Javascript dotted object notation to\r\n             * get a data source for multiple levels of nesting.\r\n             *  @type string\r\n             *  @default data\r\n             *\r\n             *  @dtopt Options\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.ajaxDataProp\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"sAjaxDataProp\": \"data\",\r\n\r\n\r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             * You can instruct DataTables to load data from an external\r\n             * source using this parameter (use aData if you want to pass data in you\r\n             * already have). Simply provide a url a JSON object can be obtained from.\r\n             *  @type string\r\n             *  @default null\r\n             *\r\n             *  @dtopt Options\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.ajaxSource\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"sAjaxSource\": null,\r\n\r\n\r\n            /**\r\n             * This initialisation variable allows you to specify exactly where in the\r\n             * DOM you want DataTables to inject the various controls it adds to the page\r\n             * (for example you might want the pagination controls at the top of the\r\n             * table). DIV elements (with or without a custom class) can also be added to\r\n             * aid styling. The follow syntax is used:\r\n             *   <ul>\r\n             *     <li>The following options are allowed:\r\n             *       <ul>\r\n             *         <li>'l' - Length changing</li>\r\n             *         <li>'f' - Filtering input</li>\r\n             *         <li>'t' - The table!</li>\r\n             *         <li>'i' - Information</li>\r\n             *         <li>'p' - Pagination</li>\r\n             *         <li>'r' - pRocessing</li>\r\n             *       </ul>\r\n             *     </li>\r\n             *     <li>The following constants are allowed:\r\n             *       <ul>\r\n             *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\r\n             *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\r\n             *       </ul>\r\n             *     </li>\r\n             *     <li>The following syntax is expected:\r\n             *       <ul>\r\n             *         <li>'&lt;' and '&gt;' - div elements</li>\r\n             *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\r\n             *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\r\n             *       </ul>\r\n             *     </li>\r\n             *     <li>Examples:\r\n             *       <ul>\r\n             *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\r\n             *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\r\n             *       </ul>\r\n             *     </li>\r\n             *   </ul>\r\n             *  @type string\r\n             *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\r\n             *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.dom\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sDom\": \"lfrtip\",\r\n\r\n\r\n            /**\r\n             * DataTables features four different built-in options for the buttons to\r\n             * display for pagination control:\r\n             *\r\n             * * `simple` - 'Previous' and 'Next' buttons only\r\n             * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\r\n             * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\r\n             * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus\r\n             *   page numbers\r\n             *\r\n             * Further methods can be added using {@link DataTable.ext.oPagination}.\r\n             *  @type string\r\n             *  @default simple_numbers\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.pagingType\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"pagingType\": \"full_numbers\"\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"sPaginationType\": \"simple_numbers\",\r\n\r\n\r\n            /**\r\n             * Enable horizontal scrolling. When a table is too wide to fit into a\r\n             * certain layout, or you have a large number of columns in the table, you\r\n             * can enable x-scrolling to show the table in a viewport, which can be\r\n             * scrolled. This property can be `true` which will allow the table to\r\n             * scroll horizontally when needed, or any CSS unit, or a number (in which\r\n             * case it will be treated as a pixel measurement). Setting as simply `true`\r\n             * is recommended.\r\n             *  @type boolean|string\r\n             *  @default <i>blank string - i.e. disabled</i>\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.scrollX\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"scrollX\": true,\r\n\t\t *        \"scrollCollapse\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sScrollX\": \"\",\r\n\r\n\r\n            /**\r\n             * This property can be used to force a DataTable to use more width than it\r\n             * might otherwise do when x-scrolling is enabled. For example if you have a\r\n             * table which requires to be well spaced, this parameter is useful for\r\n             * \"over-sizing\" the table, and thus forcing scrolling. This property can by\r\n             * any CSS unit, or a number (in which case it will be treated as a pixel\r\n             * measurement).\r\n             *  @type string\r\n             *  @default <i>blank string - i.e. disabled</i>\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.scrollXInner\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"scrollX\": \"100%\",\r\n\t\t *        \"scrollXInner\": \"110%\"\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sScrollXInner\": \"\",\r\n\r\n\r\n            /**\r\n             * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\r\n             * to the given height, and enable scrolling for any data which overflows the\r\n             * current viewport. This can be used as an alternative to paging to display\r\n             * a lot of data in a small area (although paging and scrolling can both be\r\n             * enabled at the same time). This property can be any CSS unit, or a number\r\n             * (in which case it will be treated as a pixel measurement).\r\n             *  @type string\r\n             *  @default <i>blank string - i.e. disabled</i>\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.scrollY\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"scrollY\": \"200px\",\r\n\t\t *        \"paginate\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sScrollY\": \"\",\r\n\r\n\r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             * Set the HTTP method that is used to make the Ajax call for server-side\r\n             * processing or Ajax sourced data.\r\n             *  @type string\r\n             *  @default GET\r\n             *\r\n             *  @dtopt Options\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.serverMethod\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"sServerMethod\": \"GET\",\r\n\r\n\r\n            /**\r\n             * DataTables makes use of renderers when displaying HTML elements for\r\n             * a table. These renderers can be added or modified by plug-ins to\r\n             * generate suitable mark-up for a site. For example the Bootstrap\r\n             * integration plug-in for DataTables uses a paging button renderer to\r\n             * display pagination buttons in the mark-up required by Bootstrap.\r\n             *\r\n             * For further information about the renderers available see\r\n             * DataTable.ext.renderer\r\n             *  @type string|object\r\n             *  @default null\r\n             *\r\n             *  @name DataTable.defaults.renderer\r\n             *\r\n             */\r\n            \"renderer\": null\r\n        };\r\n\r\n        _fnHungarianMap( DataTable.defaults );\r\n\r\n\r\n\r\n        /*\r\n         * Developer note - See note in model.defaults.js about the use of Hungarian\r\n         * notation and camel case.\r\n         */\r\n\r\n        /**\r\n         * Column options that can be given to DataTables at initialisation time.\r\n         *  @namespace\r\n         */\r\n        DataTable.defaults.column = {\r\n            /**\r\n             * Define which column(s) an order will occur on for this column. This\r\n             * allows a column's ordering to take multiple columns into account when\r\n             * doing a sort or use the data from a different column. For example first\r\n             * name / last name columns make sense to do a multi-column sort over the\r\n             * two columns.\r\n             *  @type array|int\r\n             *  @default null <i>Takes the value of the column index automatically</i>\r\n             *\r\n             *  @name DataTable.defaults.column.orderData\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\r\n\t\t *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\r\n\t\t *          { \"orderData\": 2, \"targets\": [ 2 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"orderData\": [ 0, 1 ] },\r\n\t\t *          { \"orderData\": [ 1, 0 ] },\r\n\t\t *          { \"orderData\": 2 },\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"aDataSort\": null,\r\n            \"iDataSort\": -1,\r\n\r\n\r\n            /**\r\n             * You can control the default ordering direction, and even alter the\r\n             * behaviour of the sort handler (i.e. only allow ascending ordering etc)\r\n             * using this parameter.\r\n             *  @type array\r\n             *  @default [ 'asc', 'desc' ]\r\n             *\r\n             *  @name DataTable.defaults.column.orderSequence\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\r\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\r\n\t\t *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          null,\r\n\t\t *          { \"orderSequence\": [ \"asc\" ] },\r\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\r\n\t\t *          { \"orderSequence\": [ \"desc\" ] },\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"asSorting\": [ 'asc', 'desc' ],\r\n\r\n\r\n            /**\r\n             * Enable or disable filtering on the data in this column.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @name DataTable.defaults.column.searchable\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"searchable\": false, \"targets\": [ 0 ] }\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"searchable\": false },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             */\r\n            \"bSearchable\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable ordering on this column.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @name DataTable.defaults.column.orderable\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"orderable\": false, \"targets\": [ 0 ] }\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"orderable\": false },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             */\r\n            \"bSortable\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable the display of this column.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @name DataTable.defaults.column.visible\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"visible\": false, \"targets\": [ 0 ] }\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"visible\": false },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             */\r\n            \"bVisible\": true,\r\n\r\n\r\n            /**\r\n             * Developer definable function that is called whenever a cell is created (Ajax source,\r\n             * etc) or processed for input (DOM source). This can be used as a compliment to mRender\r\n             * allowing you to modify the DOM element (add background colour for example) when the\r\n             * element is available.\r\n             *  @type function\r\n             *  @param {element} td The TD node that has been created\r\n             *  @param {*} cellData The Data for the cell\r\n             *  @param {array|object} rowData The data for the whole row\r\n             *  @param {int} row The row index for the aoData data store\r\n             *  @param {int} col The column index for aoColumns\r\n             *\r\n             *  @name DataTable.defaults.column.createdCell\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [3],\r\n\t\t *          \"createdCell\": function (td, cellData, rowData, row, col) {\r\n\t\t *            if ( cellData == \"1.7\" ) {\r\n\t\t *              $(td).css('color', 'blue')\r\n\t\t *            }\r\n\t\t *          }\r\n\t\t *        } ]\r\n\t\t *      });\r\n\t\t *    } );\r\n             */\r\n            \"fnCreatedCell\": null,\r\n\r\n\r\n            /**\r\n             * This parameter has been replaced by `data` in DataTables to ensure naming\r\n             * consistency. `dataProp` can still be used, as there is backwards\r\n             * compatibility in DataTables for this option, but it is strongly\r\n             * recommended that you use `data` in preference to `dataProp`.\r\n             *  @name DataTable.defaults.column.dataProp\r\n             */\r\n\r\n\r\n            /**\r\n             * This property can be used to read data from any data source property,\r\n             * including deeply nested objects / properties. `data` can be given in a\r\n             * number of different ways which effect its behaviour:\r\n             *\r\n             * * `integer` - treated as an array index for the data source. This is the\r\n             *   default that DataTables uses (incrementally increased for each column).\r\n             * * `string` - read an object property from the data source. There are\r\n             *   three 'special' options that can be used in the string to alter how\r\n             *   DataTables reads the data from the source object:\r\n             *    * `.` - Dotted Javascript notation. Just as you use a `.` in\r\n             *      Javascript to read from nested objects, so to can the options\r\n             *      specified in `data`. For example: `browser.version` or\r\n             *      `browser.name`. If your object parameter name contains a period, use\r\n             *      `\\\\` to escape it - i.e. `first\\\\.name`.\r\n             *    * `[]` - Array notation. DataTables can automatically combine data\r\n             *      from and array source, joining the data with the characters provided\r\n             *      between the two brackets. For example: `name[, ]` would provide a\r\n             *      comma-space separated list from the source array. If no characters\r\n             *      are provided between the brackets, the original array source is\r\n             *      returned.\r\n             *    * `()` - Function notation. Adding `()` to the end of a parameter will\r\n             *      execute a function of the name given. For example: `browser()` for a\r\n             *      simple function on the data source, `browser.version()` for a\r\n             *      function in a nested property or even `browser().version` to get an\r\n             *      object property if the function called returns an object. Note that\r\n             *      function notation is recommended for use in `render` rather than\r\n             *      `data` as it is much simpler to use as a renderer.\r\n             * * `null` - use the original data source for the row rather than plucking\r\n             *   data directly from it. This action has effects on two other\r\n             *   initialisation options:\r\n             *    * `defaultContent` - When null is given as the `data` option and\r\n             *      `defaultContent` is specified for the column, the value defined by\r\n             *      `defaultContent` will be used for the cell.\r\n             *    * `render` - When null is used for the `data` option and the `render`\r\n             *      option is specified for the column, the whole data source for the\r\n             *      row is used for the renderer.\r\n             * * `function` - the function given will be executed whenever DataTables\r\n             *   needs to set or get the data for a cell in the column. The function\r\n             *   takes three parameters:\r\n             *    * Parameters:\r\n             *      * `{array|object}` The data source for the row\r\n             *      * `{string}` The type call data requested - this will be 'set' when\r\n             *        setting data or 'filter', 'display', 'type', 'sort' or undefined\r\n             *        when gathering data. Note that when `undefined` is given for the\r\n             *        type DataTables expects to get the raw data for the object back<\r\n             *      * `{*}` Data to set when the second parameter is 'set'.\r\n             *    * Return:\r\n             *      * The return value from the function is not required when 'set' is\r\n             *        the type of call, but otherwise the return is what will be used\r\n             *        for the data requested.\r\n             *\r\n             * Note that `data` is a getter and setter option. If you just require\r\n             * formatting of data for output, you will likely want to use `render` which\r\n             * is simply a getter and thus simpler to use.\r\n             *\r\n             * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\r\n             * name change reflects the flexibility of this property and is consistent\r\n             * with the naming of mRender. If 'mDataProp' is given, then it will still\r\n             * be used by DataTables, as it automatically maps the old name to the new\r\n             * if required.\r\n             *\r\n             *  @type string|int|function|null\r\n             *  @default null <i>Use automatically calculated column index</i>\r\n             *\r\n             *  @name DataTable.defaults.column.data\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Read table data from objects\r\n             *    // JSON structure for each row:\r\n             *    //   {\r\n\t\t *    //      \"engine\": {value},\r\n\t\t *    //      \"browser\": {value},\r\n\t\t *    //      \"platform\": {value},\r\n\t\t *    //      \"version\": {value},\r\n\t\t *    //      \"grade\": {value}\r\n\t\t *    //   }\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"ajaxSource\": \"sources/objects.txt\",\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"data\": \"engine\" },\r\n\t\t *          { \"data\": \"browser\" },\r\n\t\t *          { \"data\": \"platform\" },\r\n\t\t *          { \"data\": \"version\" },\r\n\t\t *          { \"data\": \"grade\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Read information from deeply nested objects\r\n             *    // JSON structure for each row:\r\n             *    //   {\r\n\t\t *    //      \"engine\": {value},\r\n\t\t *    //      \"browser\": {value},\r\n\t\t *    //      \"platform\": {\r\n\t\t *    //         \"inner\": {value}\r\n\t\t *    //      },\r\n\t\t *    //      \"details\": [\r\n\t\t *    //         {value}, {value}\r\n\t\t *    //      ]\r\n\t\t *    //   }\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"data\": \"engine\" },\r\n\t\t *          { \"data\": \"browser\" },\r\n\t\t *          { \"data\": \"platform.inner\" },\r\n\t\t *          { \"data\": \"platform.details.0\" },\r\n\t\t *          { \"data\": \"platform.details.1\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `data` as a function to provide different information for\r\n             *    // sorting, filtering and display. In this case, currency (price)\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": function ( source, type, val ) {\r\n\t\t *            if (type === 'set') {\r\n\t\t *              source.price = val;\r\n\t\t *              // Store the computed dislay and filter values for efficiency\r\n\t\t *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\r\n\t\t *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\r\n\t\t *              return;\r\n\t\t *            }\r\n\t\t *            else if (type === 'display') {\r\n\t\t *              return source.price_display;\r\n\t\t *            }\r\n\t\t *            else if (type === 'filter') {\r\n\t\t *              return source.price_filter;\r\n\t\t *            }\r\n\t\t *            // 'sort', 'type' and undefined all just use the integer\r\n\t\t *            return source.price;\r\n\t\t *          }\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using default content\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": null,\r\n\t\t *          \"defaultContent\": \"Click to edit\"\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using array notation - outputting a list from an array\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": \"name[, ]\"\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             */\r\n            \"mData\": null,\r\n\r\n\r\n            /**\r\n             * This property is the rendering partner to `data` and it is suggested that\r\n             * when you want to manipulate data for display (including filtering,\r\n             * sorting etc) without altering the underlying data for the table, use this\r\n             * property. `render` can be considered to be the the read only companion to\r\n             * `data` which is read / write (then as such more complex). Like `data`\r\n             * this option can be given in a number of different ways to effect its\r\n             * behaviour:\r\n             *\r\n             * * `integer` - treated as an array index for the data source. This is the\r\n             *   default that DataTables uses (incrementally increased for each column).\r\n             * * `string` - read an object property from the data source. There are\r\n             *   three 'special' options that can be used in the string to alter how\r\n             *   DataTables reads the data from the source object:\r\n             *    * `.` - Dotted Javascript notation. Just as you use a `.` in\r\n             *      Javascript to read from nested objects, so to can the options\r\n             *      specified in `data`. For example: `browser.version` or\r\n             *      `browser.name`. If your object parameter name contains a period, use\r\n             *      `\\\\` to escape it - i.e. `first\\\\.name`.\r\n             *    * `[]` - Array notation. DataTables can automatically combine data\r\n             *      from and array source, joining the data with the characters provided\r\n             *      between the two brackets. For example: `name[, ]` would provide a\r\n             *      comma-space separated list from the source array. If no characters\r\n             *      are provided between the brackets, the original array source is\r\n             *      returned.\r\n             *    * `()` - Function notation. Adding `()` to the end of a parameter will\r\n             *      execute a function of the name given. For example: `browser()` for a\r\n             *      simple function on the data source, `browser.version()` for a\r\n             *      function in a nested property or even `browser().version` to get an\r\n             *      object property if the function called returns an object.\r\n             * * `object` - use different data for the different data types requested by\r\n             *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\r\n             *   of the object is the data type the property refers to and the value can\r\n             *   defined using an integer, string or function using the same rules as\r\n             *   `render` normally does. Note that an `_` option _must_ be specified.\r\n             *   This is the default value to use if you haven't specified a value for\r\n             *   the data type requested by DataTables.\r\n             * * `function` - the function given will be executed whenever DataTables\r\n             *   needs to set or get the data for a cell in the column. The function\r\n             *   takes three parameters:\r\n             *    * Parameters:\r\n             *      * {array|object} The data source for the row (based on `data`)\r\n             *      * {string} The type call data requested - this will be 'filter',\r\n             *        'display', 'type' or 'sort'.\r\n             *      * {array|object} The full data source for the row (not based on\r\n             *        `data`)\r\n             *    * Return:\r\n             *      * The return value from the function is what will be used for the\r\n             *        data requested.\r\n             *\r\n             *  @type string|int|function|object|null\r\n             *  @default null Use the data source value.\r\n             *\r\n             *  @name DataTable.defaults.column.render\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Create a comma separated list from an array of objects\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"data\": \"engine\" },\r\n\t\t *          { \"data\": \"browser\" },\r\n\t\t *          {\r\n\t\t *            \"data\": \"platform\",\r\n\t\t *            \"render\": \"[, ].name\"\r\n\t\t *          }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Execute a function to obtain data\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source\r\n\t\t *          \"render\": \"browserName()\"\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // As an object, extracting different data for the different types\r\n             *    // This would be used with a data source such as:\r\n             *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\r\n             *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\r\n             *    // (which has both forms) is used for filtering for if a user inputs either format, while\r\n             *    // the formatted phone number is the one that is shown in the table.\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source\r\n\t\t *          \"render\": {\r\n\t\t *            \"_\": \"phone\",\r\n\t\t *            \"filter\": \"phone_filter\",\r\n\t\t *            \"display\": \"phone_display\"\r\n\t\t *          }\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Use as a function to create a link from the data source\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": \"download_link\",\r\n\t\t *          \"render\": function ( data, type, full ) {\r\n\t\t *            return '<a href=\"'+data+'\">Download</a>';\r\n\t\t *          }\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"mRender\": null,\r\n\r\n\r\n            /**\r\n             * Change the cell type created for the column - either TD cells or TH cells. This\r\n             * can be useful as TH cells have semantic meaning in the table body, allowing them\r\n             * to act as a header for a row (you may wish to add scope='row' to the TH elements).\r\n             *  @type string\r\n             *  @default td\r\n             *\r\n             *  @name DataTable.defaults.column.cellType\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Make the first column use TH cells\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"cellType\": \"th\"\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sCellType\": \"td\",\r\n\r\n\r\n            /**\r\n             * Class to give to each cell in this column.\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             *\r\n             *  @name DataTable.defaults.column.class\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"class\": \"my_class\" },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sClass\": \"\",\r\n\r\n            /**\r\n             * When DataTables calculates the column widths to assign to each column,\r\n             * it finds the longest string in each column and then constructs a\r\n             * temporary table and reads the widths from that. The problem with this\r\n             * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\r\n             * string - thus the calculation can go wrong (doing it properly and putting\r\n             * it into an DOM object and measuring that is horribly(!) slow). Thus as\r\n             * a \"work around\" we provide this option. It will append its value to the\r\n             * text that is found to be the longest string for the column - i.e. padding.\r\n             * Generally you shouldn't need this!\r\n             *  @type string\r\n             *  @default <i>Empty string<i>\r\n             *\r\n             *  @name DataTable.defaults.column.contentPadding\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          {\r\n\t\t *            \"contentPadding\": \"mmm\"\r\n\t\t *          }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sContentPadding\": \"\",\r\n\r\n\r\n            /**\r\n             * Allows a default value to be given for a column's data, and will be used\r\n             * whenever a null data source is encountered (this can be because `data`\r\n             * is set to null, or because the data source itself is null).\r\n             *  @type string\r\n             *  @default null\r\n             *\r\n             *  @name DataTable.defaults.column.defaultContent\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          {\r\n\t\t *            \"data\": null,\r\n\t\t *            \"defaultContent\": \"Edit\",\r\n\t\t *            \"targets\": [ -1 ]\r\n\t\t *          }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          {\r\n\t\t *            \"data\": null,\r\n\t\t *            \"defaultContent\": \"Edit\"\r\n\t\t *          }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sDefaultContent\": null,\r\n\r\n\r\n            /**\r\n             * This parameter is only used in DataTables' server-side processing. It can\r\n             * be exceptionally useful to know what columns are being displayed on the\r\n             * client side, and to map these to database fields. When defined, the names\r\n             * also allow DataTables to reorder information from the server if it comes\r\n             * back in an unexpected order (i.e. if you switch your columns around on the\r\n             * client-side, your server-side code does not also need updating).\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             *\r\n             *  @name DataTable.defaults.column.name\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"name\": \"engine\", \"targets\": [ 0 ] },\r\n\t\t *          { \"name\": \"browser\", \"targets\": [ 1 ] },\r\n\t\t *          { \"name\": \"platform\", \"targets\": [ 2 ] },\r\n\t\t *          { \"name\": \"version\", \"targets\": [ 3 ] },\r\n\t\t *          { \"name\": \"grade\", \"targets\": [ 4 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"name\": \"engine\" },\r\n\t\t *          { \"name\": \"browser\" },\r\n\t\t *          { \"name\": \"platform\" },\r\n\t\t *          { \"name\": \"version\" },\r\n\t\t *          { \"name\": \"grade\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sName\": \"\",\r\n\r\n\r\n            /**\r\n             * Defines a data source type for the ordering which can be used to read\r\n             * real-time information from the table (updating the internally cached\r\n             * version) prior to ordering. This allows ordering to occur on user\r\n             * editable elements such as form inputs.\r\n             *  @type string\r\n             *  @default std\r\n             *\r\n             *  @name DataTable.defaults.column.orderDataType\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\r\n\t\t *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\r\n\t\t *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\r\n\t\t *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          { \"orderDataType\": \"dom-text\" },\r\n\t\t *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\r\n\t\t *          { \"orderDataType\": \"dom-select\" },\r\n\t\t *          { \"orderDataType\": \"dom-checkbox\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sSortDataType\": \"std\",\r\n\r\n\r\n            /**\r\n             * The title of this column.\r\n             *  @type string\r\n             *  @default null <i>Derived from the 'TH' value for this column in the\r\n             *    original HTML table.</i>\r\n             *\r\n             *  @name DataTable.defaults.column.title\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"title\": \"My column title\" },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sTitle\": null,\r\n\r\n\r\n            /**\r\n             * The type allows you to specify how the data for this column will be\r\n             * ordered. Four types (string, numeric, date and html (which will strip\r\n             * HTML tags before ordering)) are currently available. Note that only date\r\n             * formats understood by Javascript's Date() object will be accepted as type\r\n             * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\r\n             * 'numeric', 'date' or 'html' (by default). Further types can be adding\r\n             * through plug-ins.\r\n             *  @type string\r\n             *  @default null <i>Auto-detected from raw data</i>\r\n             *\r\n             *  @name DataTable.defaults.column.type\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"type\": \"html\", \"targets\": [ 0 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"type\": \"html\" },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sType\": null,\r\n\r\n\r\n            /**\r\n             * Defining the width of the column, this parameter may take any CSS value\r\n             * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\r\n             * been given a specific width through this interface ensuring that the table\r\n             * remains readable.\r\n             *  @type string\r\n             *  @default null <i>Automatic</i>\r\n             *\r\n             *  @name DataTable.defaults.column.width\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"width\": \"20%\", \"targets\": [ 0 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"width\": \"20%\" },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sWidth\": null\r\n        };\r\n\r\n        _fnHungarianMap( DataTable.defaults.column );\r\n\r\n\r\n\r\n        /**\r\n         * DataTables settings object - this holds all the information needed for a\r\n         * given table, including configuration, data and current application of the\r\n         * table options. DataTables does not have a single instance for each DataTable\r\n         * with the settings attached to that instance, but rather instances of the\r\n         * DataTable \"class\" are created on-the-fly as needed (typically by a\r\n         * $().dataTable() call) and the settings object is then applied to that\r\n         * instance.\r\n         *\r\n         * Note that this object is related to {@link DataTable.defaults} but this\r\n         * one is the internal data store for DataTables's cache of columns. It should\r\n         * NOT be manipulated outside of DataTables. Any configuration should be done\r\n         * through the initialisation options.\r\n         *  @namespace\r\n         *  @todo Really should attach the settings object to individual instances so we\r\n         *    don't need to create new instances on each $().dataTable() call (if the\r\n         *    table already exists). It would also save passing oSettings around and\r\n         *    into every single function. However, this is a very significant\r\n         *    architecture change for DataTables and will almost certainly break\r\n         *    backwards compatibility with older installations. This is something that\r\n         *    will be done in 2.0.\r\n         */\r\n        DataTable.models.oSettings = {\r\n            /**\r\n             * Primary features of DataTables and their enablement state.\r\n             *  @namespace\r\n             */\r\n            \"oFeatures\": {\r\n\r\n                /**\r\n                 * Flag to say if DataTables should automatically try to calculate the\r\n                 * optimum table and columns widths (true) or not (false).\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bAutoWidth\": null,\r\n\r\n                /**\r\n                 * Delay the creation of TR and TD elements until they are actually\r\n                 * needed by a driven page draw. This can give a significant speed\r\n                 * increase for Ajax source and Javascript source data, but makes no\r\n                 * difference at all fro DOM and server-side processing tables.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bDeferRender\": null,\r\n\r\n                /**\r\n                 * Enable filtering on the table or not. Note that if this is disabled\r\n                 * then there is no filtering at all on the table, including fnFilter.\r\n                 * To just remove the filtering input use sDom and remove the 'f' option.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bFilter\": null,\r\n\r\n                /**\r\n                 * Table information element (the 'Showing x of y records' div) enable\r\n                 * flag.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bInfo\": null,\r\n\r\n                /**\r\n                 * Present a user control allowing the end user to change the page size\r\n                 * when pagination is enabled.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bLengthChange\": null,\r\n\r\n                /**\r\n                 * Pagination enabled or not. Note that if this is disabled then length\r\n                 * changing must also be disabled.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bPaginate\": null,\r\n\r\n                /**\r\n                 * Processing indicator enable flag whenever DataTables is enacting a\r\n                 * user request - typically an Ajax request for server-side processing.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bProcessing\": null,\r\n\r\n                /**\r\n                 * Server-side processing enabled flag - when enabled DataTables will\r\n                 * get all data from the server for every draw - there is no filtering,\r\n                 * sorting or paging done on the client-side.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bServerSide\": null,\r\n\r\n                /**\r\n                 * Sorting enablement flag.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bSort\": null,\r\n\r\n                /**\r\n                 * Multi-column sorting\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bSortMulti\": null,\r\n\r\n                /**\r\n                 * Apply a class to the columns which are being sorted to provide a\r\n                 * visual highlight or not. This can slow things down when enabled since\r\n                 * there is a lot of DOM interaction.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bSortClasses\": null,\r\n\r\n                /**\r\n                 * State saving enablement flag.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bStateSave\": null\r\n            },\r\n\r\n\r\n            /**\r\n             * Scrolling settings for a table.\r\n             *  @namespace\r\n             */\r\n            \"oScroll\": {\r\n                /**\r\n                 * When the table is shorter in height than sScrollY, collapse the\r\n                 * table container down to the height of the table (when true).\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bCollapse\": null,\r\n\r\n                /**\r\n                 * Width of the scrollbar for the web-browser's platform. Calculated\r\n                 * during table initialisation.\r\n                 *  @type int\r\n                 *  @default 0\r\n                 */\r\n                \"iBarWidth\": 0,\r\n\r\n                /**\r\n                 * Viewport width for horizontal scrolling. Horizontal scrolling is\r\n                 * disabled if an empty string.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type string\r\n                 */\r\n                \"sX\": null,\r\n\r\n                /**\r\n                 * Width to expand the table to when using x-scrolling. Typically you\r\n                 * should not need to use this.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type string\r\n                 *  @deprecated\r\n                 */\r\n                \"sXInner\": null,\r\n\r\n                /**\r\n                 * Viewport height for vertical scrolling. Vertical scrolling is disabled\r\n                 * if an empty string.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type string\r\n                 */\r\n                \"sY\": null\r\n            },\r\n\r\n            /**\r\n             * Language information for the table.\r\n             *  @namespace\r\n             *  @extends DataTable.defaults.oLanguage\r\n             */\r\n            \"oLanguage\": {\r\n                /**\r\n                 * Information callback function. See\r\n                 * {@link DataTable.defaults.fnInfoCallback}\r\n                 *  @type function\r\n                 *  @default null\r\n                 */\r\n                \"fnInfoCallback\": null\r\n            },\r\n\r\n            /**\r\n             * Browser support parameters\r\n             *  @namespace\r\n             */\r\n            \"oBrowser\": {\r\n                /**\r\n                 * Indicate if the browser incorrectly calculates width:100% inside a\r\n                 * scrolling element (IE6/7)\r\n                 *  @type boolean\r\n                 *  @default false\r\n                 */\r\n                \"bScrollOversize\": false,\r\n\r\n                /**\r\n                 * Determine if the vertical scrollbar is on the right or left of the\r\n                 * scrolling container - needed for rtl language layout, although not\r\n                 * all browsers move the scrollbar (Safari).\r\n                 *  @type boolean\r\n                 *  @default false\r\n                 */\r\n                \"bScrollbarLeft\": false\r\n            },\r\n\r\n\r\n            \"ajax\": null,\r\n\r\n\r\n            /**\r\n             * Array referencing the nodes which are used for the features. The\r\n             * parameters of this object match what is allowed by sDom - i.e.\r\n             *   <ul>\r\n             *     <li>'l' - Length changing</li>\r\n             *     <li>'f' - Filtering input</li>\r\n             *     <li>'t' - The table!</li>\r\n             *     <li>'i' - Information</li>\r\n             *     <li>'p' - Pagination</li>\r\n             *     <li>'r' - pRocessing</li>\r\n             *   </ul>\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aanFeatures\": [],\r\n\r\n            /**\r\n             * Store data information - see {@link DataTable.models.oRow} for detailed\r\n             * information.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoData\": [],\r\n\r\n            /**\r\n             * Array of indexes which are in the current display (after filtering etc)\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aiDisplay\": [],\r\n\r\n            /**\r\n             * Array of indexes for display - no filtering\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aiDisplayMaster\": [],\r\n\r\n            /**\r\n             * Store information about each column that is in use\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoColumns\": [],\r\n\r\n            /**\r\n             * Store information about the table's header\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoHeader\": [],\r\n\r\n            /**\r\n             * Store information about the table's footer\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoFooter\": [],\r\n\r\n            /**\r\n             * Store the applied global search information in case we want to force a\r\n             * research or compare the old search to a new one.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @namespace\r\n             *  @extends DataTable.models.oSearch\r\n             */\r\n            \"oPreviousSearch\": {},\r\n\r\n            /**\r\n             * Store the applied search for each column - see\r\n             * {@link DataTable.models.oSearch} for the format that is used for the\r\n             * filtering information for each column.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoPreSearchCols\": [],\r\n\r\n            /**\r\n             * Sorting that is applied to the table. Note that the inner arrays are\r\n             * used in the following manner:\r\n             * <ul>\r\n             *   <li>Index 0 - column number</li>\r\n             *   <li>Index 1 - current sorting direction</li>\r\n             * </ul>\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type array\r\n             *  @todo These inner arrays should really be objects\r\n             */\r\n            \"aaSorting\": null,\r\n\r\n            /**\r\n             * Sorting that is always applied to the table (i.e. prefixed in front of\r\n             * aaSorting).\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aaSortingFixed\": [],\r\n\r\n            /**\r\n             * Classes to use for the striping of a table.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"asStripeClasses\": null,\r\n\r\n            /**\r\n             * If restoring a table - we should restore its striping classes as well\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"asDestroyStripes\": [],\r\n\r\n            /**\r\n             * If restoring a table - we should restore its width\r\n             *  @type int\r\n             *  @default 0\r\n             */\r\n            \"sDestroyWidth\": 0,\r\n\r\n            /**\r\n             * Callback functions array for every time a row is inserted (i.e. on a draw).\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoRowCallback\": [],\r\n\r\n            /**\r\n             * Callback functions for the header on each draw.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoHeaderCallback\": [],\r\n\r\n            /**\r\n             * Callback function for the footer on each draw.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoFooterCallback\": [],\r\n\r\n            /**\r\n             * Array of callback functions for draw callback functions\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoDrawCallback\": [],\r\n\r\n            /**\r\n             * Array of callback functions for row created function\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoRowCreatedCallback\": [],\r\n\r\n            /**\r\n             * Callback functions for just before the table is redrawn. A return of\r\n             * false will be used to cancel the draw.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoPreDrawCallback\": [],\r\n\r\n            /**\r\n             * Callback functions for when the table has been initialised.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoInitComplete\": [],\r\n\r\n\r\n            /**\r\n             * Callbacks for modifying the settings to be stored for state saving, prior to\r\n             * saving state.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateSaveParams\": [],\r\n\r\n            /**\r\n             * Callbacks for modifying the settings that have been stored for state saving\r\n             * prior to using the stored values to restore the state.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateLoadParams\": [],\r\n\r\n            /**\r\n             * Callbacks for operating on the settings object once the saved state has been\r\n             * loaded\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateLoaded\": [],\r\n\r\n            /**\r\n             * Cache the table ID for quick access\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             */\r\n            \"sTableId\": \"\",\r\n\r\n            /**\r\n             * The TABLE node for the main table\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTable\": null,\r\n\r\n            /**\r\n             * Permanent ref to the thead element\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTHead\": null,\r\n\r\n            /**\r\n             * Permanent ref to the tfoot element - if it exists\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTFoot\": null,\r\n\r\n            /**\r\n             * Permanent ref to the tbody element\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTBody\": null,\r\n\r\n            /**\r\n             * Cache the wrapper node (contains all DataTables controlled elements)\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTableWrapper\": null,\r\n\r\n            /**\r\n             * Indicate if when using server-side processing the loading of data\r\n             * should be deferred until the second draw.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bDeferLoading\": false,\r\n\r\n            /**\r\n             * Indicate if all required information has been read in\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bInitialised\": false,\r\n\r\n            /**\r\n             * Information about open rows. Each object in the array has the parameters\r\n             * 'nTr' and 'nParent'\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoOpenRows\": [],\r\n\r\n            /**\r\n             * Dictate the positioning of DataTables' control elements - see\r\n             * {@link DataTable.model.oInit.sDom}.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sDom\": null,\r\n\r\n            /**\r\n             * Which type of pagination should be used.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             *  @default two_button\r\n             */\r\n            \"sPaginationType\": \"two_button\",\r\n\r\n            /**\r\n             * The state duration (for `stateSave`) in seconds.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type int\r\n             *  @default 0\r\n             */\r\n            \"iStateDuration\": 0,\r\n\r\n            /**\r\n             * Array of callback functions for state saving. Each array element is an\r\n             * object with the following parameters:\r\n             *   <ul>\r\n             *     <li>function:fn - function to call. Takes two parameters, oSettings\r\n             *       and the JSON string to save that has been thus far created. Returns\r\n             *       a JSON string to be inserted into a json object\r\n             *       (i.e. '\"param\": [ 0, 1, 2]')</li>\r\n             *     <li>string:sName - name of callback</li>\r\n             *   </ul>\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateSave\": [],\r\n\r\n            /**\r\n             * Array of callback functions for state loading. Each array element is an\r\n             * object with the following parameters:\r\n             *   <ul>\r\n             *     <li>function:fn - function to call. Takes two parameters, oSettings\r\n             *       and the object stored. May return false to cancel state loading</li>\r\n             *     <li>string:sName - name of callback</li>\r\n             *   </ul>\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateLoad\": [],\r\n\r\n            /**\r\n             * State that was saved. Useful for back reference\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"oSavedState\": null,\r\n\r\n            /**\r\n             * State that was loaded. Useful for back reference\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"oLoadedState\": null,\r\n\r\n            /**\r\n             * Source url for AJAX data for the table.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sAjaxSource\": null,\r\n\r\n            /**\r\n             * Property from a given object from which to read the table data from. This\r\n             * can be an empty string (when not server-side processing), in which case\r\n             * it is  assumed an an array is given directly.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             */\r\n            \"sAjaxDataProp\": null,\r\n\r\n            /**\r\n             * Note if draw should be blocked while getting data\r\n             *  @type boolean\r\n             *  @default true\r\n             */\r\n            \"bAjaxDataGet\": true,\r\n\r\n            /**\r\n             * The last jQuery XHR object that was used for server-side data gathering.\r\n             * This can be used for working with the XHR information in one of the\r\n             * callbacks\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"jqXHR\": null,\r\n\r\n            /**\r\n             * JSON returned from the server in the last Ajax request\r\n             *  @type object\r\n             *  @default undefined\r\n             */\r\n            \"json\": undefined,\r\n\r\n            /**\r\n             * Data submitted as part of the last Ajax request\r\n             *  @type object\r\n             *  @default undefined\r\n             */\r\n            \"oAjaxData\": undefined,\r\n\r\n            /**\r\n             * Function to get the server-side data.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type function\r\n             */\r\n            \"fnServerData\": null,\r\n\r\n            /**\r\n             * Functions which are called prior to sending an Ajax request so extra\r\n             * parameters can easily be sent to the server\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoServerParams\": [],\r\n\r\n            /**\r\n             * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\r\n             * required).\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             */\r\n            \"sServerMethod\": null,\r\n\r\n            /**\r\n             * Format numbers for display.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type function\r\n             */\r\n            \"fnFormatNumber\": null,\r\n\r\n            /**\r\n             * List of options that can be used for the user selectable length menu.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aLengthMenu\": null,\r\n\r\n            /**\r\n             * Counter for the draws that the table does. Also used as a tracker for\r\n             * server-side processing\r\n             *  @type int\r\n             *  @default 0\r\n             */\r\n            \"iDraw\": 0,\r\n\r\n            /**\r\n             * Indicate if a redraw is being done - useful for Ajax\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bDrawing\": false,\r\n\r\n            /**\r\n             * Draw index (iDraw) of the last error when parsing the returned data\r\n             *  @type int\r\n             *  @default -1\r\n             */\r\n            \"iDrawError\": -1,\r\n\r\n            /**\r\n             * Paging display length\r\n             *  @type int\r\n             *  @default 10\r\n             */\r\n            \"_iDisplayLength\": 10,\r\n\r\n            /**\r\n             * Paging start point - aiDisplay index\r\n             *  @type int\r\n             *  @default 0\r\n             */\r\n            \"_iDisplayStart\": 0,\r\n\r\n            /**\r\n             * Server-side processing - number of records in the result set\r\n             * (i.e. before filtering), Use fnRecordsTotal rather than\r\n             * this property to get the value of the number of records, regardless of\r\n             * the server-side processing setting.\r\n             *  @type int\r\n             *  @default 0\r\n             *  @private\r\n             */\r\n            \"_iRecordsTotal\": 0,\r\n\r\n            /**\r\n             * Server-side processing - number of records in the current display set\r\n             * (i.e. after filtering). Use fnRecordsDisplay rather than\r\n             * this property to get the value of the number of records, regardless of\r\n             * the server-side processing setting.\r\n             *  @type boolean\r\n             *  @default 0\r\n             *  @private\r\n             */\r\n            \"_iRecordsDisplay\": 0,\r\n\r\n            /**\r\n             * Flag to indicate if jQuery UI marking and classes should be used.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bJUI\": null,\r\n\r\n            /**\r\n             * The classes to use for the table\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            \"oClasses\": {},\r\n\r\n            /**\r\n             * Flag attached to the settings object so you can check in the draw\r\n             * callback if filtering has been done in the draw. Deprecated in favour of\r\n             * events.\r\n             *  @type boolean\r\n             *  @default false\r\n             *  @deprecated\r\n             */\r\n            \"bFiltered\": false,\r\n\r\n            /**\r\n             * Flag attached to the settings object so you can check in the draw\r\n             * callback if sorting has been done in the draw. Deprecated in favour of\r\n             * events.\r\n             *  @type boolean\r\n             *  @default false\r\n             *  @deprecated\r\n             */\r\n            \"bSorted\": false,\r\n\r\n            /**\r\n             * Indicate that if multiple rows are in the header and there is more than\r\n             * one unique cell per column, if the top one (true) or bottom one (false)\r\n             * should be used for sorting / title by DataTables.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bSortCellsTop\": null,\r\n\r\n            /**\r\n             * Initialisation object that is used for the table\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"oInit\": null,\r\n\r\n            /**\r\n             * Destroy callback functions - for plug-ins to attach themselves to the\r\n             * destroy so they can clean up markup and events.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoDestroyCallback\": [],\r\n\r\n\r\n            /**\r\n             * Get the number of records in the current record set, before filtering\r\n             *  @type function\r\n             */\r\n            \"fnRecordsTotal\": function ()\r\n            {\r\n                return _fnDataSource( this ) == 'ssp' ?\r\n                this._iRecordsTotal * 1 :\r\n                    this.aiDisplayMaster.length;\r\n            },\r\n\r\n            /**\r\n             * Get the number of records in the current record set, after filtering\r\n             *  @type function\r\n             */\r\n            \"fnRecordsDisplay\": function ()\r\n            {\r\n                return _fnDataSource( this ) == 'ssp' ?\r\n                this._iRecordsDisplay * 1 :\r\n                    this.aiDisplay.length;\r\n            },\r\n\r\n            /**\r\n             * Get the display end point - aiDisplay index\r\n             *  @type function\r\n             */\r\n            \"fnDisplayEnd\": function ()\r\n            {\r\n                var\r\n                    len      = this._iDisplayLength,\r\n                    start    = this._iDisplayStart,\r\n                    calc     = start + len,\r\n                    records  = this.aiDisplay.length,\r\n                    features = this.oFeatures,\r\n                    paginate = features.bPaginate;\r\n\r\n                if ( features.bServerSide ) {\r\n                    return paginate === false || len === -1 ?\r\n                    start + records :\r\n                        Math.min( start+len, this._iRecordsDisplay );\r\n                }\r\n                else {\r\n                    return ! paginate || calc>records || len===-1 ?\r\n                        records :\r\n                        calc;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * The DataTables object for this table\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"oInstance\": null,\r\n\r\n            /**\r\n             * Unique identifier for each instance of the DataTables object. If there\r\n             * is an ID on the table node, then it takes that value, otherwise an\r\n             * incrementing internal counter is used.\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sInstance\": null,\r\n\r\n            /**\r\n             * tabindex attribute value that is added to DataTables control elements, allowing\r\n             * keyboard navigation of the table and its controls.\r\n             */\r\n            \"iTabIndex\": 0,\r\n\r\n            /**\r\n             * DIV container for the footer scrolling table if scrolling\r\n             */\r\n            \"nScrollHead\": null,\r\n\r\n            /**\r\n             * DIV container for the footer scrolling table if scrolling\r\n             */\r\n            \"nScrollFoot\": null,\r\n\r\n            /**\r\n             * Last applied sort\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aLastSort\": [],\r\n\r\n            /**\r\n             * Stored plug-in instances\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            \"oPlugins\": {}\r\n        };\r\n\r\n        /**\r\n         * Extension object for DataTables that is used to provide all extension\r\n         * options.\r\n         *\r\n         * Note that the `DataTable.ext` object is available through\r\n         * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\r\n         * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\r\n         *  @namespace\r\n         *  @extends DataTable.models.ext\r\n         */\r\n\r\n\r\n        /**\r\n         * DataTables extensions\r\n         *\r\n         * This namespace acts as a collection area for plug-ins that can be used to\r\n         * extend DataTables capabilities. Indeed many of the build in methods\r\n         * use this method to provide their own capabilities (sorting methods for\r\n         * example).\r\n         *\r\n         * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\r\n         * reasons\r\n         *\r\n         *  @namespace\r\n         */\r\n        DataTable.ext = _ext = {\r\n            /**\r\n             * Element class names\r\n             *\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            classes: {},\r\n\r\n\r\n            /**\r\n             * Error reporting.\r\n             *\r\n             * How should DataTables report an error. Can take the value 'alert' or\r\n             * 'throw'\r\n             *\r\n             *  @type string\r\n             *  @default alert\r\n             */\r\n            errMode: \"alert\",\r\n\r\n\r\n            /**\r\n             * Feature plug-ins.\r\n             *\r\n             * This is an array of objects which describe the feature plug-ins that are\r\n             * available to DataTables. These feature plug-ins are then available for\r\n             * use through the `dom` initialisation option.\r\n             *\r\n             * Each feature plug-in is described by an object which must have the\r\n             * following properties:\r\n             *\r\n             * * `fnInit` - function that is used to initialise the plug-in,\r\n             * * `cFeature` - a character so the feature can be enabled by the `dom`\r\n             *   instillation option. This is case sensitive.\r\n             *\r\n             * The `fnInit` function has the following input parameters:\r\n             *\r\n             * 1. `{object}` DataTables settings object: see\r\n             *    {@link DataTable.models.oSettings}\r\n             *\r\n             * And the following return is expected:\r\n             *\r\n             * * {node|null} The element which contains your feature. Note that the\r\n             *   return may also be void if your plug-in does not require to inject any\r\n             *   DOM elements into DataTables control (`dom`) - for example this might\r\n             *   be useful when developing a plug-in which allows table control via\r\n             *   keyboard entry\r\n             *\r\n             *  @type array\r\n             *\r\n             *  @example\r\n             *    $.fn.dataTable.ext.features.push( {\r\n\t\t *      \"fnInit\": function( oSettings ) {\r\n\t\t *        return new TableTools( { \"oDTSettings\": oSettings } );\r\n\t\t *      },\r\n\t\t *      \"cFeature\": \"T\"\r\n\t\t *    } );\r\n             */\r\n            feature: [],\r\n\r\n\r\n            /**\r\n             * Row searching.\r\n             *\r\n             * This method of searching is complimentary to the default type based\r\n             * searching, and a lot more comprehensive as it allows you complete control\r\n             * over the searching logic. Each element in this array is a function\r\n             * (parameters described below) that is called for every row in the table,\r\n             * and your logic decides if it should be included in the searching data set\r\n             * or not.\r\n             *\r\n             * Searching functions have the following input parameters:\r\n             *\r\n             * 1. `{object}` DataTables settings object: see\r\n             *    {@link DataTable.models.oSettings}\r\n             * 2. `{array|object}` Data for the row to be processed (same as the\r\n             *    original format that was passed in as the data source, or an array\r\n             *    from a DOM data source\r\n             * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\r\n             *    can be useful to retrieve the `TR` element if you need DOM interaction.\r\n             *\r\n             * And the following return is expected:\r\n             *\r\n             * * {boolean} Include the row in the searched result set (true) or not\r\n             *   (false)\r\n             *\r\n             * Note that as with the main search ability in DataTables, technically this\r\n             * is \"filtering\", since it is subtractive. However, for consistency in\r\n             * naming we call it searching here.\r\n             *\r\n             *  @type array\r\n             *  @default []\r\n             *\r\n             *  @example\r\n             *    // The following example shows custom search being applied to the\r\n             *    // fourth column (i.e. the data[3] index) based on two input values\r\n             *    // from the end-user, matching the data in a certain range.\r\n             *    $.fn.dataTable.ext.search.push(\r\n             *      function( settings, data, dataIndex ) {\r\n\t\t *        var min = document.getElementById('min').value * 1;\r\n\t\t *        var max = document.getElementById('max').value * 1;\r\n\t\t *        var version = data[3] == \"-\" ? 0 : data[3]*1;\r\n\t\t *\r\n\t\t *        if ( min == \"\" && max == \"\" ) {\r\n\t\t *          return true;\r\n\t\t *        }\r\n\t\t *        else if ( min == \"\" && version < max ) {\r\n\t\t *          return true;\r\n\t\t *        }\r\n\t\t *        else if ( min < version && \"\" == max ) {\r\n\t\t *          return true;\r\n\t\t *        }\r\n\t\t *        else if ( min < version && version < max ) {\r\n\t\t *          return true;\r\n\t\t *        }\r\n\t\t *        return false;\r\n\t\t *      }\r\n             *    );\r\n             */\r\n            search: [],\r\n\r\n\r\n            /**\r\n             * Internal functions, exposed for used in plug-ins.\r\n             *\r\n             * Please note that you should not need to use the internal methods for\r\n             * anything other than a plug-in (and even then, try to avoid if possible).\r\n             * The internal function may change between releases.\r\n             *\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            internal: {},\r\n\r\n\r\n            /**\r\n             * Legacy configuration options. Enable and disable legacy options that\r\n             * are available in DataTables.\r\n             *\r\n             *  @type object\r\n             */\r\n            legacy: {\r\n                /**\r\n                 * Enable / disable DataTables 1.9 compatible server-side processing\r\n                 * requests\r\n                 *\r\n                 *  @type boolean\r\n                 *  @default null\r\n                 */\r\n                ajax: null\r\n            },\r\n\r\n\r\n            /**\r\n             * Pagination plug-in methods.\r\n             *\r\n             * Each entry in this object is a function and defines which buttons should\r\n             * be shown by the pagination rendering method that is used for the table:\r\n             * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\r\n             * buttons are displayed in the document, while the functions here tell it\r\n             * what buttons to display. This is done by returning an array of button\r\n             * descriptions (what each button will do).\r\n             *\r\n             * Pagination types (the four built in options and any additional plug-in\r\n             * options defined here) can be used through the `paginationType`\r\n             * initialisation parameter.\r\n             *\r\n             * The functions defined take two parameters:\r\n             *\r\n             * 1. `{int} page` The current page index\r\n             * 2. `{int} pages` The number of pages in the table\r\n             *\r\n             * Each function is expected to return an array where each element of the\r\n             * array can be one of:\r\n             *\r\n             * * `first` - Jump to first page when activated\r\n             * * `last` - Jump to last page when activated\r\n             * * `previous` - Show previous page when activated\r\n             * * `next` - Show next page when activated\r\n             * * `{int}` - Show page of the index given\r\n             * * `{array}` - A nested array containing the above elements to add a\r\n             *   containing 'DIV' element (might be useful for styling).\r\n             *\r\n             * Note that DataTables v1.9- used this object slightly differently whereby\r\n             * an object with two functions would be defined for each plug-in. That\r\n             * ability is still supported by DataTables 1.10+ to provide backwards\r\n             * compatibility, but this option of use is now decremented and no longer\r\n             * documented in DataTables 1.10+.\r\n             *\r\n             *  @type object\r\n             *  @default {}\r\n             *\r\n             *  @example\r\n             *    // Show previous, next and current page buttons only\r\n             *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\r\n\t\t *      return [ 'previous', page, 'next' ];\r\n\t\t *    };\r\n             */\r\n            pager: {},\r\n\r\n\r\n            renderer: {\r\n                pageButton: {},\r\n                header: {}\r\n            },\r\n\r\n\r\n            /**\r\n             * Ordering plug-ins - custom data source\r\n             *\r\n             * The extension options for ordering of data available here is complimentary\r\n             * to the default type based ordering that DataTables typically uses. It\r\n             * allows much greater control over the the data that is being used to\r\n             * order a column, but is necessarily therefore more complex.\r\n             *\r\n             * This type of ordering is useful if you want to do ordering based on data\r\n             * live from the DOM (for example the contents of an 'input' element) rather\r\n             * than just the static string that DataTables knows of.\r\n             *\r\n             * The way these plug-ins work is that you create an array of the values you\r\n             * wish to be ordering for the column in question and then return that\r\n             * array. The data in the array much be in the index order of the rows in\r\n             * the table (not the currently ordering order!). Which order data gathering\r\n             * function is run here depends on the `dt-init columns.orderDataType`\r\n             * parameter that is used for the column (if any).\r\n             *\r\n             * The functions defined take two parameters:\r\n             *\r\n             * 1. `{object}` DataTables settings object: see\r\n             *    {@link DataTable.models.oSettings}\r\n             * 2. `{int}` Target column index\r\n             *\r\n             * Each function is expected to return an array:\r\n             *\r\n             * * `{array}` Data for the column to be ordering upon\r\n             *\r\n             *  @type array\r\n             *\r\n             *  @example\r\n             *    // Ordering using `input` node values\r\n             *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\r\n             *    {\r\n\t\t *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\r\n\t\t *        return $('input', td).val();\r\n\t\t *      } );\r\n\t\t *    }\r\n             */\r\n            order: {},\r\n\r\n\r\n            /**\r\n             * Type based plug-ins.\r\n             *\r\n             * Each column in DataTables has a type assigned to it, either by automatic\r\n             * detection or by direct assignment using the `type` option for the column.\r\n             * The type of a column will effect how it is ordering and search (plug-ins\r\n             * can also make use of the column type if required).\r\n             *\r\n             * @namespace\r\n             */\r\n            type: {\r\n                /**\r\n                 * Type detection functions.\r\n                 *\r\n                 * The functions defined in this object are used to automatically detect\r\n                 * a column's type, making initialisation of DataTables super easy, even\r\n                 * when complex data is in the table.\r\n                 *\r\n                 * The functions defined take two parameters:\r\n                 *\r\n                 *  1. `{*}` Data from the column cell to be analysed\r\n                 *  2. `{settings}` DataTables settings object. This can be used to\r\n                 *     perform context specific type detection - for example detection\r\n                 *     based on language settings such as using a comma for a decimal\r\n                 *     place. Generally speaking the options from the settings will not\r\n                 *     be required\r\n                 *\r\n                 * Each function is expected to return:\r\n                 *\r\n                 * * `{string|null}` Data type detected, or null if unknown (and thus\r\n                 *   pass it on to the other type detection functions.\r\n                 *\r\n                 *  @type array\r\n                 *\r\n                 *  @example\r\n                 *    // Currency type detection plug-in:\r\n                 *    $.fn.dataTable.ext.type.detect.push(\r\n                 *      function ( data, settings ) {\r\n\t\t\t *        // Check the numeric part\r\n\t\t\t *        if ( ! $.isNumeric( data.substring(1) ) ) {\r\n\t\t\t *          return null;\r\n\t\t\t *        }\r\n\t\t\t *\r\n\t\t\t *        // Check prefixed by currency\r\n\t\t\t *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\r\n\t\t\t *          return 'currency';\r\n\t\t\t *        }\r\n\t\t\t *        return null;\r\n\t\t\t *      }\r\n                 *    );\r\n                 */\r\n                detect: [],\r\n\r\n\r\n                /**\r\n                 * Type based search formatting.\r\n                 *\r\n                 * The type based searching functions can be used to pre-format the\r\n                 * data to be search on. For example, it can be used to strip HTML\r\n                 * tags or to de-format telephone numbers for numeric only searching.\r\n                 *\r\n                 * Note that is a search is not defined for a column of a given type,\r\n                 * no search formatting will be performed.\r\n                 *\r\n                 * Pre-processing of searching data plug-ins - When you assign the sType\r\n                 * for a column (or have it automatically detected for you by DataTables\r\n                 * or a type detection plug-in), you will typically be using this for\r\n                 * custom sorting, but it can also be used to provide custom searching\r\n                 * by allowing you to pre-processing the data and returning the data in\r\n                 * the format that should be searched upon. This is done by adding\r\n                 * functions this object with a parameter name which matches the sType\r\n                 * for that target column. This is the corollary of <i>afnSortData</i>\r\n                 * for searching data.\r\n                 *\r\n                 * The functions defined take a single parameter:\r\n                 *\r\n                 *  1. `{*}` Data from the column cell to be prepared for searching\r\n                 *\r\n                 * Each function is expected to return:\r\n                 *\r\n                 * * `{string|null}` Formatted string that will be used for the searching.\r\n                 *\r\n                 *  @type object\r\n                 *  @default {}\r\n                 *\r\n                 *  @example\r\n                 *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\r\n\t\t\t *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\r\n\t\t\t *    }\r\n                 */\r\n                search: {},\r\n\r\n\r\n                /**\r\n                 * Type based ordering.\r\n                 *\r\n                 * The column type tells DataTables what ordering to apply to the table\r\n                 * when a column is sorted upon. The order for each type that is defined,\r\n                 * is defined by the functions available in this object.\r\n                 *\r\n                 * Each ordering option can be described by three properties added to\r\n                 * this object:\r\n                 *\r\n                 * * `{type}-pre` - Pre-formatting function\r\n                 * * `{type}-asc` - Ascending order function\r\n                 * * `{type}-desc` - Descending order function\r\n                 *\r\n                 * All three can be used together, only `{type}-pre` or only\r\n                 * `{type}-asc` and `{type}-desc` together. It is generally recommended\r\n                 * that only `{type}-pre` is used, as this provides the optimal\r\n                 * implementation in terms of speed, although the others are provided\r\n                 * for compatibility with existing Javascript sort functions.\r\n                 *\r\n                 * `{type}-pre`: Functions defined take a single parameter:\r\n                 *\r\n                 *  1. `{*}` Data from the column cell to be prepared for ordering\r\n                 *\r\n                 * And return:\r\n                 *\r\n                 * * `{*}` Data to be sorted upon\r\n                 *\r\n                 * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\r\n                 * functions, taking two parameters:\r\n                 *\r\n                 *  1. `{*}` Data to compare to the second parameter\r\n                 *  2. `{*}` Data to compare to the first parameter\r\n                 *\r\n                 * And returning:\r\n                 *\r\n                 * * `{*}` Ordering match: <0 if first parameter should be sorted lower\r\n                 *   than the second parameter, ===0 if the two parameters are equal and\r\n                 *   >0 if the first parameter should be sorted height than the second\r\n                 *   parameter.\r\n                 *\r\n                 *  @type object\r\n                 *  @default {}\r\n                 *\r\n                 *  @example\r\n                 *    // Numeric ordering of formatted numbers with a pre-formatter\r\n                 *    $.extend( $.fn.dataTable.ext.type.order, {\r\n\t\t\t *      \"string-pre\": function(x) {\r\n\t\t\t *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\r\n\t\t\t *        return parseFloat( a );\r\n\t\t\t *      }\r\n\t\t\t *    } );\r\n                 *\r\n                 *  @example\r\n                 *    // Case-sensitive string ordering, with no pre-formatting method\r\n                 *    $.extend( $.fn.dataTable.ext.order, {\r\n\t\t\t *      \"string-case-asc\": function(x,y) {\r\n\t\t\t *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n\t\t\t *      },\r\n\t\t\t *      \"string-case-desc\": function(x,y) {\r\n\t\t\t *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\r\n\t\t\t *      }\r\n\t\t\t *    } );\r\n                 */\r\n                order: {}\r\n            },\r\n\r\n            /**\r\n             * Unique DataTables instance counter\r\n             *\r\n             * @type int\r\n             * @private\r\n             */\r\n            _unique: 0,\r\n\r\n\r\n            //\r\n            // Depreciated\r\n            // The following properties are retained for backwards compatiblity only.\r\n            // The should not be used in new projects and will be removed in a future\r\n            // version\r\n            //\r\n\r\n            /**\r\n             * Version check function.\r\n             *  @type function\r\n             *  @depreciated Since 1.10\r\n             */\r\n            fnVersionCheck: DataTable.fnVersionCheck,\r\n\r\n\r\n            /**\r\n             * Index for what 'this' index API functions should use\r\n             *  @type int\r\n             *  @deprecated Since v1.10\r\n             */\r\n            iApiIndex: 0,\r\n\r\n\r\n            /**\r\n             * jQuery UI class container\r\n             *  @type object\r\n             *  @deprecated Since v1.10\r\n             */\r\n            oJUIClasses: {},\r\n\r\n\r\n            /**\r\n             * Software version\r\n             *  @type string\r\n             *  @deprecated Since v1.10\r\n             */\r\n            sVersion: DataTable.version\r\n        };\r\n\r\n\r\n        //\r\n        // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\r\n        //\r\n        $.extend( _ext, {\r\n            afnFiltering: _ext.search,\r\n            aTypes:       _ext.type.detect,\r\n            ofnSearch:    _ext.type.search,\r\n            oSort:        _ext.type.order,\r\n            afnSortData:  _ext.order,\r\n            aoFeatures:   _ext.feature,\r\n            oApi:         _ext.internal,\r\n            oStdClasses:  _ext.classes,\r\n            oPagination:  _ext.pager\r\n        } );\r\n\r\n\r\n        $.extend( DataTable.ext.classes, {\r\n            \"sTable\": \"dataTable\",\r\n            \"sNoFooter\": \"no-footer\",\r\n\r\n            /* Paging buttons */\r\n            \"sPageButton\": \"paginate_button\",\r\n            \"sPageButtonActive\": \"current\",\r\n            \"sPageButtonDisabled\": \"disabled\",\r\n\r\n            /* Striping classes */\r\n            \"sStripeOdd\": \"odd\",\r\n            \"sStripeEven\": \"even\",\r\n\r\n            /* Empty row */\r\n            \"sRowEmpty\": \"dataTables_empty\",\r\n\r\n            /* Features */\r\n            \"sWrapper\": \"dataTables_wrapper\",\r\n            \"sFilter\": \"dataTables_filter\",\r\n            \"sInfo\": \"dataTables_info\",\r\n            \"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */\r\n            \"sLength\": \"dataTables_length\",\r\n            \"sProcessing\": \"dataTables_processing\",\r\n\r\n            /* Sorting */\r\n            \"sSortAsc\": \"sorting_asc\",\r\n            \"sSortDesc\": \"sorting_desc\",\r\n            \"sSortable\": \"sorting\", /* Sortable in both directions */\r\n            \"sSortableAsc\": \"sorting_asc_disabled\",\r\n            \"sSortableDesc\": \"sorting_desc_disabled\",\r\n            \"sSortableNone\": \"sorting_disabled\",\r\n            \"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */\r\n\r\n            /* Filtering */\r\n            \"sFilterInput\": \"\",\r\n\r\n            /* Page length */\r\n            \"sLengthSelect\": \"\",\r\n\r\n            /* Scrolling */\r\n            \"sScrollWrapper\": \"dataTables_scroll\",\r\n            \"sScrollHead\": \"dataTables_scrollHead\",\r\n            \"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\r\n            \"sScrollBody\": \"dataTables_scrollBody\",\r\n            \"sScrollFoot\": \"dataTables_scrollFoot\",\r\n            \"sScrollFootInner\": \"dataTables_scrollFootInner\",\r\n\r\n            /* Misc */\r\n            \"sHeaderTH\": \"\",\r\n            \"sFooterTH\": \"\",\r\n\r\n            // Deprecated\r\n            \"sSortJUIAsc\": \"\",\r\n            \"sSortJUIDesc\": \"\",\r\n            \"sSortJUI\": \"\",\r\n            \"sSortJUIAscAllowed\": \"\",\r\n            \"sSortJUIDescAllowed\": \"\",\r\n            \"sSortJUIWrapper\": \"\",\r\n            \"sSortIcon\": \"\",\r\n            \"sJUIHeader\": \"\",\r\n            \"sJUIFooter\": \"\"\r\n        } );\r\n\r\n\r\n        (function() {\r\n\r\n            // Reused strings for better compression. Closure compiler appears to have a\r\n            // weird edge case where it is trying to expand strings rather than use the\r\n            // variable version. This results in about 200 bytes being added, for very\r\n            // little preference benefit since it this run on script load only.\r\n            var _empty = '';\r\n            _empty = '';\r\n\r\n            var _stateDefault = _empty + 'ui-state-default';\r\n            var _sortIcon     = _empty + 'css_right ui-icon ui-icon-';\r\n            var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';\r\n\r\n            $.extend( DataTable.ext.oJUIClasses, DataTable.ext.classes, {\r\n                /* Full numbers paging buttons */\r\n                \"sPageButton\":         \"fg-button ui-button \"+_stateDefault,\r\n                \"sPageButtonActive\":   \"ui-state-disabled\",\r\n                \"sPageButtonDisabled\": \"ui-state-disabled\",\r\n\r\n                /* Features */\r\n                \"sPaging\": \"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi \"+\r\n                \"ui-buttonset-multi paging_\", /* Note that the type is postfixed */\r\n\r\n                /* Sorting */\r\n                \"sSortAsc\":            _stateDefault+\" sorting_asc\",\r\n                \"sSortDesc\":           _stateDefault+\" sorting_desc\",\r\n                \"sSortable\":           _stateDefault+\" sorting\",\r\n                \"sSortableAsc\":        _stateDefault+\" sorting_asc_disabled\",\r\n                \"sSortableDesc\":       _stateDefault+\" sorting_desc_disabled\",\r\n                \"sSortableNone\":       _stateDefault+\" sorting_disabled\",\r\n                \"sSortJUIAsc\":         _sortIcon+\"triangle-1-n\",\r\n                \"sSortJUIDesc\":        _sortIcon+\"triangle-1-s\",\r\n                \"sSortJUI\":            _sortIcon+\"carat-2-n-s\",\r\n                \"sSortJUIAscAllowed\":  _sortIcon+\"carat-1-n\",\r\n                \"sSortJUIDescAllowed\": _sortIcon+\"carat-1-s\",\r\n                \"sSortJUIWrapper\":     \"DataTables_sort_wrapper\",\r\n                \"sSortIcon\":           \"DataTables_sort_icon\",\r\n\r\n                /* Scrolling */\r\n                \"sScrollHead\": \"dataTables_scrollHead \"+_stateDefault,\r\n                \"sScrollFoot\": \"dataTables_scrollFoot \"+_stateDefault,\r\n\r\n                /* Misc */\r\n                \"sHeaderTH\":  _stateDefault,\r\n                \"sFooterTH\":  _stateDefault,\r\n                \"sJUIHeader\": _headerFooter+\" ui-corner-tl ui-corner-tr\",\r\n                \"sJUIFooter\": _headerFooter+\" ui-corner-bl ui-corner-br\"\r\n            } );\r\n\r\n        }());\r\n\r\n\r\n\r\n        var extPagination = DataTable.ext.pager;\r\n\r\n        function _numbers ( page, pages ) {\r\n            var\r\n                numbers = [],\r\n                buttons = extPagination.numbers_length,\r\n                half = Math.floor( buttons / 2 ),\r\n                i = 1;\r\n\r\n            if ( pages <= buttons ) {\r\n                numbers = _range( 0, pages );\r\n            }\r\n            else if ( page <= half ) {\r\n                numbers = _range( 0, buttons-2 );\r\n                numbers.push( 'ellipsis' );\r\n                numbers.push( pages-1 );\r\n            }\r\n            else if ( page >= pages - 1 - half ) {\r\n                numbers = _range( pages-(buttons-2), pages );\r\n                numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6\r\n                numbers.splice( 0, 0, 0 );\r\n            }\r\n            else {\r\n                numbers = _range( page-1, page+2 );\r\n                numbers.push( 'ellipsis' );\r\n                numbers.push( pages-1 );\r\n                numbers.splice( 0, 0, 'ellipsis' );\r\n                numbers.splice( 0, 0, 0 );\r\n            }\r\n\r\n            numbers.DT_el = 'span';\r\n            return numbers;\r\n        }\r\n\r\n\r\n        $.extend( extPagination, {\r\n            simple: function ( page, pages ) {\r\n                return [ 'previous', 'next' ];\r\n            },\r\n\r\n            full: function ( page, pages ) {\r\n                return [  'first', 'previous', 'next', 'last' ];\r\n            },\r\n\r\n            simple_numbers: function ( page, pages ) {\r\n                return [ 'previous', _numbers(page, pages), 'next' ];\r\n            },\r\n\r\n            full_numbers: function ( page, pages ) {\r\n                return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];\r\n            },\r\n\r\n            // For testing and plug-ins to use\r\n            _numbers: _numbers,\r\n            numbers_length: 7\r\n        } );\r\n\r\n\r\n        $.extend( true, DataTable.ext.renderer, {\r\n            pageButton: {\r\n                _: function ( settings, host, idx, buttons, page, pages ) {\r\n                    var classes = settings.oClasses;\r\n                    var lang = settings.oLanguage.oPaginate;\r\n                    var btnDisplay, btnClass, counter=0;\r\n\r\n                    var attach = function( container, buttons ) {\r\n                        var i, ien, node, button;\r\n                        var clickHandler = function ( e ) {\r\n                            _fnPageChange( settings, e.data.action, true );\r\n                        };\r\n\r\n                        for ( i=0, ien=buttons.length ; i<ien ; i++ ) {\r\n                            button = buttons[i];\r\n\r\n                            if ( $.isArray( button ) ) {\r\n                                var inner = $( '<'+(button.DT_el || 'div')+'/>' )\r\n                                    .appendTo( container );\r\n                                attach( inner, button );\r\n                            }\r\n                            else {\r\n                                btnDisplay = '';\r\n                                btnClass = '';\r\n\r\n                                switch ( button ) {\r\n                                    case 'ellipsis':\r\n                                        container.append('<span>&hellip;</span>');\r\n                                        break;\r\n\r\n                                    case 'first':\r\n                                        btnDisplay = lang.sFirst;\r\n                                        btnClass = button + (page > 0 ?\r\n                                            '' : ' '+classes.sPageButtonDisabled);\r\n                                        break;\r\n\r\n                                    case 'previous':\r\n                                        btnDisplay = lang.sPrevious;\r\n                                        btnClass = button + (page > 0 ?\r\n                                            '' : ' '+classes.sPageButtonDisabled);\r\n                                        break;\r\n\r\n                                    case 'next':\r\n                                        btnDisplay = lang.sNext;\r\n                                        btnClass = button + (page < pages-1 ?\r\n                                            '' : ' '+classes.sPageButtonDisabled);\r\n                                        break;\r\n\r\n                                    case 'last':\r\n                                        btnDisplay = lang.sLast;\r\n                                        btnClass = button + (page < pages-1 ?\r\n                                            '' : ' '+classes.sPageButtonDisabled);\r\n                                        break;\r\n\r\n                                    default:\r\n                                        btnDisplay = button + 1;\r\n                                        btnClass = page === button ?\r\n                                            classes.sPageButtonActive : '';\r\n                                        break;\r\n                                }\r\n\r\n                                if ( btnDisplay ) {\r\n                                    node = $('<a>', {\r\n                                        'class': classes.sPageButton+' '+btnClass,\r\n                                        'aria-controls': settings.sTableId,\r\n                                        'data-dt-idx': counter,\r\n                                        'tabindex': settings.iTabIndex,\r\n                                        'id': idx === 0 && typeof button === 'string' ?\r\n                                        settings.sTableId +'_'+ button :\r\n                                            null\r\n                                    } )\r\n                                        .html( btnDisplay )\r\n                                        .appendTo( container );\r\n\r\n                                    _fnBindAction(\r\n                                        node, {action: button}, clickHandler\r\n                                    );\r\n\r\n                                    counter++;\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    // IE9 throws an 'unknown error' if document.activeElement is used\r\n                    // inside an iframe or frame. Try / catch the error. Not good for\r\n                    // accessibility, but neither are frames.\r\n                    try {\r\n                        // Because this approach is destroying and recreating the paging\r\n                        // elements, focus is lost on the select button which is bad for\r\n                        // accessibility. So we want to restore focus once the draw has\r\n                        // completed\r\n                        var activeEl = $(document.activeElement).data('dt-idx');\r\n\r\n                        attach( $(host).empty(), buttons );\r\n\r\n                        if ( activeEl !== null ) {\r\n                            $(host).find( '[data-dt-idx='+activeEl+']' ).focus();\r\n                        }\r\n                    }\r\n                    catch (e) {}\r\n                }\r\n            }\r\n        } );\r\n\r\n\r\n\r\n        var __numericReplace = function ( d, decimalPlace, re1, re2 ) {\r\n            if ( !d || d === '-' ) {\r\n                return -Infinity;\r\n            }\r\n\r\n            // If a decimal place other than `.` is used, it needs to be given to the\r\n            // function so we can detect it and replace with a `.` which is the only\r\n            // decimal place Javascript recognises - it is not locale aware.\r\n            if ( decimalPlace ) {\r\n                d = _numToDecimal( d, decimalPlace );\r\n            }\r\n\r\n            if ( d.replace ) {\r\n                if ( re1 ) {\r\n                    d = d.replace( re1, '' );\r\n                }\r\n\r\n                if ( re2 ) {\r\n                    d = d.replace( re2, '' );\r\n                }\r\n            }\r\n\r\n            return d * 1;\r\n        };\r\n\r\n\r\n        // Add the numeric 'deformatting' functions for sorting. This is done in a\r\n        // function to provide an easy ability for the language options to add\r\n        // additional methods if a non-period decimal place is used.\r\n        function _addNumericSort ( decimalPlace ) {\r\n            $.each(\r\n                {\r\n                    // Plain numbers\r\n                    \"num\": function ( d ) {\r\n                        return __numericReplace( d, decimalPlace );\r\n                    },\r\n\r\n                    // Formatted numbers\r\n                    \"num-fmt\": function ( d ) {\r\n                        return __numericReplace( d, decimalPlace, _re_formatted_numeric );\r\n                    },\r\n\r\n                    // HTML numeric\r\n                    \"html-num\": function ( d ) {\r\n                        return __numericReplace( d, decimalPlace, _re_html );\r\n                    },\r\n\r\n                    // HTML numeric, formatted\r\n                    \"html-num-fmt\": function ( d ) {\r\n                        return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );\r\n                    }\r\n                },\r\n                function ( key, fn ) {\r\n                    _ext.type.order[ key+decimalPlace+'-pre' ] = fn;\r\n                }\r\n            );\r\n        }\r\n\r\n\r\n        // Default sort methods\r\n        $.extend( _ext.type.order, {\r\n            // Dates\r\n            \"date-pre\": function ( d ) {\r\n                return Date.parse( d ) || 0;\r\n            },\r\n\r\n            // html\r\n            \"html-pre\": function ( a ) {\r\n                return _empty(a) ?\r\n                    '' :\r\n                    a.replace ?\r\n                        a.replace( /<.*?>/g, \"\" ).toLowerCase() :\r\n                    a+'';\r\n            },\r\n\r\n            // string\r\n            \"string-pre\": function ( a ) {\r\n                // This is a little complex, but faster than always calling toString,\r\n                // http://jsperf.com/tostring-v-check\r\n                return _empty(a) ?\r\n                    '' :\r\n                    typeof a === 'string' ?\r\n                        a.toLowerCase() :\r\n                        ! a.toString ?\r\n                            '' :\r\n                            a.toString();\r\n            },\r\n\r\n            // string-asc and -desc are retained only for compatibility with the old\r\n            // sort methods\r\n            \"string-asc\": function ( x, y ) {\r\n                return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n            },\r\n\r\n            \"string-desc\": function ( x, y ) {\r\n                return ((x < y) ? 1 : ((x > y) ? -1 : 0));\r\n            }\r\n        } );\r\n\r\n\r\n        // Numeric sorting types - order doesn't matter here\r\n        _addNumericSort( '' );\r\n\r\n\r\n        // Built in type detection. See model.ext.aTypes for information about\r\n        // what is required from this methods.\r\n        $.extend( DataTable.ext.type.detect, [\r\n            // Plain numbers - first since V8 detects some plain numbers as dates\r\n            // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\r\n            function ( d, settings )\r\n            {\r\n                var decimal = settings.oLanguage.sDecimal;\r\n                return _isNumber( d, decimal ) ? 'num'+decimal : null;\r\n            },\r\n\r\n            // Dates (only those recognised by the browser's Date.parse)\r\n            function ( d, settings )\r\n            {\r\n                // V8 will remove any unknown characters at the start and end of the\r\n                // expression, leading to false matches such as `$245.12` or `10%` being\r\n                // a valid date. See forum thread 18941 for detail.\r\n                if ( d && ( ! _re_date_start.test(d) || ! _re_date_end.test(d) ) ) {\r\n                    return null;\r\n                }\r\n                var parsed = Date.parse(d);\r\n                return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;\r\n            },\r\n\r\n            // Formatted numbers\r\n            function ( d, settings )\r\n            {\r\n                var decimal = settings.oLanguage.sDecimal;\r\n                return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;\r\n            },\r\n\r\n            // HTML numeric\r\n            function ( d, settings )\r\n            {\r\n                var decimal = settings.oLanguage.sDecimal;\r\n                return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;\r\n            },\r\n\r\n            // HTML numeric, formatted\r\n            function ( d, settings )\r\n            {\r\n                var decimal = settings.oLanguage.sDecimal;\r\n                return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;\r\n            },\r\n\r\n            // HTML (this is strict checking - there must be html)\r\n            function ( d, settings )\r\n            {\r\n                return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?\r\n                    'html' : null;\r\n            }\r\n        ] );\r\n\r\n\r\n\r\n        // Filter formatting functions. See model.ext.ofnSearch for information about\r\n        // what is required from these methods.\r\n\r\n\r\n        $.extend( DataTable.ext.type.search, {\r\n            html: function ( data ) {\r\n                return _empty(data) ?\r\n                    data :\r\n                    typeof data === 'string' ?\r\n                        data\r\n                            .replace( _re_new_lines, \" \" )\r\n                            .replace( _re_html, \"\" ) :\r\n                        '';\r\n            },\r\n\r\n            string: function ( data ) {\r\n                return _empty(data) ?\r\n                    data :\r\n                    typeof data === 'string' ?\r\n                        data.replace( _re_new_lines, \" \" ) :\r\n                        data;\r\n            }\r\n        } );\r\n\r\n\r\n\r\n        $.extend( true, DataTable.ext.renderer, {\r\n            header: {\r\n                _: function ( settings, cell, column, classes ) {\r\n                    // No additional mark-up required\r\n                    // Attach a sort listener to update on sort - note that using the\r\n                    // `DT` namespace will allow the event to be removed automatically\r\n                    // on destroy, while the `dt` namespaced event is the one we are\r\n                    // listening for\r\n                    $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\r\n                        if ( settings !== ctx ) { // need to check this this is the host\r\n                            return;               // table, not a nested one\r\n                        }\r\n\r\n                        var colIdx = column.idx;\r\n\r\n                        cell\r\n                            .removeClass(\r\n                            column.sSortingClass +' '+\r\n                            classes.sSortAsc +' '+\r\n                            classes.sSortDesc\r\n                        )\r\n                            .addClass( columns[ colIdx ] == 'asc' ?\r\n                                classes.sSortAsc : columns[ colIdx ] == 'desc' ?\r\n                                classes.sSortDesc :\r\n                                column.sSortingClass\r\n                        );\r\n                    } );\r\n                },\r\n\r\n                jqueryui: function ( settings, cell, column, classes ) {\r\n                    var colIdx = column.idx;\r\n\r\n                    $('<div/>')\r\n                        .addClass( classes.sSortJUIWrapper )\r\n                        .append( cell.contents() )\r\n                        .append( $('<span/>')\r\n                            .addClass( classes.sSortIcon+' '+column.sSortingClassJUI )\r\n                    )\r\n                        .appendTo( cell );\r\n\r\n                    // Attach a sort listener to update on sort\r\n                    $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\r\n                        if ( settings !== ctx ) {\r\n                            return;\r\n                        }\r\n\r\n                        cell\r\n                            .removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )\r\n                            .addClass( columns[ colIdx ] == 'asc' ?\r\n                                classes.sSortAsc : columns[ colIdx ] == 'desc' ?\r\n                                classes.sSortDesc :\r\n                                column.sSortingClass\r\n                        );\r\n\r\n                        cell\r\n                            .find( 'span.'+classes.sSortIcon )\r\n                            .removeClass(\r\n                            classes.sSortJUIAsc +\" \"+\r\n                            classes.sSortJUIDesc +\" \"+\r\n                            classes.sSortJUI +\" \"+\r\n                            classes.sSortJUIAscAllowed +\" \"+\r\n                            classes.sSortJUIDescAllowed\r\n                        )\r\n                            .addClass( columns[ colIdx ] == 'asc' ?\r\n                                classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?\r\n                                classes.sSortJUIDesc :\r\n                                column.sSortingClassJUI\r\n                        );\r\n                    } );\r\n                }\r\n            }\r\n        } );\r\n\r\n        /*\r\n         * Public helper functions. These aren't used internally by DataTables, or\r\n         * called by any of the options passed into DataTables, but they can be used\r\n         * externally by developers working with DataTables. They are helper functions\r\n         * to make working with DataTables a little bit easier.\r\n         */\r\n\r\n        /**\r\n         * Helpers for `columns.render`.\r\n         *\r\n         * The options defined here can be used with the `columns.render` initialisation\r\n         * option to provide a display renderer. The following functions are defined:\r\n         *\r\n         * * `number` - Will format numeric data (defined by `columns.data`) for\r\n         *   display, retaining the original unformatted data for sorting and filtering.\r\n         *   It takes 4 parameters:\r\n         *   * `string` - Thousands grouping separator\r\n         *   * `string` - Decimal point indicator\r\n         *   * `integer` - Number of decimal points to show\r\n         *   * `string` (optional) - Prefix.\r\n         *\r\n         * @example\r\n         *   // Column definition using the number renderer\r\n         *   {\r\n\t *     data: \"salary\",\r\n\t *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\r\n\t *   }\r\n         *\r\n         * @namespace\r\n         */\r\n        DataTable.render = {\r\n            number: function ( thousands, decimal, precision, prefix ) {\r\n                return {\r\n                    display: function ( d ) {\r\n                        var negative = d < 0 ? '-' : '';\r\n                        d = Math.abs( parseFloat( d ) );\r\n\r\n                        var intPart = parseInt( d, 10 );\r\n                        var floatPart = precision ?\r\n                        decimal+(d - intPart).toFixed( precision ).substring( 2 ):\r\n                            '';\r\n\r\n                        return negative + (prefix||'') +\r\n                        intPart.toString().replace(\r\n                            /\\B(?=(\\d{3})+(?!\\d))/g, thousands\r\n                        ) +\r\n                        floatPart;\r\n                    }\r\n                };\r\n            }\r\n        };\r\n\r\n\r\n        /*\r\n         * This is really a good bit rubbish this method of exposing the internal methods\r\n         * publicly... - To be fixed in 2.0 using methods on the prototype\r\n         */\r\n\r\n\r\n        /**\r\n         * Create a wrapper function for exporting an internal functions to an external API.\r\n         *  @param {string} fn API function name\r\n         *  @returns {function} wrapped function\r\n         *  @memberof DataTable#internal\r\n         */\r\n        function _fnExternApiFunc (fn)\r\n        {\r\n            return function() {\r\n                var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(\r\n                    Array.prototype.slice.call(arguments)\r\n                );\r\n                return DataTable.ext.internal[fn].apply( this, args );\r\n            };\r\n        }\r\n\r\n\r\n        /**\r\n         * Reference to internal functions for use by plug-in developers. Note that\r\n         * these methods are references to internal functions and are considered to be\r\n         * private. If you use these methods, be aware that they are liable to change\r\n         * between versions.\r\n         *  @namespace\r\n         */\r\n        $.extend( DataTable.ext.internal, {\r\n            _fnExternApiFunc: _fnExternApiFunc,\r\n            _fnBuildAjax: _fnBuildAjax,\r\n            _fnAjaxUpdate: _fnAjaxUpdate,\r\n            _fnAjaxParameters: _fnAjaxParameters,\r\n            _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\r\n            _fnAjaxDataSrc: _fnAjaxDataSrc,\r\n            _fnAddColumn: _fnAddColumn,\r\n            _fnColumnOptions: _fnColumnOptions,\r\n            _fnAdjustColumnSizing: _fnAdjustColumnSizing,\r\n            _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\r\n            _fnColumnIndexToVisible: _fnColumnIndexToVisible,\r\n            _fnVisbleColumns: _fnVisbleColumns,\r\n            _fnGetColumns: _fnGetColumns,\r\n            _fnColumnTypes: _fnColumnTypes,\r\n            _fnApplyColumnDefs: _fnApplyColumnDefs,\r\n            _fnHungarianMap: _fnHungarianMap,\r\n            _fnCamelToHungarian: _fnCamelToHungarian,\r\n            _fnLanguageCompat: _fnLanguageCompat,\r\n            _fnBrowserDetect: _fnBrowserDetect,\r\n            _fnAddData: _fnAddData,\r\n            _fnAddTr: _fnAddTr,\r\n            _fnNodeToDataIndex: _fnNodeToDataIndex,\r\n            _fnNodeToColumnIndex: _fnNodeToColumnIndex,\r\n            _fnGetCellData: _fnGetCellData,\r\n            _fnSetCellData: _fnSetCellData,\r\n            _fnSplitObjNotation: _fnSplitObjNotation,\r\n            _fnGetObjectDataFn: _fnGetObjectDataFn,\r\n            _fnSetObjectDataFn: _fnSetObjectDataFn,\r\n            _fnGetDataMaster: _fnGetDataMaster,\r\n            _fnClearTable: _fnClearTable,\r\n            _fnDeleteIndex: _fnDeleteIndex,\r\n            _fnInvalidateRow: _fnInvalidateRow,\r\n            _fnGetRowElements: _fnGetRowElements,\r\n            _fnCreateTr: _fnCreateTr,\r\n            _fnBuildHead: _fnBuildHead,\r\n            _fnDrawHead: _fnDrawHead,\r\n            _fnDraw: _fnDraw,\r\n            _fnReDraw: _fnReDraw,\r\n            _fnAddOptionsHtml: _fnAddOptionsHtml,\r\n            _fnDetectHeader: _fnDetectHeader,\r\n            _fnGetUniqueThs: _fnGetUniqueThs,\r\n            _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\r\n            _fnFilterComplete: _fnFilterComplete,\r\n            _fnFilterCustom: _fnFilterCustom,\r\n            _fnFilterColumn: _fnFilterColumn,\r\n            _fnFilter: _fnFilter,\r\n            _fnFilterCreateSearch: _fnFilterCreateSearch,\r\n            _fnEscapeRegex: _fnEscapeRegex,\r\n            _fnFilterData: _fnFilterData,\r\n            _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\r\n            _fnUpdateInfo: _fnUpdateInfo,\r\n            _fnInfoMacros: _fnInfoMacros,\r\n            _fnInitialise: _fnInitialise,\r\n            _fnInitComplete: _fnInitComplete,\r\n            _fnLengthChange: _fnLengthChange,\r\n            _fnFeatureHtmlLength: _fnFeatureHtmlLength,\r\n            _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\r\n            _fnPageChange: _fnPageChange,\r\n            _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\r\n            _fnProcessingDisplay: _fnProcessingDisplay,\r\n            _fnFeatureHtmlTable: _fnFeatureHtmlTable,\r\n            _fnScrollDraw: _fnScrollDraw,\r\n            _fnApplyToChildren: _fnApplyToChildren,\r\n            _fnCalculateColumnWidths: _fnCalculateColumnWidths,\r\n            _fnThrottle: _fnThrottle,\r\n            _fnConvertToWidth: _fnConvertToWidth,\r\n            _fnScrollingWidthAdjust: _fnScrollingWidthAdjust,\r\n            _fnGetWidestNode: _fnGetWidestNode,\r\n            _fnGetMaxLenString: _fnGetMaxLenString,\r\n            _fnStringToCss: _fnStringToCss,\r\n            _fnScrollBarWidth: _fnScrollBarWidth,\r\n            _fnSortFlatten: _fnSortFlatten,\r\n            _fnSort: _fnSort,\r\n            _fnSortAria: _fnSortAria,\r\n            _fnSortListener: _fnSortListener,\r\n            _fnSortAttachListener: _fnSortAttachListener,\r\n            _fnSortingClasses: _fnSortingClasses,\r\n            _fnSortData: _fnSortData,\r\n            _fnSaveState: _fnSaveState,\r\n            _fnLoadState: _fnLoadState,\r\n            _fnSettingsFromNode: _fnSettingsFromNode,\r\n            _fnLog: _fnLog,\r\n            _fnMap: _fnMap,\r\n            _fnBindAction: _fnBindAction,\r\n            _fnCallbackReg: _fnCallbackReg,\r\n            _fnCallbackFire: _fnCallbackFire,\r\n            _fnLengthOverflow: _fnLengthOverflow,\r\n            _fnRenderer: _fnRenderer,\r\n            _fnDataSource: _fnDataSource,\r\n            _fnRowAttributes: _fnRowAttributes,\r\n            _fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant\r\n                                            // in 1.10, so this dead-end function is\r\n                                            // added to prevent errors\r\n        } );\r\n\r\n\r\n        // jQuery access\r\n        $.fn.dataTable = DataTable;\r\n\r\n        // Legacy aliases\r\n        $.fn.dataTableSettings = DataTable.settings;\r\n        $.fn.dataTableExt = DataTable.ext;\r\n\r\n        // With a capital `D` we return a DataTables API instance rather than a\r\n        // jQuery object\r\n        $.fn.DataTable = function ( opts ) {\r\n            return $(this).dataTable( opts ).api();\r\n        };\r\n\r\n        // All properties that are available to $.fn.dataTable should also be\r\n        // available on $.fn.DataTable\r\n        $.each( DataTable, function ( prop, val ) {\r\n            $.fn.DataTable[ prop ] = val;\r\n        } );\r\n\r\n\r\n        // Information about events fired by DataTables - for documentation.\r\n        /**\r\n         * Draw event, fired whenever the table is redrawn on the page, at the same\r\n         * point as fnDrawCallback. This may be useful for binding events or\r\n         * performing calculations when the table is altered at all.\r\n         *  @name DataTable#draw.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * Search event, fired when the searching applied to the table (using the\r\n         * built-in global search, or column filters) is altered.\r\n         *  @name DataTable#search.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * Page change event, fired when the paging of the table is altered.\r\n         *  @name DataTable#page.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * Order event, fired when the ordering applied to the table is altered.\r\n         *  @name DataTable#order.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * DataTables initialisation complete event, fired when the table is fully\r\n         * drawn, including Ajax data loaded, if Ajax data is required.\r\n         *  @name DataTable#init.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} oSettings DataTables settings object\r\n         *  @param {object} json The JSON object request from the server - only\r\n         *    present if client-side Ajax sourced data is used</li></ol>\r\n         */\r\n\r\n        /**\r\n         * State save event, fired when the table has changed state a new state save\r\n         * is required. This event allows modification of the state saving object\r\n         * prior to actually doing the save, including addition or other state\r\n         * properties (for plug-ins) or modification of a DataTables core property.\r\n         *  @name DataTable#stateSaveParams.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} oSettings DataTables settings object\r\n         *  @param {object} json The state information to be saved\r\n         */\r\n\r\n        /**\r\n         * State load event, fired when the table is loading state from the stored\r\n         * data, but prior to the settings object being modified by the saved state\r\n         * - allowing modification of the saved state is required or loading of\r\n         * state for a plug-in.\r\n         *  @name DataTable#stateLoadParams.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} oSettings DataTables settings object\r\n         *  @param {object} json The saved state information\r\n         */\r\n\r\n        /**\r\n         * State loaded event, fired when state has been loaded from stored data and\r\n         * the settings object has been modified by the loaded data.\r\n         *  @name DataTable#stateLoaded.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} oSettings DataTables settings object\r\n         *  @param {object} json The saved state information\r\n         */\r\n\r\n        /**\r\n         * Processing event, fired when DataTables is doing some kind of processing\r\n         * (be it, order, searcg or anything else). It can be used to indicate to\r\n         * the end user that there is something happening, or that something has\r\n         * finished.\r\n         *  @name DataTable#processing.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} oSettings DataTables settings object\r\n         *  @param {boolean} bShow Flag for if DataTables is doing processing or not\r\n         */\r\n\r\n        /**\r\n         * Ajax (XHR) event, fired whenever an Ajax request is completed from a\r\n         * request to made to the server for new data. This event is called before\r\n         * DataTables processed the returned data, so it can also be used to pre-\r\n         * process the data returned from the server, if needed.\r\n         *\r\n         * Note that this trigger is called in `fnServerData`, if you override\r\n         * `fnServerData` and which to use this event, you need to trigger it in you\r\n         * success function.\r\n         *  @name DataTable#xhr.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         *  @param {object} json JSON returned from the server\r\n         *\r\n         *  @example\r\n         *     // Use a custom property returned from the server in another DOM element\r\n         *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\r\n\t *       $('#status').html( json.status );\r\n\t *     } );\r\n         *\r\n         *  @example\r\n         *     // Pre-process the data returned from the server\r\n         *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\r\n\t *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {\r\n\t *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;\r\n\t *       }\r\n\t *       // Note no return - manipulate the data directly in the JSON object.\r\n\t *     } );\r\n         */\r\n\r\n        /**\r\n         * Destroy event, fired when the DataTable is destroyed by calling fnDestroy\r\n         * or passing the bDestroy:true parameter in the initialisation object. This\r\n         * can be used to remove bound events, added DOM nodes, etc.\r\n         *  @name DataTable#destroy.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * Page length change event, fired when number of records to show on each\r\n         * page (the length) is changed.\r\n         *  @name DataTable#length.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         *  @param {integer} len New length\r\n         */\r\n\r\n        /**\r\n         * Column sizing has changed.\r\n         *  @name DataTable#column-sizing.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * Column visibility has changed.\r\n         *  @name DataTable#column-visibility.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         *  @param {int} column Column index\r\n         *  @param {bool} vis `false` if column now hidden, or `true` if visible\r\n         */\r\n\r\n        return $.fn.dataTable;\r\n    }));\r\n\r\n}(window, document));\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 149:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function($) {/* Set the defaults for DataTables initialisation */\r\n$.extend( true, $.fn.dataTable.defaults, {\r\n    \"sDom\":\r\n    \"<'row'<'col-sm-6'l><'col-sm-6'f>r>\"+\r\n    \"t\"+\r\n    \"<'row'<'col-sm-6'i><'col-sm-6'p>>\",\r\n    \"oLanguage\": {\r\n        \"sLengthMenu\": \"_MENU_ records per page\",\r\n        \"sSearch\": \"\"\r\n    }\r\n} );\r\n\r\n\r\n/* Default class modification */\r\n$.extend( $.fn.dataTableExt.oStdClasses, {\r\n    \"sWrapper\": \"dataTables_wrapper form-inline\",\r\n    \"sFilterInput\": \"form-control\",\r\n    \"sLengthSelect\": \"form-control\"\r\n} );\r\n\r\n// In 1.10 we use the pagination renderers to draw the Bootstrap paging,\r\n// rather than  custom plug-in\r\n// if ( $.fn.dataTable.Api ) {\r\n// \t$.fn.dataTable.defaults.renderer = 'bootstrap';\r\n// \t$.fn.dataTable.ext.renderer.pageButton.bootstrap = function ( settings, host, idx, buttons, page, pages ) {\r\n// \t\tvar api = new $.fn.dataTable.Api( settings );\r\n// \t\tvar classes = settings.oClasses;\r\n// \t\tvar lang = settings.oLanguage.oPaginate;\r\n// \t\tvar btnDisplay, btnClass;\r\n\r\n// \t\tvar attach = function( container, buttons ) {\r\n// \t\t\tvar i, ien, node, button;\r\n// \t\t\tvar clickHandler = function ( e ) {\r\n// \t\t\t\te.preventDefault();\r\n// \t\t\t\tif ( e.data.action !== 'ellipsis' ) {\r\n// \t\t\t\t\tapi.page( e.data.action ).draw( false );\r\n// \t\t\t\t}\r\n// \t\t\t};\r\n\r\n// \t\t\tfor ( i=0, ien=buttons.length ; i<ien ; i++ ) {\r\n// \t\t\t\tbutton = buttons[i];\r\n\r\n// \t\t\t\tif ( $.isArray( button ) ) {\r\n// \t\t\t\t\tattach( container, button );\r\n// \t\t\t\t}\r\n// \t\t\t\telse {\r\n// \t\t\t\t\tbtnDisplay = '';\r\n// \t\t\t\t\tbtnClass = '';\r\n\r\n// \t\t\t\t\tswitch ( button ) {\r\n// \t\t\t\t\t\tcase 'ellipsis':\r\n// \t\t\t\t\t\t\tbtnDisplay = '&hellip;';\r\n// \t\t\t\t\t\t\tbtnClass = 'disabled';\r\n// \t\t\t\t\t\t\tbreak;\r\n\r\n// \t\t\t\t\t\tcase 'first':\r\n// \t\t\t\t\t\t\tbtnDisplay = lang.sFirst;\r\n// \t\t\t\t\t\t\tbtnClass = button + (page > 0 ?\r\n// \t\t\t\t\t\t\t\t'' : ' disabled');\r\n// \t\t\t\t\t\t\tbreak;\r\n\r\n// \t\t\t\t\t\tcase 'previous':\r\n// \t\t\t\t\t\t\tbtnDisplay = lang.sPrevious;\r\n// \t\t\t\t\t\t\tbtnClass = button + (page > 0 ?\r\n// \t\t\t\t\t\t\t\t'' : ' disabled');\r\n// \t\t\t\t\t\t\tbreak;\r\n\r\n// \t\t\t\t\t\tcase 'next':\r\n// \t\t\t\t\t\t\tbtnDisplay = lang.sNext;\r\n// \t\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?\r\n// \t\t\t\t\t\t\t\t'' : ' disabled');\r\n// \t\t\t\t\t\t\tbreak;\r\n\r\n// \t\t\t\t\t\tcase 'last':\r\n// \t\t\t\t\t\t\tbtnDisplay = lang.sLast;\r\n// \t\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?\r\n// \t\t\t\t\t\t\t\t'' : ' disabled');\r\n// \t\t\t\t\t\t\tbreak;\r\n\r\n// \t\t\t\t\t\tdefault:\r\n// \t\t\t\t\t\t\tbtnDisplay = button + 1;\r\n// \t\t\t\t\t\t\tbtnClass = page === button ?\r\n// \t\t\t\t\t\t\t\t'active' : '';\r\n// \t\t\t\t\t\t\tbreak;\r\n// \t\t\t\t\t}\r\n\r\n// \t\t\t\t\tif ( btnDisplay ) {\r\n// \t\t\t\t\t\tnode = $('<li>', {\r\n// \t\t\t\t\t\t\t\t'class': classes.sPageButton+' '+btnClass,\r\n// \t\t\t\t\t\t\t\t'aria-controls': settings.sTableId,\r\n// \t\t\t\t\t\t\t\t'tabindex': settings.iTabIndex,\r\n// \t\t\t\t\t\t\t\t'id': idx === 0 && typeof button === 'string' ?\r\n// \t\t\t\t\t\t\t\t\tsettings.sTableId +'_'+ button :\r\n// \t\t\t\t\t\t\t\t\tnull\r\n// \t\t\t\t\t\t\t} )\r\n// \t\t\t\t\t\t\t.append( $('<a>', {\r\n// \t\t\t\t\t\t\t\t\t'href': '#'\r\n// \t\t\t\t\t\t\t\t} )\r\n// \t\t\t\t\t\t\t\t.html( btnDisplay )\r\n// \t\t\t\t\t\t\t)\r\n// \t\t\t\t\t\t\t.appendTo( container );\r\n\r\n// \t\t\t\t\t\tsettings.oApi._fnBindAction(\r\n// \t\t\t\t\t\t\tnode, {action: button}, clickHandler\r\n// \t\t\t\t\t\t);\r\n// \t\t\t\t\t}\r\n// \t\t\t\t}\r\n// \t\t\t}\r\n// \t\t};\r\n\r\n// \t\tattach(\r\n// \t\t\t$(host).empty().html('<ul class=\"pagination\"/>').children('ul'),\r\n// \t\t\tbuttons\r\n// \t\t);\r\n// \t}\r\n// }\r\n// else {\r\n// Integration for 1.9-\r\n$.fn.dataTable.defaults.sPaginationType = 'bootstrap';\r\n\r\n/* API method to get paging information */\r\n$.fn.dataTableExt.oApi.fnPagingInfo = function ( oSettings )\r\n{\r\n    return {\r\n        \"iStart\":         oSettings._iDisplayStart,\r\n        \"iEnd\":           oSettings.fnDisplayEnd(),\r\n        \"iLength\":        oSettings._iDisplayLength,\r\n        \"iTotal\":         oSettings.fnRecordsTotal(),\r\n        \"iFilteredTotal\": oSettings.fnRecordsDisplay(),\r\n        \"iPage\":          oSettings._iDisplayLength === -1 ?\r\n            0 : Math.ceil( oSettings._iDisplayStart / oSettings._iDisplayLength ),\r\n        \"iTotalPages\":    oSettings._iDisplayLength === -1 ?\r\n            0 : Math.ceil( oSettings.fnRecordsDisplay() / oSettings._iDisplayLength )\r\n    };\r\n};\r\n\r\n/* Bootstrap style pagination control */\r\n$.extend( $.fn.dataTableExt.oPagination, {\r\n    \"bootstrap\": {\r\n        \"fnInit\": function( oSettings, nPaging, fnDraw ) {\r\n            var oLang = oSettings.oLanguage.oPaginate;\r\n            var fnClickHandler = function ( e ) {\r\n                e.preventDefault();\r\n                if ( oSettings.oApi._fnPageChange(oSettings, e.data.action) ) {\r\n                    fnDraw( oSettings );\r\n                }\r\n            };\r\n\r\n            $(nPaging).append(\r\n                '<ul class=\"pagination\">'+\r\n                '<li class=\"previous disabled\"><a href=\"#\">'+oLang.sPrevious+'</a></li>'+\r\n                '<li class=\"next disabled\"><a href=\"#\">'+oLang.sNext+'</a></li>'+\r\n                '</ul>'\r\n            );\r\n            var els = $('a', nPaging);\r\n            $(els[0]).bind( 'click.DT', { action: \"previous\" }, fnClickHandler );\r\n            $(els[1]).bind( 'click.DT', { action: \"next\" }, fnClickHandler );\r\n        },\r\n\r\n        \"fnUpdate\": function ( oSettings, fnDraw ) {\r\n            var iListLength = 5;\r\n            var oPaging = oSettings.oInstance.fnPagingInfo();\r\n            var an = oSettings.aanFeatures.p;\r\n            var i, ien, j, sClass, iStart, iEnd, iHalf=Math.floor(iListLength/2);\r\n\r\n            if ( oPaging.iTotalPages < iListLength) {\r\n                iStart = 1;\r\n                iEnd = oPaging.iTotalPages;\r\n            }\r\n            else if ( oPaging.iPage <= iHalf ) {\r\n                iStart = 1;\r\n                iEnd = iListLength;\r\n            } else if ( oPaging.iPage >= (oPaging.iTotalPages-iHalf) ) {\r\n                iStart = oPaging.iTotalPages - iListLength + 1;\r\n                iEnd = oPaging.iTotalPages;\r\n            } else {\r\n                iStart = oPaging.iPage - iHalf + 1;\r\n                iEnd = iStart + iListLength - 1;\r\n            }\r\n\r\n            for ( i=0, ien=an.length ; i<ien ; i++ ) {\r\n                // Remove the middle elements\r\n                $('li:gt(0)', an[i]).filter(':not(:last)').remove();\r\n\r\n                // Add the new list items and their event handlers\r\n                for ( j=iStart ; j<=iEnd ; j++ ) {\r\n                    sClass = (j==oPaging.iPage+1) ? 'class=\"active\"' : '';\r\n                    $('<li '+sClass+'><a href=\"#\">'+j+'</a></li>')\r\n                        .insertBefore( $('li:last', an[i])[0] )\r\n                        .bind('click', function (e) {\r\n                            e.preventDefault();\r\n                            oSettings._iDisplayStart = (parseInt($('a', this).text(),10)-1) * oPaging.iLength;\r\n                            fnDraw( oSettings );\r\n                        } );\r\n                }\r\n\r\n                // Add / remove disabled classes from the static elements\r\n                if ( oPaging.iPage === 0 ) {\r\n                    $('li:first', an[i]).addClass('disabled');\r\n                } else {\r\n                    $('li:first', an[i]).removeClass('disabled');\r\n                }\r\n\r\n                if ( oPaging.iPage === oPaging.iTotalPages-1 || oPaging.iTotalPages === 0 ) {\r\n                    $('li:last', an[i]).addClass('disabled');\r\n                } else {\r\n                    $('li:last', an[i]).removeClass('disabled');\r\n                }\r\n            }\r\n        }\r\n    }\r\n} );\r\n//}\r\n\r\n\r\n/*\r\n * TableTools Bootstrap compatibility\r\n * Required TableTools 2.1+\r\n */\r\nif ( $.fn.DataTable.TableTools ) {\r\n    // Set the classes that TableTools uses to something suitable for Bootstrap\r\n    $.extend( true, $.fn.DataTable.TableTools.classes, {\r\n        \"container\": \"DTTT btn-group\",\r\n        \"buttons\": {\r\n            \"normal\": \"btn btn-default\",\r\n            \"disabled\": \"disabled\"\r\n        },\r\n        \"collection\": {\r\n            \"container\": \"DTTT_dropdown dropdown-menu\",\r\n            \"buttons\": {\r\n                \"normal\": \"\",\r\n                \"disabled\": \"disabled\"\r\n            }\r\n        },\r\n        \"print\": {\r\n            \"info\": \"DTTT_print_info modal\"\r\n        },\r\n        \"select\": {\r\n            \"row\": \"active\"\r\n        }\r\n    } );\r\n\r\n    // Have the collection use a bootstrap compatible dropdown\r\n    $.extend( true, $.fn.DataTable.TableTools.DEFAULTS.oTags, {\r\n        \"collection\": {\r\n            \"container\": \"ul\",\r\n            \"button\": \"li\",\r\n            \"liner\": \"a\"\r\n        }\r\n    } );\r\n}\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 150:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function($) {$(document).ready(function() {\r\n\r\n    body_sizer();\r\n\r\n    $(\"div[id='#fixed-sidebar']\").on('click', function() {\r\n\r\n        if ($(this).hasClass(\"switch-on\")) {\r\n            var windowHeight = $(window).height();\r\n            var headerHeight = $('#page-header').height();\r\n            var contentHeight = windowHeight - headerHeight;\r\n\r\n            $('#page-sidebar').css('height', contentHeight);\r\n            $('.scroll-sidebar').css('height', contentHeight);\r\n\r\n            $('.scroll-sidebar').slimscroll({\r\n                height: '100%',\r\n                color: 'rgba(155, 164, 169, 0.68)',\r\n                size: '6px'\r\n            });\r\n\r\n            var headerBg = $('#page-header').attr('class');\r\n            $('#header-logo').addClass(headerBg);\r\n\r\n        } else {\r\n            var windowHeight = $(document).height();\r\n            var headerHeight = $('#page-header').height();\r\n            var contentHeight = windowHeight - headerHeight;\r\n\r\n            $('#page-sidebar').css('height', contentHeight);\r\n            $('.scroll-sidebar').css('height', contentHeight);\r\n\r\n            $(\".scroll-sidebar\").slimScroll({\r\n                destroy: true\r\n            });\r\n\r\n            $('#header-logo').removeClass('bg-gradient-9');\r\n\r\n        }\r\n\r\n    });\r\n\r\n});\r\n\r\n$(window).on('resize', function() {\r\n    body_sizer();\r\n});\r\n\r\nfunction body_sizer() {\r\n\r\n    if ($('body').hasClass('fixed-sidebar')) {\r\n\r\n        var windowHeight = $(window).height();\r\n        var headerHeight = $('#page-header').height();\r\n        var contentHeight = windowHeight - headerHeight;\r\n\r\n        $('#page-sidebar').css('height', contentHeight);\r\n        $('.scroll-sidebar').css('height', contentHeight);\r\n        $('#page-content').css('min-height', contentHeight);\r\n\r\n    } else {\r\n\r\n        var windowHeight = $(document).height();\r\n        var headerHeight = $('#page-header').height();\r\n        var contentHeight = windowHeight - headerHeight;\r\n\r\n        $('#page-sidebar').css('height', contentHeight);\r\n        $('.scroll-sidebar').css('height', contentHeight);\r\n        $('#page-content').css('min-height', contentHeight);\r\n\r\n    }\r\n\r\n};\r\n\r\nfunction pageTransitions() {\r\n\r\n    var transitions = ['.pt-page-moveFromLeft', 'pt-page-moveFromRight', 'pt-page-moveFromTop', 'pt-page-moveFromBottom', 'pt-page-fade', 'pt-page-moveFromLeftFade', 'pt-page-moveFromRightFade', 'pt-page-moveFromTopFade', 'pt-page-moveFromBottomFade', 'pt-page-scaleUp', 'pt-page-scaleUpCenter', 'pt-page-flipInLeft', 'pt-page-flipInRight', 'pt-page-flipInBottom', 'pt-page-flipInTop', 'pt-page-rotatePullRight', 'pt-page-rotatePullLeft', 'pt-page-rotatePullTop', 'pt-page-rotatePullBottom', 'pt-page-rotateUnfoldLeft', 'pt-page-rotateUnfoldRight', 'pt-page-rotateUnfoldTop', 'pt-page-rotateUnfoldBottom'];\r\n    for (var i in transitions) {\r\n        var transition_name = transitions[i];\r\n        if ($('.add-transition').hasClass(transition_name)) {\r\n\r\n            $('.add-transition').addClass(transition_name + '-init page-transition');\r\n\r\n            setTimeout(function() {\r\n                $('.add-transition').removeClass(transition_name + ' ' + transition_name + '-init page-transition');\r\n            }, 1200);\r\n            return;\r\n        }\r\n    }\r\n\r\n};\r\n\r\n$(document).ready(function() {\r\n\r\n    pageTransitions();\r\n\r\n    // ADD SLIDEDOWN ANIMATION TO DROPDOWN //\r\n    $('.dropdown').on('show.bs.dropdown', function(e){\r\n        $(this).find('.dropdown-menu').first().stop(true, true).slideDown();\r\n    });\r\n\r\n    // ADD SLIDEUP ANIMATION TO DROPDOWN //\r\n    $('.dropdown').on('hide.bs.dropdown', function(e){\r\n        $(this).find('.dropdown-menu').first().stop(true, true).slideUp();\r\n    });\r\n\r\n    /* Sidebar menu */\r\n    $(function() {\r\n\r\n        $('#sidebar-menu').superclick({\r\n            animation: {\r\n                height: 'show'\r\n            },\r\n            animationOut: {\r\n                height: 'hide'\r\n            }\r\n        });\r\n\r\n        //automatically open the current path\r\n        // var path = window.location.pathname.split('/');\r\n        // path = path[path.length-1];\r\n        var path = window.location.pathname;\r\n        if (path !== undefined) {\r\n            $(\"#sidebar-menu\").find(\"a[href$='\" + path + \"']\").addClass('sfActive');\r\n            $(\"#sidebar-menu\").find(\"a[href$='\" + path + \"']\").parents().eq(3).superclick('show');\r\n        }\r\n\r\n    });\r\n\r\n    /* Colapse sidebar */\r\n    $(function() {\r\n\r\n        $('#close-sidebar').click(function() {\r\n            $('body').toggleClass('closed-sidebar');\r\n            $('.glyph-icon', this).toggleClass('icon-angle-right').toggleClass('icon-angle-left');\r\n        });\r\n\r\n    });\r\n\r\n    /* Sidebar scroll */\r\n\r\n\r\n\r\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 151:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function($) {/* Prevent default on # hrefs */\r\n$(document).ready(function() {\r\n    $('#datatable').dataTable();\r\n});\r\n\r\n$(document).ready(function() {\r\n    $('.dataTables_filter input').attr(\"placeholder\", \"Search...\");\r\n});\r\n\r\n/* Datatables reorder */\r\n\r\n$(document).ready(function() {\r\n    $('#datatable-reorder').DataTable( {\r\n        dom: 'Rlfrtip'\r\n    });\r\n\r\n    $('#datatable-reorder_length').hide();\r\n    $('#datatable-reorder_filter').hide();\r\n\r\n});\r\n\r\n/* To do check toggle */\r\n\r\n$(function() { \"use strict\";\r\n  $(\".todo-box li input\").on('click', function() {\r\n      $(this).parent().toggleClass('todo-done');\r\n  });\r\n});\r\n\r\n/* Horizontal timeline */\r\n\r\n$(function() { \"use strict\";\r\n\r\n  var overall_width = 0;\r\n\r\n  $('.timeline-scroll .tl-row').each(function(index, elem) {\r\n      var $elem = $(elem);\r\n      overall_width += $elem.outerWidth() + parseInt($elem.css('margin-left'), 10) + parseInt($elem.css('margin-right'), 10);\r\n  });\r\n\r\n  $('.timeline-horizontal', this).width(overall_width);\r\n});\r\n\r\n/* Input switch alternate */\r\n\r\n$(function() { \"use strict\";\r\n    $('.input-switch-alt').simpleCheckbox();\r\n});\r\n\r\n\r\n/* Slim scrollbar */\r\n\r\n$(function() { \"use strict\";\r\n    $('.scrollable-slim').slimScroll({\r\n        color: '#8da0aa',\r\n        size: '10px',\r\n        alwaysVisible: true\r\n    });\r\n});\r\n\r\n$(function() { \"use strict\";\r\n    $('.scrollable-slim-sidebar').slimScroll({\r\n        color: '#8da0aa',\r\n        size: '10px',\r\n        height: '100%',\r\n        alwaysVisible: true\r\n    });\r\n});\r\n\r\n$(function() { \"use strict\";\r\n    $('.scrollable-slim-box').slimScroll({\r\n        color: '#8da0aa',\r\n        size: '6px',\r\n        alwaysVisible: false\r\n    });\r\n});\r\n\r\n/* Loading buttons */\r\n\r\n$(function() { \"use strict\";\r\n\r\n  $('.loading-button').click(function() {\r\n      var btn = $(this)\r\n      btn.button('loading');\r\n  });\r\n\r\n});\r\n\r\n/* Tooltips */\r\n\r\n$(function() { \"use strict\";\r\n\r\n  $('.tooltip-button').tooltip({\r\n      container: 'body'\r\n  });\r\n\r\n});\r\n\r\n/* Close response message */\r\n\r\n$(function() { \"use strict\";\r\n  $('.alert-close-btn').click(function() {\r\n      $(this).parent().addClass('animated fadeOutDown');\r\n  });\r\n});\r\n\r\n/* Popovers */\r\n\r\n$(function() { \"use strict\";\r\n\r\n  $('.popover-button').popover({\r\n      container: 'body',\r\n      html: true,\r\n      animation: true,\r\n      content: function() {\r\n          var dataID = $(this).attr('data-id');\r\n          return $(dataID).html();\r\n      }\r\n  }).click(function(evt) {\r\n      evt.preventDefault();\r\n  });\r\n\r\n});\r\n\r\n$(function() { \"use strict\";\r\n  $('.popover-button-default').popover({\r\n      container: 'body',\r\n      html: true,\r\n      animation: true\r\n  }).click(function(evt) {\r\n      evt.preventDefault();\r\n  });\r\n});\r\n/* Color schemes */\r\n\r\nvar mUIColors = {\r\n    'default':      '#3498db',\r\n    'gray':         '#d6dde2',\r\n    'primary':      '#00bca4',\r\n    'success':      '#2ecc71',\r\n    'warning':      '#e67e22',\r\n    'danger':       '#e74c3c',\r\n    'info':         '#3498db'\r\n};\r\n\r\nvar getUIColor = function (name) {\r\n    if (mUIColors[name]) {\r\n        return mUIColors[name];\r\n    } else {\r\n        return mUIColors['default'];\r\n    }\r\n}\r\n\r\n/* Screenfull */\r\n\r\nif(document.getElementById('fullscreen-btn')) {\r\n  document.getElementById('fullscreen-btn').addEventListener('click', function () {\r\n    if (screenfull.enabled) {\r\n        screenfull.request();\r\n    }\r\n  });\r\n}\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ })\n\n},[121]);\n\n\n// WEBPACK FOOTER //\n// app.b81f4459eb1b0cdac4d5.js","import 'jquery'\r\nimport 'jquery-migrate'\r\nimport 'bootstrap'\r\nimport 'jquery-ui'\r\nimport 'sparklines'\r\nimport 'bootstrap-select'\r\nimport 'moment'\r\nrequire('eonasdan-bootstrap-datetimepicker/src/js/bootstrap-datetimepicker')\r\nrequire('superclick/superclick')\r\nrequire('progressbar/progressbar')\r\nrequire('input-switch/inputswitch-alt')\r\nrequire('slidebars/slidebars')\r\nrequire('content-box/contentbox')\r\nrequire('overlay/overlay')\r\nrequire('datatable/datatable')\r\nrequire('datatable/datatable-bootstrap')\r\nrequire('js-init/layout.js')\r\nrequire('js-init/widgets-init.js')\n\n\n// WEBPACK FOOTER //\n// ./resources/assets/js/app.js","// This file is autogenerated via the `commonjs` Grunt task. You can require() this file in a CommonJS environment.\nrequire('../../js/transition.js')\nrequire('../../js/alert.js')\nrequire('../../js/button.js')\nrequire('../../js/carousel.js')\nrequire('../../js/collapse.js')\nrequire('../../js/dropdown.js')\nrequire('../../js/modal.js')\nrequire('../../js/tooltip.js')\nrequire('../../js/popover.js')\nrequire('../../js/scrollspy.js')\nrequire('../../js/tab.js')\nrequire('../../js/affix.js')\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap/dist/js/npm.js\n// module id = 124\n// module chunks = 0","/* ========================================================================\n * Bootstrap: transition.js v3.3.7\n * http://getbootstrap.com/javascript/#transitions\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)\n  // ============================================================\n\n  function transitionEnd() {\n    var el = document.createElement('bootstrap')\n\n    var transEndEventNames = {\n      WebkitTransition : 'webkitTransitionEnd',\n      MozTransition    : 'transitionend',\n      OTransition      : 'oTransitionEnd otransitionend',\n      transition       : 'transitionend'\n    }\n\n    for (var name in transEndEventNames) {\n      if (el.style[name] !== undefined) {\n        return { end: transEndEventNames[name] }\n      }\n    }\n\n    return false // explicit for ie8 (  ._.)\n  }\n\n  // http://blog.alexmaccaw.com/css-transitions\n  $.fn.emulateTransitionEnd = function (duration) {\n    var called = false\n    var $el = this\n    $(this).one('bsTransitionEnd', function () { called = true })\n    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }\n    setTimeout(callback, duration)\n    return this\n  }\n\n  $(function () {\n    $.support.transition = transitionEnd()\n\n    if (!$.support.transition) return\n\n    $.event.special.bsTransitionEnd = {\n      bindType: $.support.transition.end,\n      delegateType: $.support.transition.end,\n      handle: function (e) {\n        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)\n      }\n    }\n  })\n\n}(jQuery);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap/js/transition.js\n// module id = 125\n// module chunks = 0","/* ========================================================================\n * Bootstrap: alert.js v3.3.7\n * http://getbootstrap.com/javascript/#alerts\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // ALERT CLASS DEFINITION\n  // ======================\n\n  var dismiss = '[data-dismiss=\"alert\"]'\n  var Alert   = function (el) {\n    $(el).on('click', dismiss, this.close)\n  }\n\n  Alert.VERSION = '3.3.7'\n\n  Alert.TRANSITION_DURATION = 150\n\n  Alert.prototype.close = function (e) {\n    var $this    = $(this)\n    var selector = $this.attr('data-target')\n\n    if (!selector) {\n      selector = $this.attr('href')\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n    }\n\n    var $parent = $(selector === '#' ? [] : selector)\n\n    if (e) e.preventDefault()\n\n    if (!$parent.length) {\n      $parent = $this.closest('.alert')\n    }\n\n    $parent.trigger(e = $.Event('close.bs.alert'))\n\n    if (e.isDefaultPrevented()) return\n\n    $parent.removeClass('in')\n\n    function removeElement() {\n      // detach from parent, fire event then clean up data\n      $parent.detach().trigger('closed.bs.alert').remove()\n    }\n\n    $.support.transition && $parent.hasClass('fade') ?\n      $parent\n        .one('bsTransitionEnd', removeElement)\n        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :\n      removeElement()\n  }\n\n\n  // ALERT PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this)\n      var data  = $this.data('bs.alert')\n\n      if (!data) $this.data('bs.alert', (data = new Alert(this)))\n      if (typeof option == 'string') data[option].call($this)\n    })\n  }\n\n  var old = $.fn.alert\n\n  $.fn.alert             = Plugin\n  $.fn.alert.Constructor = Alert\n\n\n  // ALERT NO CONFLICT\n  // =================\n\n  $.fn.alert.noConflict = function () {\n    $.fn.alert = old\n    return this\n  }\n\n\n  // ALERT DATA-API\n  // ==============\n\n  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)\n\n}(jQuery);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap/js/alert.js\n// module id = 126\n// module chunks = 0","/* ========================================================================\n * Bootstrap: button.js v3.3.7\n * http://getbootstrap.com/javascript/#buttons\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // BUTTON PUBLIC CLASS DEFINITION\n  // ==============================\n\n  var Button = function (element, options) {\n    this.$element  = $(element)\n    this.options   = $.extend({}, Button.DEFAULTS, options)\n    this.isLoading = false\n  }\n\n  Button.VERSION  = '3.3.7'\n\n  Button.DEFAULTS = {\n    loadingText: 'loading...'\n  }\n\n  Button.prototype.setState = function (state) {\n    var d    = 'disabled'\n    var $el  = this.$element\n    var val  = $el.is('input') ? 'val' : 'html'\n    var data = $el.data()\n\n    state += 'Text'\n\n    if (data.resetText == null) $el.data('resetText', $el[val]())\n\n    // push to event loop to allow forms to submit\n    setTimeout($.proxy(function () {\n      $el[val](data[state] == null ? this.options[state] : data[state])\n\n      if (state == 'loadingText') {\n        this.isLoading = true\n        $el.addClass(d).attr(d, d).prop(d, true)\n      } else if (this.isLoading) {\n        this.isLoading = false\n        $el.removeClass(d).removeAttr(d).prop(d, false)\n      }\n    }, this), 0)\n  }\n\n  Button.prototype.toggle = function () {\n    var changed = true\n    var $parent = this.$element.closest('[data-toggle=\"buttons\"]')\n\n    if ($parent.length) {\n      var $input = this.$element.find('input')\n      if ($input.prop('type') == 'radio') {\n        if ($input.prop('checked')) changed = false\n        $parent.find('.active').removeClass('active')\n        this.$element.addClass('active')\n      } else if ($input.prop('type') == 'checkbox') {\n        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false\n        this.$element.toggleClass('active')\n      }\n      $input.prop('checked', this.$element.hasClass('active'))\n      if (changed) $input.trigger('change')\n    } else {\n      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))\n      this.$element.toggleClass('active')\n    }\n  }\n\n\n  // BUTTON PLUGIN DEFINITION\n  // ========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.button')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.button', (data = new Button(this, options)))\n\n      if (option == 'toggle') data.toggle()\n      else if (option) data.setState(option)\n    })\n  }\n\n  var old = $.fn.button\n\n  $.fn.button             = Plugin\n  $.fn.button.Constructor = Button\n\n\n  // BUTTON NO CONFLICT\n  // ==================\n\n  $.fn.button.noConflict = function () {\n    $.fn.button = old\n    return this\n  }\n\n\n  // BUTTON DATA-API\n  // ===============\n\n  $(document)\n    .on('click.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n      var $btn = $(e.target).closest('.btn')\n      Plugin.call($btn, 'toggle')\n      if (!($(e.target).is('input[type=\"radio\"], input[type=\"checkbox\"]'))) {\n        // Prevent double click on radios, and the double selections (so cancellation) on checkboxes\n        e.preventDefault()\n        // The target component still receive the focus\n        if ($btn.is('input,button')) $btn.trigger('focus')\n        else $btn.find('input:visible,button:visible').first().trigger('focus')\n      }\n    })\n    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))\n    })\n\n}(jQuery);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap/js/button.js\n// module id = 127\n// module chunks = 0","/* ========================================================================\n * Bootstrap: carousel.js v3.3.7\n * http://getbootstrap.com/javascript/#carousel\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // CAROUSEL CLASS DEFINITION\n  // =========================\n\n  var Carousel = function (element, options) {\n    this.$element    = $(element)\n    this.$indicators = this.$element.find('.carousel-indicators')\n    this.options     = options\n    this.paused      = null\n    this.sliding     = null\n    this.interval    = null\n    this.$active     = null\n    this.$items      = null\n\n    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))\n\n    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element\n      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))\n      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))\n  }\n\n  Carousel.VERSION  = '3.3.7'\n\n  Carousel.TRANSITION_DURATION = 600\n\n  Carousel.DEFAULTS = {\n    interval: 5000,\n    pause: 'hover',\n    wrap: true,\n    keyboard: true\n  }\n\n  Carousel.prototype.keydown = function (e) {\n    if (/input|textarea/i.test(e.target.tagName)) return\n    switch (e.which) {\n      case 37: this.prev(); break\n      case 39: this.next(); break\n      default: return\n    }\n\n    e.preventDefault()\n  }\n\n  Carousel.prototype.cycle = function (e) {\n    e || (this.paused = false)\n\n    this.interval && clearInterval(this.interval)\n\n    this.options.interval\n      && !this.paused\n      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))\n\n    return this\n  }\n\n  Carousel.prototype.getItemIndex = function (item) {\n    this.$items = item.parent().children('.item')\n    return this.$items.index(item || this.$active)\n  }\n\n  Carousel.prototype.getItemForDirection = function (direction, active) {\n    var activeIndex = this.getItemIndex(active)\n    var willWrap = (direction == 'prev' && activeIndex === 0)\n                || (direction == 'next' && activeIndex == (this.$items.length - 1))\n    if (willWrap && !this.options.wrap) return active\n    var delta = direction == 'prev' ? -1 : 1\n    var itemIndex = (activeIndex + delta) % this.$items.length\n    return this.$items.eq(itemIndex)\n  }\n\n  Carousel.prototype.to = function (pos) {\n    var that        = this\n    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))\n\n    if (pos > (this.$items.length - 1) || pos < 0) return\n\n    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, \"slid\"\n    if (activeIndex == pos) return this.pause().cycle()\n\n    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))\n  }\n\n  Carousel.prototype.pause = function (e) {\n    e || (this.paused = true)\n\n    if (this.$element.find('.next, .prev').length && $.support.transition) {\n      this.$element.trigger($.support.transition.end)\n      this.cycle(true)\n    }\n\n    this.interval = clearInterval(this.interval)\n\n    return this\n  }\n\n  Carousel.prototype.next = function () {\n    if (this.sliding) return\n    return this.slide('next')\n  }\n\n  Carousel.prototype.prev = function () {\n    if (this.sliding) return\n    return this.slide('prev')\n  }\n\n  Carousel.prototype.slide = function (type, next) {\n    var $active   = this.$element.find('.item.active')\n    var $next     = next || this.getItemForDirection(type, $active)\n    var isCycling = this.interval\n    var direction = type == 'next' ? 'left' : 'right'\n    var that      = this\n\n    if ($next.hasClass('active')) return (this.sliding = false)\n\n    var relatedTarget = $next[0]\n    var slideEvent = $.Event('slide.bs.carousel', {\n      relatedTarget: relatedTarget,\n      direction: direction\n    })\n    this.$element.trigger(slideEvent)\n    if (slideEvent.isDefaultPrevented()) return\n\n    this.sliding = true\n\n    isCycling && this.pause()\n\n    if (this.$indicators.length) {\n      this.$indicators.find('.active').removeClass('active')\n      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])\n      $nextIndicator && $nextIndicator.addClass('active')\n    }\n\n    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, \"slid\"\n    if ($.support.transition && this.$element.hasClass('slide')) {\n      $next.addClass(type)\n      $next[0].offsetWidth // force reflow\n      $active.addClass(direction)\n      $next.addClass(direction)\n      $active\n        .one('bsTransitionEnd', function () {\n          $next.removeClass([type, direction].join(' ')).addClass('active')\n          $active.removeClass(['active', direction].join(' '))\n          that.sliding = false\n          setTimeout(function () {\n            that.$element.trigger(slidEvent)\n          }, 0)\n        })\n        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)\n    } else {\n      $active.removeClass('active')\n      $next.addClass('active')\n      this.sliding = false\n      this.$element.trigger(slidEvent)\n    }\n\n    isCycling && this.cycle()\n\n    return this\n  }\n\n\n  // CAROUSEL PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.carousel')\n      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)\n      var action  = typeof option == 'string' ? option : options.slide\n\n      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))\n      if (typeof option == 'number') data.to(option)\n      else if (action) data[action]()\n      else if (options.interval) data.pause().cycle()\n    })\n  }\n\n  var old = $.fn.carousel\n\n  $.fn.carousel             = Plugin\n  $.fn.carousel.Constructor = Carousel\n\n\n  // CAROUSEL NO CONFLICT\n  // ====================\n\n  $.fn.carousel.noConflict = function () {\n    $.fn.carousel = old\n    return this\n  }\n\n\n  // CAROUSEL DATA-API\n  // =================\n\n  var clickHandler = function (e) {\n    var href\n    var $this   = $(this)\n    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '')) // strip for ie7\n    if (!$target.hasClass('carousel')) return\n    var options = $.extend({}, $target.data(), $this.data())\n    var slideIndex = $this.attr('data-slide-to')\n    if (slideIndex) options.interval = false\n\n    Plugin.call($target, options)\n\n    if (slideIndex) {\n      $target.data('bs.carousel').to(slideIndex)\n    }\n\n    e.preventDefault()\n  }\n\n  $(document)\n    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)\n    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)\n\n  $(window).on('load', function () {\n    $('[data-ride=\"carousel\"]').each(function () {\n      var $carousel = $(this)\n      Plugin.call($carousel, $carousel.data())\n    })\n  })\n\n}(jQuery);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap/js/carousel.js\n// module id = 128\n// module chunks = 0","/* ========================================================================\n * Bootstrap: collapse.js v3.3.7\n * http://getbootstrap.com/javascript/#collapse\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n/* jshint latedef: false */\n\n+function ($) {\n  'use strict';\n\n  // COLLAPSE PUBLIC CLASS DEFINITION\n  // ================================\n\n  var Collapse = function (element, options) {\n    this.$element      = $(element)\n    this.options       = $.extend({}, Collapse.DEFAULTS, options)\n    this.$trigger      = $('[data-toggle=\"collapse\"][href=\"#' + element.id + '\"],' +\n                           '[data-toggle=\"collapse\"][data-target=\"#' + element.id + '\"]')\n    this.transitioning = null\n\n    if (this.options.parent) {\n      this.$parent = this.getParent()\n    } else {\n      this.addAriaAndCollapsedClass(this.$element, this.$trigger)\n    }\n\n    if (this.options.toggle) this.toggle()\n  }\n\n  Collapse.VERSION  = '3.3.7'\n\n  Collapse.TRANSITION_DURATION = 350\n\n  Collapse.DEFAULTS = {\n    toggle: true\n  }\n\n  Collapse.prototype.dimension = function () {\n    var hasWidth = this.$element.hasClass('width')\n    return hasWidth ? 'width' : 'height'\n  }\n\n  Collapse.prototype.show = function () {\n    if (this.transitioning || this.$element.hasClass('in')) return\n\n    var activesData\n    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')\n\n    if (actives && actives.length) {\n      activesData = actives.data('bs.collapse')\n      if (activesData && activesData.transitioning) return\n    }\n\n    var startEvent = $.Event('show.bs.collapse')\n    this.$element.trigger(startEvent)\n    if (startEvent.isDefaultPrevented()) return\n\n    if (actives && actives.length) {\n      Plugin.call(actives, 'hide')\n      activesData || actives.data('bs.collapse', null)\n    }\n\n    var dimension = this.dimension()\n\n    this.$element\n      .removeClass('collapse')\n      .addClass('collapsing')[dimension](0)\n      .attr('aria-expanded', true)\n\n    this.$trigger\n      .removeClass('collapsed')\n      .attr('aria-expanded', true)\n\n    this.transitioning = 1\n\n    var complete = function () {\n      this.$element\n        .removeClass('collapsing')\n        .addClass('collapse in')[dimension]('')\n      this.transitioning = 0\n      this.$element\n        .trigger('shown.bs.collapse')\n    }\n\n    if (!$.support.transition) return complete.call(this)\n\n    var scrollSize = $.camelCase(['scroll', dimension].join('-'))\n\n    this.$element\n      .one('bsTransitionEnd', $.proxy(complete, this))\n      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])\n  }\n\n  Collapse.prototype.hide = function () {\n    if (this.transitioning || !this.$element.hasClass('in')) return\n\n    var startEvent = $.Event('hide.bs.collapse')\n    this.$element.trigger(startEvent)\n    if (startEvent.isDefaultPrevented()) return\n\n    var dimension = this.dimension()\n\n    this.$element[dimension](this.$element[dimension]())[0].offsetHeight\n\n    this.$element\n      .addClass('collapsing')\n      .removeClass('collapse in')\n      .attr('aria-expanded', false)\n\n    this.$trigger\n      .addClass('collapsed')\n      .attr('aria-expanded', false)\n\n    this.transitioning = 1\n\n    var complete = function () {\n      this.transitioning = 0\n      this.$element\n        .removeClass('collapsing')\n        .addClass('collapse')\n        .trigger('hidden.bs.collapse')\n    }\n\n    if (!$.support.transition) return complete.call(this)\n\n    this.$element\n      [dimension](0)\n      .one('bsTransitionEnd', $.proxy(complete, this))\n      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)\n  }\n\n  Collapse.prototype.toggle = function () {\n    this[this.$element.hasClass('in') ? 'hide' : 'show']()\n  }\n\n  Collapse.prototype.getParent = function () {\n    return $(this.options.parent)\n      .find('[data-toggle=\"collapse\"][data-parent=\"' + this.options.parent + '\"]')\n      .each($.proxy(function (i, element) {\n        var $element = $(element)\n        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)\n      }, this))\n      .end()\n  }\n\n  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {\n    var isOpen = $element.hasClass('in')\n\n    $element.attr('aria-expanded', isOpen)\n    $trigger\n      .toggleClass('collapsed', !isOpen)\n      .attr('aria-expanded', isOpen)\n  }\n\n  function getTargetFromTrigger($trigger) {\n    var href\n    var target = $trigger.attr('data-target')\n      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '') // strip for ie7\n\n    return $(target)\n  }\n\n\n  // COLLAPSE PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.collapse')\n      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)\n\n      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false\n      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.collapse\n\n  $.fn.collapse             = Plugin\n  $.fn.collapse.Constructor = Collapse\n\n\n  // COLLAPSE NO CONFLICT\n  // ====================\n\n  $.fn.collapse.noConflict = function () {\n    $.fn.collapse = old\n    return this\n  }\n\n\n  // COLLAPSE DATA-API\n  // =================\n\n  $(document).on('click.bs.collapse.data-api', '[data-toggle=\"collapse\"]', function (e) {\n    var $this   = $(this)\n\n    if (!$this.attr('data-target')) e.preventDefault()\n\n    var $target = getTargetFromTrigger($this)\n    var data    = $target.data('bs.collapse')\n    var option  = data ? 'toggle' : $this.data()\n\n    Plugin.call($target, option)\n  })\n\n}(jQuery);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap/js/collapse.js\n// module id = 129\n// module chunks = 0","/* ========================================================================\n * Bootstrap: dropdown.js v3.3.7\n * http://getbootstrap.com/javascript/#dropdowns\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // DROPDOWN CLASS DEFINITION\n  // =========================\n\n  var backdrop = '.dropdown-backdrop'\n  var toggle   = '[data-toggle=\"dropdown\"]'\n  var Dropdown = function (element) {\n    $(element).on('click.bs.dropdown', this.toggle)\n  }\n\n  Dropdown.VERSION = '3.3.7'\n\n  function getParent($this) {\n    var selector = $this.attr('data-target')\n\n    if (!selector) {\n      selector = $this.attr('href')\n      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n    }\n\n    var $parent = selector && $(selector)\n\n    return $parent && $parent.length ? $parent : $this.parent()\n  }\n\n  function clearMenus(e) {\n    if (e && e.which === 3) return\n    $(backdrop).remove()\n    $(toggle).each(function () {\n      var $this         = $(this)\n      var $parent       = getParent($this)\n      var relatedTarget = { relatedTarget: this }\n\n      if (!$parent.hasClass('open')) return\n\n      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return\n\n      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))\n\n      if (e.isDefaultPrevented()) return\n\n      $this.attr('aria-expanded', 'false')\n      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))\n    })\n  }\n\n  Dropdown.prototype.toggle = function (e) {\n    var $this = $(this)\n\n    if ($this.is('.disabled, :disabled')) return\n\n    var $parent  = getParent($this)\n    var isActive = $parent.hasClass('open')\n\n    clearMenus()\n\n    if (!isActive) {\n      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {\n        // if mobile we use a backdrop because click events don't delegate\n        $(document.createElement('div'))\n          .addClass('dropdown-backdrop')\n          .insertAfter($(this))\n          .on('click', clearMenus)\n      }\n\n      var relatedTarget = { relatedTarget: this }\n      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))\n\n      if (e.isDefaultPrevented()) return\n\n      $this\n        .trigger('focus')\n        .attr('aria-expanded', 'true')\n\n      $parent\n        .toggleClass('open')\n        .trigger($.Event('shown.bs.dropdown', relatedTarget))\n    }\n\n    return false\n  }\n\n  Dropdown.prototype.keydown = function (e) {\n    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return\n\n    var $this = $(this)\n\n    e.preventDefault()\n    e.stopPropagation()\n\n    if ($this.is('.disabled, :disabled')) return\n\n    var $parent  = getParent($this)\n    var isActive = $parent.hasClass('open')\n\n    if (!isActive && e.which != 27 || isActive && e.which == 27) {\n      if (e.which == 27) $parent.find(toggle).trigger('focus')\n      return $this.trigger('click')\n    }\n\n    var desc = ' li:not(.disabled):visible a'\n    var $items = $parent.find('.dropdown-menu' + desc)\n\n    if (!$items.length) return\n\n    var index = $items.index(e.target)\n\n    if (e.which == 38 && index > 0)                 index--         // up\n    if (e.which == 40 && index < $items.length - 1) index++         // down\n    if (!~index)                                    index = 0\n\n    $items.eq(index).trigger('focus')\n  }\n\n\n  // DROPDOWN PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this)\n      var data  = $this.data('bs.dropdown')\n\n      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))\n      if (typeof option == 'string') data[option].call($this)\n    })\n  }\n\n  var old = $.fn.dropdown\n\n  $.fn.dropdown             = Plugin\n  $.fn.dropdown.Constructor = Dropdown\n\n\n  // DROPDOWN NO CONFLICT\n  // ====================\n\n  $.fn.dropdown.noConflict = function () {\n    $.fn.dropdown = old\n    return this\n  }\n\n\n  // APPLY TO STANDARD DROPDOWN ELEMENTS\n  // ===================================\n\n  $(document)\n    .on('click.bs.dropdown.data-api', clearMenus)\n    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })\n    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)\n    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)\n    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)\n\n}(jQuery);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap/js/dropdown.js\n// module id = 130\n// module chunks = 0","/* ========================================================================\n * Bootstrap: modal.js v3.3.7\n * http://getbootstrap.com/javascript/#modals\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // MODAL CLASS DEFINITION\n  // ======================\n\n  var Modal = function (element, options) {\n    this.options             = options\n    this.$body               = $(document.body)\n    this.$element            = $(element)\n    this.$dialog             = this.$element.find('.modal-dialog')\n    this.$backdrop           = null\n    this.isShown             = null\n    this.originalBodyPad     = null\n    this.scrollbarWidth      = 0\n    this.ignoreBackdropClick = false\n\n    if (this.options.remote) {\n      this.$element\n        .find('.modal-content')\n        .load(this.options.remote, $.proxy(function () {\n          this.$element.trigger('loaded.bs.modal')\n        }, this))\n    }\n  }\n\n  Modal.VERSION  = '3.3.7'\n\n  Modal.TRANSITION_DURATION = 300\n  Modal.BACKDROP_TRANSITION_DURATION = 150\n\n  Modal.DEFAULTS = {\n    backdrop: true,\n    keyboard: true,\n    show: true\n  }\n\n  Modal.prototype.toggle = function (_relatedTarget) {\n    return this.isShown ? this.hide() : this.show(_relatedTarget)\n  }\n\n  Modal.prototype.show = function (_relatedTarget) {\n    var that = this\n    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })\n\n    this.$element.trigger(e)\n\n    if (this.isShown || e.isDefaultPrevented()) return\n\n    this.isShown = true\n\n    this.checkScrollbar()\n    this.setScrollbar()\n    this.$body.addClass('modal-open')\n\n    this.escape()\n    this.resize()\n\n    this.$element.on('click.dismiss.bs.modal', '[data-dismiss=\"modal\"]', $.proxy(this.hide, this))\n\n    this.$dialog.on('mousedown.dismiss.bs.modal', function () {\n      that.$element.one('mouseup.dismiss.bs.modal', function (e) {\n        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true\n      })\n    })\n\n    this.backdrop(function () {\n      var transition = $.support.transition && that.$element.hasClass('fade')\n\n      if (!that.$element.parent().length) {\n        that.$element.appendTo(that.$body) // don't move modals dom position\n      }\n\n      that.$element\n        .show()\n        .scrollTop(0)\n\n      that.adjustDialog()\n\n      if (transition) {\n        that.$element[0].offsetWidth // force reflow\n      }\n\n      that.$element.addClass('in')\n\n      that.enforceFocus()\n\n      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })\n\n      transition ?\n        that.$dialog // wait for modal to slide in\n          .one('bsTransitionEnd', function () {\n            that.$element.trigger('focus').trigger(e)\n          })\n          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\n        that.$element.trigger('focus').trigger(e)\n    })\n  }\n\n  Modal.prototype.hide = function (e) {\n    if (e) e.preventDefault()\n\n    e = $.Event('hide.bs.modal')\n\n    this.$element.trigger(e)\n\n    if (!this.isShown || e.isDefaultPrevented()) return\n\n    this.isShown = false\n\n    this.escape()\n    this.resize()\n\n    $(document).off('focusin.bs.modal')\n\n    this.$element\n      .removeClass('in')\n      .off('click.dismiss.bs.modal')\n      .off('mouseup.dismiss.bs.modal')\n\n    this.$dialog.off('mousedown.dismiss.bs.modal')\n\n    $.support.transition && this.$element.hasClass('fade') ?\n      this.$element\n        .one('bsTransitionEnd', $.proxy(this.hideModal, this))\n        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\n      this.hideModal()\n  }\n\n  Modal.prototype.enforceFocus = function () {\n    $(document)\n      .off('focusin.bs.modal') // guard against infinite focus loop\n      .on('focusin.bs.modal', $.proxy(function (e) {\n        if (document !== e.target &&\n            this.$element[0] !== e.target &&\n            !this.$element.has(e.target).length) {\n          this.$element.trigger('focus')\n        }\n      }, this))\n  }\n\n  Modal.prototype.escape = function () {\n    if (this.isShown && this.options.keyboard) {\n      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {\n        e.which == 27 && this.hide()\n      }, this))\n    } else if (!this.isShown) {\n      this.$element.off('keydown.dismiss.bs.modal')\n    }\n  }\n\n  Modal.prototype.resize = function () {\n    if (this.isShown) {\n      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))\n    } else {\n      $(window).off('resize.bs.modal')\n    }\n  }\n\n  Modal.prototype.hideModal = function () {\n    var that = this\n    this.$element.hide()\n    this.backdrop(function () {\n      that.$body.removeClass('modal-open')\n      that.resetAdjustments()\n      that.resetScrollbar()\n      that.$element.trigger('hidden.bs.modal')\n    })\n  }\n\n  Modal.prototype.removeBackdrop = function () {\n    this.$backdrop && this.$backdrop.remove()\n    this.$backdrop = null\n  }\n\n  Modal.prototype.backdrop = function (callback) {\n    var that = this\n    var animate = this.$element.hasClass('fade') ? 'fade' : ''\n\n    if (this.isShown && this.options.backdrop) {\n      var doAnimate = $.support.transition && animate\n\n      this.$backdrop = $(document.createElement('div'))\n        .addClass('modal-backdrop ' + animate)\n        .appendTo(this.$body)\n\n      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {\n        if (this.ignoreBackdropClick) {\n          this.ignoreBackdropClick = false\n          return\n        }\n        if (e.target !== e.currentTarget) return\n        this.options.backdrop == 'static'\n          ? this.$element[0].focus()\n          : this.hide()\n      }, this))\n\n      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow\n\n      this.$backdrop.addClass('in')\n\n      if (!callback) return\n\n      doAnimate ?\n        this.$backdrop\n          .one('bsTransitionEnd', callback)\n          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\n        callback()\n\n    } else if (!this.isShown && this.$backdrop) {\n      this.$backdrop.removeClass('in')\n\n      var callbackRemove = function () {\n        that.removeBackdrop()\n        callback && callback()\n      }\n      $.support.transition && this.$element.hasClass('fade') ?\n        this.$backdrop\n          .one('bsTransitionEnd', callbackRemove)\n          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\n        callbackRemove()\n\n    } else if (callback) {\n      callback()\n    }\n  }\n\n  // these following methods are used to handle overflowing modals\n\n  Modal.prototype.handleUpdate = function () {\n    this.adjustDialog()\n  }\n\n  Modal.prototype.adjustDialog = function () {\n    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight\n\n    this.$element.css({\n      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',\n      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''\n    })\n  }\n\n  Modal.prototype.resetAdjustments = function () {\n    this.$element.css({\n      paddingLeft: '',\n      paddingRight: ''\n    })\n  }\n\n  Modal.prototype.checkScrollbar = function () {\n    var fullWindowWidth = window.innerWidth\n    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8\n      var documentElementRect = document.documentElement.getBoundingClientRect()\n      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)\n    }\n    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth\n    this.scrollbarWidth = this.measureScrollbar()\n  }\n\n  Modal.prototype.setScrollbar = function () {\n    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)\n    this.originalBodyPad = document.body.style.paddingRight || ''\n    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)\n  }\n\n  Modal.prototype.resetScrollbar = function () {\n    this.$body.css('padding-right', this.originalBodyPad)\n  }\n\n  Modal.prototype.measureScrollbar = function () { // thx walsh\n    var scrollDiv = document.createElement('div')\n    scrollDiv.className = 'modal-scrollbar-measure'\n    this.$body.append(scrollDiv)\n    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth\n    this.$body[0].removeChild(scrollDiv)\n    return scrollbarWidth\n  }\n\n\n  // MODAL PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option, _relatedTarget) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.modal')\n      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)\n\n      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))\n      if (typeof option == 'string') data[option](_relatedTarget)\n      else if (options.show) data.show(_relatedTarget)\n    })\n  }\n\n  var old = $.fn.modal\n\n  $.fn.modal             = Plugin\n  $.fn.modal.Constructor = Modal\n\n\n  // MODAL NO CONFLICT\n  // =================\n\n  $.fn.modal.noConflict = function () {\n    $.fn.modal = old\n    return this\n  }\n\n\n  // MODAL DATA-API\n  // ==============\n\n  $(document).on('click.bs.modal.data-api', '[data-toggle=\"modal\"]', function (e) {\n    var $this   = $(this)\n    var href    = $this.attr('href')\n    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\\s]+$)/, ''))) // strip for ie7\n    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())\n\n    if ($this.is('a')) e.preventDefault()\n\n    $target.one('show.bs.modal', function (showEvent) {\n      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown\n      $target.one('hidden.bs.modal', function () {\n        $this.is(':visible') && $this.trigger('focus')\n      })\n    })\n    Plugin.call($target, option, this)\n  })\n\n}(jQuery);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap/js/modal.js\n// module id = 131\n// module chunks = 0","/* ========================================================================\n * Bootstrap: tooltip.js v3.3.7\n * http://getbootstrap.com/javascript/#tooltip\n * Inspired by the original jQuery.tipsy by Jason Frame\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // TOOLTIP PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Tooltip = function (element, options) {\n    this.type       = null\n    this.options    = null\n    this.enabled    = null\n    this.timeout    = null\n    this.hoverState = null\n    this.$element   = null\n    this.inState    = null\n\n    this.init('tooltip', element, options)\n  }\n\n  Tooltip.VERSION  = '3.3.7'\n\n  Tooltip.TRANSITION_DURATION = 150\n\n  Tooltip.DEFAULTS = {\n    animation: true,\n    placement: 'top',\n    selector: false,\n    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    container: false,\n    viewport: {\n      selector: 'body',\n      padding: 0\n    }\n  }\n\n  Tooltip.prototype.init = function (type, element, options) {\n    this.enabled   = true\n    this.type      = type\n    this.$element  = $(element)\n    this.options   = this.getOptions(options)\n    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))\n    this.inState   = { click: false, hover: false, focus: false }\n\n    if (this.$element[0] instanceof document.constructor && !this.options.selector) {\n      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')\n    }\n\n    var triggers = this.options.trigger.split(' ')\n\n    for (var i = triggers.length; i--;) {\n      var trigger = triggers[i]\n\n      if (trigger == 'click') {\n        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))\n      } else if (trigger != 'manual') {\n        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'\n        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'\n\n        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))\n        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))\n      }\n    }\n\n    this.options.selector ?\n      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :\n      this.fixTitle()\n  }\n\n  Tooltip.prototype.getDefaults = function () {\n    return Tooltip.DEFAULTS\n  }\n\n  Tooltip.prototype.getOptions = function (options) {\n    options = $.extend({}, this.getDefaults(), this.$element.data(), options)\n\n    if (options.delay && typeof options.delay == 'number') {\n      options.delay = {\n        show: options.delay,\n        hide: options.delay\n      }\n    }\n\n    return options\n  }\n\n  Tooltip.prototype.getDelegateOptions = function () {\n    var options  = {}\n    var defaults = this.getDefaults()\n\n    this._options && $.each(this._options, function (key, value) {\n      if (defaults[key] != value) options[key] = value\n    })\n\n    return options\n  }\n\n  Tooltip.prototype.enter = function (obj) {\n    var self = obj instanceof this.constructor ?\n      obj : $(obj.currentTarget).data('bs.' + this.type)\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\n      $(obj.currentTarget).data('bs.' + this.type, self)\n    }\n\n    if (obj instanceof $.Event) {\n      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true\n    }\n\n    if (self.tip().hasClass('in') || self.hoverState == 'in') {\n      self.hoverState = 'in'\n      return\n    }\n\n    clearTimeout(self.timeout)\n\n    self.hoverState = 'in'\n\n    if (!self.options.delay || !self.options.delay.show) return self.show()\n\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'in') self.show()\n    }, self.options.delay.show)\n  }\n\n  Tooltip.prototype.isInStateTrue = function () {\n    for (var key in this.inState) {\n      if (this.inState[key]) return true\n    }\n\n    return false\n  }\n\n  Tooltip.prototype.leave = function (obj) {\n    var self = obj instanceof this.constructor ?\n      obj : $(obj.currentTarget).data('bs.' + this.type)\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\n      $(obj.currentTarget).data('bs.' + this.type, self)\n    }\n\n    if (obj instanceof $.Event) {\n      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false\n    }\n\n    if (self.isInStateTrue()) return\n\n    clearTimeout(self.timeout)\n\n    self.hoverState = 'out'\n\n    if (!self.options.delay || !self.options.delay.hide) return self.hide()\n\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'out') self.hide()\n    }, self.options.delay.hide)\n  }\n\n  Tooltip.prototype.show = function () {\n    var e = $.Event('show.bs.' + this.type)\n\n    if (this.hasContent() && this.enabled) {\n      this.$element.trigger(e)\n\n      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])\n      if (e.isDefaultPrevented() || !inDom) return\n      var that = this\n\n      var $tip = this.tip()\n\n      var tipId = this.getUID(this.type)\n\n      this.setContent()\n      $tip.attr('id', tipId)\n      this.$element.attr('aria-describedby', tipId)\n\n      if (this.options.animation) $tip.addClass('fade')\n\n      var placement = typeof this.options.placement == 'function' ?\n        this.options.placement.call(this, $tip[0], this.$element[0]) :\n        this.options.placement\n\n      var autoToken = /\\s?auto?\\s?/i\n      var autoPlace = autoToken.test(placement)\n      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'\n\n      $tip\n        .detach()\n        .css({ top: 0, left: 0, display: 'block' })\n        .addClass(placement)\n        .data('bs.' + this.type, this)\n\n      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)\n      this.$element.trigger('inserted.bs.' + this.type)\n\n      var pos          = this.getPosition()\n      var actualWidth  = $tip[0].offsetWidth\n      var actualHeight = $tip[0].offsetHeight\n\n      if (autoPlace) {\n        var orgPlacement = placement\n        var viewportDim = this.getPosition(this.$viewport)\n\n        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :\n                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :\n                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :\n                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :\n                    placement\n\n        $tip\n          .removeClass(orgPlacement)\n          .addClass(placement)\n      }\n\n      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)\n\n      this.applyPlacement(calculatedOffset, placement)\n\n      var complete = function () {\n        var prevHoverState = that.hoverState\n        that.$element.trigger('shown.bs.' + that.type)\n        that.hoverState = null\n\n        if (prevHoverState == 'out') that.leave(that)\n      }\n\n      $.support.transition && this.$tip.hasClass('fade') ?\n        $tip\n          .one('bsTransitionEnd', complete)\n          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\n        complete()\n    }\n  }\n\n  Tooltip.prototype.applyPlacement = function (offset, placement) {\n    var $tip   = this.tip()\n    var width  = $tip[0].offsetWidth\n    var height = $tip[0].offsetHeight\n\n    // manually read margins because getBoundingClientRect includes difference\n    var marginTop = parseInt($tip.css('margin-top'), 10)\n    var marginLeft = parseInt($tip.css('margin-left'), 10)\n\n    // we must check for NaN for ie 8/9\n    if (isNaN(marginTop))  marginTop  = 0\n    if (isNaN(marginLeft)) marginLeft = 0\n\n    offset.top  += marginTop\n    offset.left += marginLeft\n\n    // $.fn.offset doesn't round pixel values\n    // so we use setOffset directly with our own function B-0\n    $.offset.setOffset($tip[0], $.extend({\n      using: function (props) {\n        $tip.css({\n          top: Math.round(props.top),\n          left: Math.round(props.left)\n        })\n      }\n    }, offset), 0)\n\n    $tip.addClass('in')\n\n    // check to see if placing tip in new offset caused the tip to resize itself\n    var actualWidth  = $tip[0].offsetWidth\n    var actualHeight = $tip[0].offsetHeight\n\n    if (placement == 'top' && actualHeight != height) {\n      offset.top = offset.top + height - actualHeight\n    }\n\n    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)\n\n    if (delta.left) offset.left += delta.left\n    else offset.top += delta.top\n\n    var isVertical          = /top|bottom/.test(placement)\n    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight\n    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'\n\n    $tip.offset(offset)\n    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)\n  }\n\n  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {\n    this.arrow()\n      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n      .css(isVertical ? 'top' : 'left', '')\n  }\n\n  Tooltip.prototype.setContent = function () {\n    var $tip  = this.tip()\n    var title = this.getTitle()\n\n    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)\n    $tip.removeClass('fade in top bottom left right')\n  }\n\n  Tooltip.prototype.hide = function (callback) {\n    var that = this\n    var $tip = $(this.$tip)\n    var e    = $.Event('hide.bs.' + this.type)\n\n    function complete() {\n      if (that.hoverState != 'in') $tip.detach()\n      if (that.$element) { // TODO: Check whether guarding this code with this `if` is really necessary.\n        that.$element\n          .removeAttr('aria-describedby')\n          .trigger('hidden.bs.' + that.type)\n      }\n      callback && callback()\n    }\n\n    this.$element.trigger(e)\n\n    if (e.isDefaultPrevented()) return\n\n    $tip.removeClass('in')\n\n    $.support.transition && $tip.hasClass('fade') ?\n      $tip\n        .one('bsTransitionEnd', complete)\n        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\n      complete()\n\n    this.hoverState = null\n\n    return this\n  }\n\n  Tooltip.prototype.fixTitle = function () {\n    var $e = this.$element\n    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {\n      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')\n    }\n  }\n\n  Tooltip.prototype.hasContent = function () {\n    return this.getTitle()\n  }\n\n  Tooltip.prototype.getPosition = function ($element) {\n    $element   = $element || this.$element\n\n    var el     = $element[0]\n    var isBody = el.tagName == 'BODY'\n\n    var elRect    = el.getBoundingClientRect()\n    if (elRect.width == null) {\n      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })\n    }\n    var isSvg = window.SVGElement && el instanceof window.SVGElement\n    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.\n    // See https://github.com/twbs/bootstrap/issues/20280\n    var elOffset  = isBody ? { top: 0, left: 0 } : (isSvg ? null : $element.offset())\n    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }\n    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null\n\n    return $.extend({}, elRect, scroll, outerDims, elOffset)\n  }\n\n  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {\n    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :\n           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :\n           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :\n        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }\n\n  }\n\n  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {\n    var delta = { top: 0, left: 0 }\n    if (!this.$viewport) return delta\n\n    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0\n    var viewportDimensions = this.getPosition(this.$viewport)\n\n    if (/right|left/.test(placement)) {\n      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll\n      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight\n      if (topEdgeOffset < viewportDimensions.top) { // top overflow\n        delta.top = viewportDimensions.top - topEdgeOffset\n      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset\n      }\n    } else {\n      var leftEdgeOffset  = pos.left - viewportPadding\n      var rightEdgeOffset = pos.left + viewportPadding + actualWidth\n      if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n        delta.left = viewportDimensions.left - leftEdgeOffset\n      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset\n      }\n    }\n\n    return delta\n  }\n\n  Tooltip.prototype.getTitle = function () {\n    var title\n    var $e = this.$element\n    var o  = this.options\n\n    title = $e.attr('data-original-title')\n      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)\n\n    return title\n  }\n\n  Tooltip.prototype.getUID = function (prefix) {\n    do prefix += ~~(Math.random() * 1000000)\n    while (document.getElementById(prefix))\n    return prefix\n  }\n\n  Tooltip.prototype.tip = function () {\n    if (!this.$tip) {\n      this.$tip = $(this.options.template)\n      if (this.$tip.length != 1) {\n        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')\n      }\n    }\n    return this.$tip\n  }\n\n  Tooltip.prototype.arrow = function () {\n    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))\n  }\n\n  Tooltip.prototype.enable = function () {\n    this.enabled = true\n  }\n\n  Tooltip.prototype.disable = function () {\n    this.enabled = false\n  }\n\n  Tooltip.prototype.toggleEnabled = function () {\n    this.enabled = !this.enabled\n  }\n\n  Tooltip.prototype.toggle = function (e) {\n    var self = this\n    if (e) {\n      self = $(e.currentTarget).data('bs.' + this.type)\n      if (!self) {\n        self = new this.constructor(e.currentTarget, this.getDelegateOptions())\n        $(e.currentTarget).data('bs.' + this.type, self)\n      }\n    }\n\n    if (e) {\n      self.inState.click = !self.inState.click\n      if (self.isInStateTrue()) self.enter(self)\n      else self.leave(self)\n    } else {\n      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)\n    }\n  }\n\n  Tooltip.prototype.destroy = function () {\n    var that = this\n    clearTimeout(this.timeout)\n    this.hide(function () {\n      that.$element.off('.' + that.type).removeData('bs.' + that.type)\n      if (that.$tip) {\n        that.$tip.detach()\n      }\n      that.$tip = null\n      that.$arrow = null\n      that.$viewport = null\n      that.$element = null\n    })\n  }\n\n\n  // TOOLTIP PLUGIN DEFINITION\n  // =========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.tooltip')\n      var options = typeof option == 'object' && option\n\n      if (!data && /destroy|hide/.test(option)) return\n      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.tooltip\n\n  $.fn.tooltip             = Plugin\n  $.fn.tooltip.Constructor = Tooltip\n\n\n  // TOOLTIP NO CONFLICT\n  // ===================\n\n  $.fn.tooltip.noConflict = function () {\n    $.fn.tooltip = old\n    return this\n  }\n\n}(jQuery);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap/js/tooltip.js\n// module id = 132\n// module chunks = 0","/* ========================================================================\n * Bootstrap: popover.js v3.3.7\n * http://getbootstrap.com/javascript/#popovers\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // POPOVER PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Popover = function (element, options) {\n    this.init('popover', element, options)\n  }\n\n  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')\n\n  Popover.VERSION  = '3.3.7'\n\n  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {\n    placement: 'right',\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>'\n  })\n\n\n  // NOTE: POPOVER EXTENDS tooltip.js\n  // ================================\n\n  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)\n\n  Popover.prototype.constructor = Popover\n\n  Popover.prototype.getDefaults = function () {\n    return Popover.DEFAULTS\n  }\n\n  Popover.prototype.setContent = function () {\n    var $tip    = this.tip()\n    var title   = this.getTitle()\n    var content = this.getContent()\n\n    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)\n    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events\n      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'\n    ](content)\n\n    $tip.removeClass('fade top bottom left right in')\n\n    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do\n    // this manually by checking the contents.\n    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()\n  }\n\n  Popover.prototype.hasContent = function () {\n    return this.getTitle() || this.getContent()\n  }\n\n  Popover.prototype.getContent = function () {\n    var $e = this.$element\n    var o  = this.options\n\n    return $e.attr('data-content')\n      || (typeof o.content == 'function' ?\n            o.content.call($e[0]) :\n            o.content)\n  }\n\n  Popover.prototype.arrow = function () {\n    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))\n  }\n\n\n  // POPOVER PLUGIN DEFINITION\n  // =========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.popover')\n      var options = typeof option == 'object' && option\n\n      if (!data && /destroy|hide/.test(option)) return\n      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.popover\n\n  $.fn.popover             = Plugin\n  $.fn.popover.Constructor = Popover\n\n\n  // POPOVER NO CONFLICT\n  // ===================\n\n  $.fn.popover.noConflict = function () {\n    $.fn.popover = old\n    return this\n  }\n\n}(jQuery);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap/js/popover.js\n// module id = 133\n// module chunks = 0","/* ========================================================================\n * Bootstrap: scrollspy.js v3.3.7\n * http://getbootstrap.com/javascript/#scrollspy\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // SCROLLSPY CLASS DEFINITION\n  // ==========================\n\n  function ScrollSpy(element, options) {\n    this.$body          = $(document.body)\n    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)\n    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)\n    this.selector       = (this.options.target || '') + ' .nav li > a'\n    this.offsets        = []\n    this.targets        = []\n    this.activeTarget   = null\n    this.scrollHeight   = 0\n\n    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))\n    this.refresh()\n    this.process()\n  }\n\n  ScrollSpy.VERSION  = '3.3.7'\n\n  ScrollSpy.DEFAULTS = {\n    offset: 10\n  }\n\n  ScrollSpy.prototype.getScrollHeight = function () {\n    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)\n  }\n\n  ScrollSpy.prototype.refresh = function () {\n    var that          = this\n    var offsetMethod  = 'offset'\n    var offsetBase    = 0\n\n    this.offsets      = []\n    this.targets      = []\n    this.scrollHeight = this.getScrollHeight()\n\n    if (!$.isWindow(this.$scrollElement[0])) {\n      offsetMethod = 'position'\n      offsetBase   = this.$scrollElement.scrollTop()\n    }\n\n    this.$body\n      .find(this.selector)\n      .map(function () {\n        var $el   = $(this)\n        var href  = $el.data('target') || $el.attr('href')\n        var $href = /^#./.test(href) && $(href)\n\n        return ($href\n          && $href.length\n          && $href.is(':visible')\n          && [[$href[offsetMethod]().top + offsetBase, href]]) || null\n      })\n      .sort(function (a, b) { return a[0] - b[0] })\n      .each(function () {\n        that.offsets.push(this[0])\n        that.targets.push(this[1])\n      })\n  }\n\n  ScrollSpy.prototype.process = function () {\n    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset\n    var scrollHeight = this.getScrollHeight()\n    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()\n    var offsets      = this.offsets\n    var targets      = this.targets\n    var activeTarget = this.activeTarget\n    var i\n\n    if (this.scrollHeight != scrollHeight) {\n      this.refresh()\n    }\n\n    if (scrollTop >= maxScroll) {\n      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)\n    }\n\n    if (activeTarget && scrollTop < offsets[0]) {\n      this.activeTarget = null\n      return this.clear()\n    }\n\n    for (i = offsets.length; i--;) {\n      activeTarget != targets[i]\n        && scrollTop >= offsets[i]\n        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])\n        && this.activate(targets[i])\n    }\n  }\n\n  ScrollSpy.prototype.activate = function (target) {\n    this.activeTarget = target\n\n    this.clear()\n\n    var selector = this.selector +\n      '[data-target=\"' + target + '\"],' +\n      this.selector + '[href=\"' + target + '\"]'\n\n    var active = $(selector)\n      .parents('li')\n      .addClass('active')\n\n    if (active.parent('.dropdown-menu').length) {\n      active = active\n        .closest('li.dropdown')\n        .addClass('active')\n    }\n\n    active.trigger('activate.bs.scrollspy')\n  }\n\n  ScrollSpy.prototype.clear = function () {\n    $(this.selector)\n      .parentsUntil(this.options.target, '.active')\n      .removeClass('active')\n  }\n\n\n  // SCROLLSPY PLUGIN DEFINITION\n  // ===========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.scrollspy')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.scrollspy\n\n  $.fn.scrollspy             = Plugin\n  $.fn.scrollspy.Constructor = ScrollSpy\n\n\n  // SCROLLSPY NO CONFLICT\n  // =====================\n\n  $.fn.scrollspy.noConflict = function () {\n    $.fn.scrollspy = old\n    return this\n  }\n\n\n  // SCROLLSPY DATA-API\n  // ==================\n\n  $(window).on('load.bs.scrollspy.data-api', function () {\n    $('[data-spy=\"scroll\"]').each(function () {\n      var $spy = $(this)\n      Plugin.call($spy, $spy.data())\n    })\n  })\n\n}(jQuery);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap/js/scrollspy.js\n// module id = 134\n// module chunks = 0","/* ========================================================================\n * Bootstrap: tab.js v3.3.7\n * http://getbootstrap.com/javascript/#tabs\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // TAB CLASS DEFINITION\n  // ====================\n\n  var Tab = function (element) {\n    // jscs:disable requireDollarBeforejQueryAssignment\n    this.element = $(element)\n    // jscs:enable requireDollarBeforejQueryAssignment\n  }\n\n  Tab.VERSION = '3.3.7'\n\n  Tab.TRANSITION_DURATION = 150\n\n  Tab.prototype.show = function () {\n    var $this    = this.element\n    var $ul      = $this.closest('ul:not(.dropdown-menu)')\n    var selector = $this.data('target')\n\n    if (!selector) {\n      selector = $this.attr('href')\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n    }\n\n    if ($this.parent('li').hasClass('active')) return\n\n    var $previous = $ul.find('.active:last a')\n    var hideEvent = $.Event('hide.bs.tab', {\n      relatedTarget: $this[0]\n    })\n    var showEvent = $.Event('show.bs.tab', {\n      relatedTarget: $previous[0]\n    })\n\n    $previous.trigger(hideEvent)\n    $this.trigger(showEvent)\n\n    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return\n\n    var $target = $(selector)\n\n    this.activate($this.closest('li'), $ul)\n    this.activate($target, $target.parent(), function () {\n      $previous.trigger({\n        type: 'hidden.bs.tab',\n        relatedTarget: $this[0]\n      })\n      $this.trigger({\n        type: 'shown.bs.tab',\n        relatedTarget: $previous[0]\n      })\n    })\n  }\n\n  Tab.prototype.activate = function (element, container, callback) {\n    var $active    = container.find('> .active')\n    var transition = callback\n      && $.support.transition\n      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)\n\n    function next() {\n      $active\n        .removeClass('active')\n        .find('> .dropdown-menu > .active')\n          .removeClass('active')\n        .end()\n        .find('[data-toggle=\"tab\"]')\n          .attr('aria-expanded', false)\n\n      element\n        .addClass('active')\n        .find('[data-toggle=\"tab\"]')\n          .attr('aria-expanded', true)\n\n      if (transition) {\n        element[0].offsetWidth // reflow for transition\n        element.addClass('in')\n      } else {\n        element.removeClass('fade')\n      }\n\n      if (element.parent('.dropdown-menu').length) {\n        element\n          .closest('li.dropdown')\n            .addClass('active')\n          .end()\n          .find('[data-toggle=\"tab\"]')\n            .attr('aria-expanded', true)\n      }\n\n      callback && callback()\n    }\n\n    $active.length && transition ?\n      $active\n        .one('bsTransitionEnd', next)\n        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :\n      next()\n\n    $active.removeClass('in')\n  }\n\n\n  // TAB PLUGIN DEFINITION\n  // =====================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this)\n      var data  = $this.data('bs.tab')\n\n      if (!data) $this.data('bs.tab', (data = new Tab(this)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.tab\n\n  $.fn.tab             = Plugin\n  $.fn.tab.Constructor = Tab\n\n\n  // TAB NO CONFLICT\n  // ===============\n\n  $.fn.tab.noConflict = function () {\n    $.fn.tab = old\n    return this\n  }\n\n\n  // TAB DATA-API\n  // ============\n\n  var clickHandler = function (e) {\n    e.preventDefault()\n    Plugin.call($(this), 'show')\n  }\n\n  $(document)\n    .on('click.bs.tab.data-api', '[data-toggle=\"tab\"]', clickHandler)\n    .on('click.bs.tab.data-api', '[data-toggle=\"pill\"]', clickHandler)\n\n}(jQuery);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap/js/tab.js\n// module id = 135\n// module chunks = 0","/* ========================================================================\n * Bootstrap: affix.js v3.3.7\n * http://getbootstrap.com/javascript/#affix\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // AFFIX CLASS DEFINITION\n  // ======================\n\n  var Affix = function (element, options) {\n    this.options = $.extend({}, Affix.DEFAULTS, options)\n\n    this.$target = $(this.options.target)\n      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))\n      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))\n\n    this.$element     = $(element)\n    this.affixed      = null\n    this.unpin        = null\n    this.pinnedOffset = null\n\n    this.checkPosition()\n  }\n\n  Affix.VERSION  = '3.3.7'\n\n  Affix.RESET    = 'affix affix-top affix-bottom'\n\n  Affix.DEFAULTS = {\n    offset: 0,\n    target: window\n  }\n\n  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {\n    var scrollTop    = this.$target.scrollTop()\n    var position     = this.$element.offset()\n    var targetHeight = this.$target.height()\n\n    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false\n\n    if (this.affixed == 'bottom') {\n      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'\n      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'\n    }\n\n    var initializing   = this.affixed == null\n    var colliderTop    = initializing ? scrollTop : position.top\n    var colliderHeight = initializing ? targetHeight : height\n\n    if (offsetTop != null && scrollTop <= offsetTop) return 'top'\n    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'\n\n    return false\n  }\n\n  Affix.prototype.getPinnedOffset = function () {\n    if (this.pinnedOffset) return this.pinnedOffset\n    this.$element.removeClass(Affix.RESET).addClass('affix')\n    var scrollTop = this.$target.scrollTop()\n    var position  = this.$element.offset()\n    return (this.pinnedOffset = position.top - scrollTop)\n  }\n\n  Affix.prototype.checkPositionWithEventLoop = function () {\n    setTimeout($.proxy(this.checkPosition, this), 1)\n  }\n\n  Affix.prototype.checkPosition = function () {\n    if (!this.$element.is(':visible')) return\n\n    var height       = this.$element.height()\n    var offset       = this.options.offset\n    var offsetTop    = offset.top\n    var offsetBottom = offset.bottom\n    var scrollHeight = Math.max($(document).height(), $(document.body).height())\n\n    if (typeof offset != 'object')         offsetBottom = offsetTop = offset\n    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)\n    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)\n\n    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)\n\n    if (this.affixed != affix) {\n      if (this.unpin != null) this.$element.css('top', '')\n\n      var affixType = 'affix' + (affix ? '-' + affix : '')\n      var e         = $.Event(affixType + '.bs.affix')\n\n      this.$element.trigger(e)\n\n      if (e.isDefaultPrevented()) return\n\n      this.affixed = affix\n      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null\n\n      this.$element\n        .removeClass(Affix.RESET)\n        .addClass(affixType)\n        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')\n    }\n\n    if (affix == 'bottom') {\n      this.$element.offset({\n        top: scrollHeight - height - offsetBottom\n      })\n    }\n  }\n\n\n  // AFFIX PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.affix')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.affix\n\n  $.fn.affix             = Plugin\n  $.fn.affix.Constructor = Affix\n\n\n  // AFFIX NO CONFLICT\n  // =================\n\n  $.fn.affix.noConflict = function () {\n    $.fn.affix = old\n    return this\n  }\n\n\n  // AFFIX DATA-API\n  // ==============\n\n  $(window).on('load', function () {\n    $('[data-spy=\"affix\"]').each(function () {\n      var $spy = $(this)\n      var data = $spy.data()\n\n      data.offset = data.offset || {}\n\n      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom\n      if (data.offsetTop    != null) data.offset.top    = data.offsetTop\n\n      Plugin.call($spy, data)\n    })\n  })\n\n}(jQuery);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrap/js/affix.js\n// module id = 136\n// module chunks = 0","/*!\n * jQuery UI Widget 1.12.1\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Widget\n//>>group: Core\n//>>description: Provides a factory for creating stateful widgets with a common API.\n//>>docs: http://api.jqueryui.com/jQuery.widget/\n//>>demos: http://jqueryui.com/widget/\n\n( function( factory ) {\n\tif ( typeof define === \"function\" && define.amd ) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine( [ \"jquery\", \"./version\" ], factory );\n\t} else {\n\n\t\t// Browser globals\n\t\tfactory( jQuery );\n\t}\n}( function( $ ) {\n\nvar widgetUuid = 0;\nvar widgetSlice = Array.prototype.slice;\n\n$.cleanData = ( function( orig ) {\n\treturn function( elems ) {\n\t\tvar events, elem, i;\n\t\tfor ( i = 0; ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\ttry {\n\n\t\t\t\t// Only trigger remove when necessary to save time\n\t\t\t\tevents = $._data( elem, \"events\" );\n\t\t\t\tif ( events && events.remove ) {\n\t\t\t\t\t$( elem ).triggerHandler( \"remove\" );\n\t\t\t\t}\n\n\t\t\t// Http://bugs.jquery.com/ticket/8235\n\t\t\t} catch ( e ) {}\n\t\t}\n\t\torig( elems );\n\t};\n} )( $.cleanData );\n\n$.widget = function( name, base, prototype ) {\n\tvar existingConstructor, constructor, basePrototype;\n\n\t// ProxiedPrototype allows the provided prototype to remain unmodified\n\t// so that it can be used as a mixin for multiple widgets (#8876)\n\tvar proxiedPrototype = {};\n\n\tvar namespace = name.split( \".\" )[ 0 ];\n\tname = name.split( \".\" )[ 1 ];\n\tvar fullName = namespace + \"-\" + name;\n\n\tif ( !prototype ) {\n\t\tprototype = base;\n\t\tbase = $.Widget;\n\t}\n\n\tif ( $.isArray( prototype ) ) {\n\t\tprototype = $.extend.apply( null, [ {} ].concat( prototype ) );\n\t}\n\n\t// Create selector for plugin\n\t$.expr[ \":\" ][ fullName.toLowerCase() ] = function( elem ) {\n\t\treturn !!$.data( elem, fullName );\n\t};\n\n\t$[ namespace ] = $[ namespace ] || {};\n\texistingConstructor = $[ namespace ][ name ];\n\tconstructor = $[ namespace ][ name ] = function( options, element ) {\n\n\t\t// Allow instantiation without \"new\" keyword\n\t\tif ( !this._createWidget ) {\n\t\t\treturn new constructor( options, element );\n\t\t}\n\n\t\t// Allow instantiation without initializing for simple inheritance\n\t\t// must use \"new\" keyword (the code above always passes args)\n\t\tif ( arguments.length ) {\n\t\t\tthis._createWidget( options, element );\n\t\t}\n\t};\n\n\t// Extend with the existing constructor to carry over any static properties\n\t$.extend( constructor, existingConstructor, {\n\t\tversion: prototype.version,\n\n\t\t// Copy the object used to create the prototype in case we need to\n\t\t// redefine the widget later\n\t\t_proto: $.extend( {}, prototype ),\n\n\t\t// Track widgets that inherit from this widget in case this widget is\n\t\t// redefined after a widget inherits from it\n\t\t_childConstructors: []\n\t} );\n\n\tbasePrototype = new base();\n\n\t// We need to make the options hash a property directly on the new instance\n\t// otherwise we'll modify the options hash on the prototype that we're\n\t// inheriting from\n\tbasePrototype.options = $.widget.extend( {}, basePrototype.options );\n\t$.each( prototype, function( prop, value ) {\n\t\tif ( !$.isFunction( value ) ) {\n\t\t\tproxiedPrototype[ prop ] = value;\n\t\t\treturn;\n\t\t}\n\t\tproxiedPrototype[ prop ] = ( function() {\n\t\t\tfunction _super() {\n\t\t\t\treturn base.prototype[ prop ].apply( this, arguments );\n\t\t\t}\n\n\t\t\tfunction _superApply( args ) {\n\t\t\t\treturn base.prototype[ prop ].apply( this, args );\n\t\t\t}\n\n\t\t\treturn function() {\n\t\t\t\tvar __super = this._super;\n\t\t\t\tvar __superApply = this._superApply;\n\t\t\t\tvar returnValue;\n\n\t\t\t\tthis._super = _super;\n\t\t\t\tthis._superApply = _superApply;\n\n\t\t\t\treturnValue = value.apply( this, arguments );\n\n\t\t\t\tthis._super = __super;\n\t\t\t\tthis._superApply = __superApply;\n\n\t\t\t\treturn returnValue;\n\t\t\t};\n\t\t} )();\n\t} );\n\tconstructor.prototype = $.widget.extend( basePrototype, {\n\n\t\t// TODO: remove support for widgetEventPrefix\n\t\t// always use the name + a colon as the prefix, e.g., draggable:start\n\t\t// don't prefix for widgets that aren't DOM-based\n\t\twidgetEventPrefix: existingConstructor ? ( basePrototype.widgetEventPrefix || name ) : name\n\t}, proxiedPrototype, {\n\t\tconstructor: constructor,\n\t\tnamespace: namespace,\n\t\twidgetName: name,\n\t\twidgetFullName: fullName\n\t} );\n\n\t// If this widget is being redefined then we need to find all widgets that\n\t// are inheriting from it and redefine all of them so that they inherit from\n\t// the new version of this widget. We're essentially trying to replace one\n\t// level in the prototype chain.\n\tif ( existingConstructor ) {\n\t\t$.each( existingConstructor._childConstructors, function( i, child ) {\n\t\t\tvar childPrototype = child.prototype;\n\n\t\t\t// Redefine the child widget using the same prototype that was\n\t\t\t// originally used, but inherit from the new version of the base\n\t\t\t$.widget( childPrototype.namespace + \".\" + childPrototype.widgetName, constructor,\n\t\t\t\tchild._proto );\n\t\t} );\n\n\t\t// Remove the list of existing child constructors from the old constructor\n\t\t// so the old child constructors can be garbage collected\n\t\tdelete existingConstructor._childConstructors;\n\t} else {\n\t\tbase._childConstructors.push( constructor );\n\t}\n\n\t$.widget.bridge( name, constructor );\n\n\treturn constructor;\n};\n\n$.widget.extend = function( target ) {\n\tvar input = widgetSlice.call( arguments, 1 );\n\tvar inputIndex = 0;\n\tvar inputLength = input.length;\n\tvar key;\n\tvar value;\n\n\tfor ( ; inputIndex < inputLength; inputIndex++ ) {\n\t\tfor ( key in input[ inputIndex ] ) {\n\t\t\tvalue = input[ inputIndex ][ key ];\n\t\t\tif ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {\n\n\t\t\t\t// Clone objects\n\t\t\t\tif ( $.isPlainObject( value ) ) {\n\t\t\t\t\ttarget[ key ] = $.isPlainObject( target[ key ] ) ?\n\t\t\t\t\t\t$.widget.extend( {}, target[ key ], value ) :\n\n\t\t\t\t\t\t// Don't extend strings, arrays, etc. with objects\n\t\t\t\t\t\t$.widget.extend( {}, value );\n\n\t\t\t\t// Copy everything else by reference\n\t\t\t\t} else {\n\t\t\t\t\ttarget[ key ] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n};\n\n$.widget.bridge = function( name, object ) {\n\tvar fullName = object.prototype.widgetFullName || name;\n\t$.fn[ name ] = function( options ) {\n\t\tvar isMethodCall = typeof options === \"string\";\n\t\tvar args = widgetSlice.call( arguments, 1 );\n\t\tvar returnValue = this;\n\n\t\tif ( isMethodCall ) {\n\n\t\t\t// If this is an empty collection, we need to have the instance method\n\t\t\t// return undefined instead of the jQuery instance\n\t\t\tif ( !this.length && options === \"instance\" ) {\n\t\t\t\treturnValue = undefined;\n\t\t\t} else {\n\t\t\t\tthis.each( function() {\n\t\t\t\t\tvar methodValue;\n\t\t\t\t\tvar instance = $.data( this, fullName );\n\n\t\t\t\t\tif ( options === \"instance\" ) {\n\t\t\t\t\t\treturnValue = instance;\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !instance ) {\n\t\t\t\t\t\treturn $.error( \"cannot call methods on \" + name +\n\t\t\t\t\t\t\t\" prior to initialization; \" +\n\t\t\t\t\t\t\t\"attempted to call method '\" + options + \"'\" );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !$.isFunction( instance[ options ] ) || options.charAt( 0 ) === \"_\" ) {\n\t\t\t\t\t\treturn $.error( \"no such method '\" + options + \"' for \" + name +\n\t\t\t\t\t\t\t\" widget instance\" );\n\t\t\t\t\t}\n\n\t\t\t\t\tmethodValue = instance[ options ].apply( instance, args );\n\n\t\t\t\t\tif ( methodValue !== instance && methodValue !== undefined ) {\n\t\t\t\t\t\treturnValue = methodValue && methodValue.jquery ?\n\t\t\t\t\t\t\treturnValue.pushStack( methodValue.get() ) :\n\t\t\t\t\t\t\tmethodValue;\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// Allow multiple hashes to be passed on init\n\t\t\tif ( args.length ) {\n\t\t\t\toptions = $.widget.extend.apply( null, [ options ].concat( args ) );\n\t\t\t}\n\n\t\t\tthis.each( function() {\n\t\t\t\tvar instance = $.data( this, fullName );\n\t\t\t\tif ( instance ) {\n\t\t\t\t\tinstance.option( options || {} );\n\t\t\t\t\tif ( instance._init ) {\n\t\t\t\t\t\tinstance._init();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$.data( this, fullName, new object( options, this ) );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn returnValue;\n\t};\n};\n\n$.Widget = function( /* options, element */ ) {};\n$.Widget._childConstructors = [];\n\n$.Widget.prototype = {\n\twidgetName: \"widget\",\n\twidgetEventPrefix: \"\",\n\tdefaultElement: \"<div>\",\n\n\toptions: {\n\t\tclasses: {},\n\t\tdisabled: false,\n\n\t\t// Callbacks\n\t\tcreate: null\n\t},\n\n\t_createWidget: function( options, element ) {\n\t\telement = $( element || this.defaultElement || this )[ 0 ];\n\t\tthis.element = $( element );\n\t\tthis.uuid = widgetUuid++;\n\t\tthis.eventNamespace = \".\" + this.widgetName + this.uuid;\n\n\t\tthis.bindings = $();\n\t\tthis.hoverable = $();\n\t\tthis.focusable = $();\n\t\tthis.classesElementLookup = {};\n\n\t\tif ( element !== this ) {\n\t\t\t$.data( element, this.widgetFullName, this );\n\t\t\tthis._on( true, this.element, {\n\t\t\t\tremove: function( event ) {\n\t\t\t\t\tif ( event.target === element ) {\n\t\t\t\t\t\tthis.destroy();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t\tthis.document = $( element.style ?\n\n\t\t\t\t// Element within the document\n\t\t\t\telement.ownerDocument :\n\n\t\t\t\t// Element is window or document\n\t\t\t\telement.document || element );\n\t\t\tthis.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );\n\t\t}\n\n\t\tthis.options = $.widget.extend( {},\n\t\t\tthis.options,\n\t\t\tthis._getCreateOptions(),\n\t\t\toptions );\n\n\t\tthis._create();\n\n\t\tif ( this.options.disabled ) {\n\t\t\tthis._setOptionDisabled( this.options.disabled );\n\t\t}\n\n\t\tthis._trigger( \"create\", null, this._getCreateEventData() );\n\t\tthis._init();\n\t},\n\n\t_getCreateOptions: function() {\n\t\treturn {};\n\t},\n\n\t_getCreateEventData: $.noop,\n\n\t_create: $.noop,\n\n\t_init: $.noop,\n\n\tdestroy: function() {\n\t\tvar that = this;\n\n\t\tthis._destroy();\n\t\t$.each( this.classesElementLookup, function( key, value ) {\n\t\t\tthat._removeClass( value, key );\n\t\t} );\n\n\t\t// We can probably remove the unbind calls in 2.0\n\t\t// all event bindings should go through this._on()\n\t\tthis.element\n\t\t\t.off( this.eventNamespace )\n\t\t\t.removeData( this.widgetFullName );\n\t\tthis.widget()\n\t\t\t.off( this.eventNamespace )\n\t\t\t.removeAttr( \"aria-disabled\" );\n\n\t\t// Clean up events and states\n\t\tthis.bindings.off( this.eventNamespace );\n\t},\n\n\t_destroy: $.noop,\n\n\twidget: function() {\n\t\treturn this.element;\n\t},\n\n\toption: function( key, value ) {\n\t\tvar options = key;\n\t\tvar parts;\n\t\tvar curOption;\n\t\tvar i;\n\n\t\tif ( arguments.length === 0 ) {\n\n\t\t\t// Don't return a reference to the internal hash\n\t\t\treturn $.widget.extend( {}, this.options );\n\t\t}\n\n\t\tif ( typeof key === \"string\" ) {\n\n\t\t\t// Handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\n\t\t\toptions = {};\n\t\t\tparts = key.split( \".\" );\n\t\t\tkey = parts.shift();\n\t\t\tif ( parts.length ) {\n\t\t\t\tcurOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );\n\t\t\t\tfor ( i = 0; i < parts.length - 1; i++ ) {\n\t\t\t\t\tcurOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};\n\t\t\t\t\tcurOption = curOption[ parts[ i ] ];\n\t\t\t\t}\n\t\t\t\tkey = parts.pop();\n\t\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\t\treturn curOption[ key ] === undefined ? null : curOption[ key ];\n\t\t\t\t}\n\t\t\t\tcurOption[ key ] = value;\n\t\t\t} else {\n\t\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\t\treturn this.options[ key ] === undefined ? null : this.options[ key ];\n\t\t\t\t}\n\t\t\t\toptions[ key ] = value;\n\t\t\t}\n\t\t}\n\n\t\tthis._setOptions( options );\n\n\t\treturn this;\n\t},\n\n\t_setOptions: function( options ) {\n\t\tvar key;\n\n\t\tfor ( key in options ) {\n\t\t\tthis._setOption( key, options[ key ] );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t_setOption: function( key, value ) {\n\t\tif ( key === \"classes\" ) {\n\t\t\tthis._setOptionClasses( value );\n\t\t}\n\n\t\tthis.options[ key ] = value;\n\n\t\tif ( key === \"disabled\" ) {\n\t\t\tthis._setOptionDisabled( value );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t_setOptionClasses: function( value ) {\n\t\tvar classKey, elements, currentElements;\n\n\t\tfor ( classKey in value ) {\n\t\t\tcurrentElements = this.classesElementLookup[ classKey ];\n\t\t\tif ( value[ classKey ] === this.options.classes[ classKey ] ||\n\t\t\t\t\t!currentElements ||\n\t\t\t\t\t!currentElements.length ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// We are doing this to create a new jQuery object because the _removeClass() call\n\t\t\t// on the next line is going to destroy the reference to the current elements being\n\t\t\t// tracked. We need to save a copy of this collection so that we can add the new classes\n\t\t\t// below.\n\t\t\telements = $( currentElements.get() );\n\t\t\tthis._removeClass( currentElements, classKey );\n\n\t\t\t// We don't use _addClass() here, because that uses this.options.classes\n\t\t\t// for generating the string of classes. We want to use the value passed in from\n\t\t\t// _setOption(), this is the new value of the classes option which was passed to\n\t\t\t// _setOption(). We pass this value directly to _classes().\n\t\t\telements.addClass( this._classes( {\n\t\t\t\telement: elements,\n\t\t\t\tkeys: classKey,\n\t\t\t\tclasses: value,\n\t\t\t\tadd: true\n\t\t\t} ) );\n\t\t}\n\t},\n\n\t_setOptionDisabled: function( value ) {\n\t\tthis._toggleClass( this.widget(), this.widgetFullName + \"-disabled\", null, !!value );\n\n\t\t// If the widget is becoming disabled, then nothing is interactive\n\t\tif ( value ) {\n\t\t\tthis._removeClass( this.hoverable, null, \"ui-state-hover\" );\n\t\t\tthis._removeClass( this.focusable, null, \"ui-state-focus\" );\n\t\t}\n\t},\n\n\tenable: function() {\n\t\treturn this._setOptions( { disabled: false } );\n\t},\n\n\tdisable: function() {\n\t\treturn this._setOptions( { disabled: true } );\n\t},\n\n\t_classes: function( options ) {\n\t\tvar full = [];\n\t\tvar that = this;\n\n\t\toptions = $.extend( {\n\t\t\telement: this.element,\n\t\t\tclasses: this.options.classes || {}\n\t\t}, options );\n\n\t\tfunction processClassString( classes, checkOption ) {\n\t\t\tvar current, i;\n\t\t\tfor ( i = 0; i < classes.length; i++ ) {\n\t\t\t\tcurrent = that.classesElementLookup[ classes[ i ] ] || $();\n\t\t\t\tif ( options.add ) {\n\t\t\t\t\tcurrent = $( $.unique( current.get().concat( options.element.get() ) ) );\n\t\t\t\t} else {\n\t\t\t\t\tcurrent = $( current.not( options.element ).get() );\n\t\t\t\t}\n\t\t\t\tthat.classesElementLookup[ classes[ i ] ] = current;\n\t\t\t\tfull.push( classes[ i ] );\n\t\t\t\tif ( checkOption && options.classes[ classes[ i ] ] ) {\n\t\t\t\t\tfull.push( options.classes[ classes[ i ] ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._on( options.element, {\n\t\t\t\"remove\": \"_untrackClassesElement\"\n\t\t} );\n\n\t\tif ( options.keys ) {\n\t\t\tprocessClassString( options.keys.match( /\\S+/g ) || [], true );\n\t\t}\n\t\tif ( options.extra ) {\n\t\t\tprocessClassString( options.extra.match( /\\S+/g ) || [] );\n\t\t}\n\n\t\treturn full.join( \" \" );\n\t},\n\n\t_untrackClassesElement: function( event ) {\n\t\tvar that = this;\n\t\t$.each( that.classesElementLookup, function( key, value ) {\n\t\t\tif ( $.inArray( event.target, value ) !== -1 ) {\n\t\t\t\tthat.classesElementLookup[ key ] = $( value.not( event.target ).get() );\n\t\t\t}\n\t\t} );\n\t},\n\n\t_removeClass: function( element, keys, extra ) {\n\t\treturn this._toggleClass( element, keys, extra, false );\n\t},\n\n\t_addClass: function( element, keys, extra ) {\n\t\treturn this._toggleClass( element, keys, extra, true );\n\t},\n\n\t_toggleClass: function( element, keys, extra, add ) {\n\t\tadd = ( typeof add === \"boolean\" ) ? add : extra;\n\t\tvar shift = ( typeof element === \"string\" || element === null ),\n\t\t\toptions = {\n\t\t\t\textra: shift ? keys : extra,\n\t\t\t\tkeys: shift ? element : keys,\n\t\t\t\telement: shift ? this.element : element,\n\t\t\t\tadd: add\n\t\t\t};\n\t\toptions.element.toggleClass( this._classes( options ), add );\n\t\treturn this;\n\t},\n\n\t_on: function( suppressDisabledCheck, element, handlers ) {\n\t\tvar delegateElement;\n\t\tvar instance = this;\n\n\t\t// No suppressDisabledCheck flag, shuffle arguments\n\t\tif ( typeof suppressDisabledCheck !== \"boolean\" ) {\n\t\t\thandlers = element;\n\t\t\telement = suppressDisabledCheck;\n\t\t\tsuppressDisabledCheck = false;\n\t\t}\n\n\t\t// No element argument, shuffle and use this.element\n\t\tif ( !handlers ) {\n\t\t\thandlers = element;\n\t\t\telement = this.element;\n\t\t\tdelegateElement = this.widget();\n\t\t} else {\n\t\t\telement = delegateElement = $( element );\n\t\t\tthis.bindings = this.bindings.add( element );\n\t\t}\n\n\t\t$.each( handlers, function( event, handler ) {\n\t\t\tfunction handlerProxy() {\n\n\t\t\t\t// Allow widgets to customize the disabled handling\n\t\t\t\t// - disabled as an array instead of boolean\n\t\t\t\t// - disabled class as method for disabling individual parts\n\t\t\t\tif ( !suppressDisabledCheck &&\n\t\t\t\t\t\t( instance.options.disabled === true ||\n\t\t\t\t\t\t$( this ).hasClass( \"ui-state-disabled\" ) ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\n\t\t\t\t\t.apply( instance, arguments );\n\t\t\t}\n\n\t\t\t// Copy the guid so direct unbinding works\n\t\t\tif ( typeof handler !== \"string\" ) {\n\t\t\t\thandlerProxy.guid = handler.guid =\n\t\t\t\t\thandler.guid || handlerProxy.guid || $.guid++;\n\t\t\t}\n\n\t\t\tvar match = event.match( /^([\\w:-]*)\\s*(.*)$/ );\n\t\t\tvar eventName = match[ 1 ] + instance.eventNamespace;\n\t\t\tvar selector = match[ 2 ];\n\n\t\t\tif ( selector ) {\n\t\t\t\tdelegateElement.on( eventName, selector, handlerProxy );\n\t\t\t} else {\n\t\t\t\telement.on( eventName, handlerProxy );\n\t\t\t}\n\t\t} );\n\t},\n\n\t_off: function( element, eventName ) {\n\t\teventName = ( eventName || \"\" ).split( \" \" ).join( this.eventNamespace + \" \" ) +\n\t\t\tthis.eventNamespace;\n\t\telement.off( eventName ).off( eventName );\n\n\t\t// Clear the stack to avoid memory leaks (#10056)\n\t\tthis.bindings = $( this.bindings.not( element ).get() );\n\t\tthis.focusable = $( this.focusable.not( element ).get() );\n\t\tthis.hoverable = $( this.hoverable.not( element ).get() );\n\t},\n\n\t_delay: function( handler, delay ) {\n\t\tfunction handlerProxy() {\n\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\n\t\t\t\t.apply( instance, arguments );\n\t\t}\n\t\tvar instance = this;\n\t\treturn setTimeout( handlerProxy, delay || 0 );\n\t},\n\n\t_hoverable: function( element ) {\n\t\tthis.hoverable = this.hoverable.add( element );\n\t\tthis._on( element, {\n\t\t\tmouseenter: function( event ) {\n\t\t\t\tthis._addClass( $( event.currentTarget ), null, \"ui-state-hover\" );\n\t\t\t},\n\t\t\tmouseleave: function( event ) {\n\t\t\t\tthis._removeClass( $( event.currentTarget ), null, \"ui-state-hover\" );\n\t\t\t}\n\t\t} );\n\t},\n\n\t_focusable: function( element ) {\n\t\tthis.focusable = this.focusable.add( element );\n\t\tthis._on( element, {\n\t\t\tfocusin: function( event ) {\n\t\t\t\tthis._addClass( $( event.currentTarget ), null, \"ui-state-focus\" );\n\t\t\t},\n\t\t\tfocusout: function( event ) {\n\t\t\t\tthis._removeClass( $( event.currentTarget ), null, \"ui-state-focus\" );\n\t\t\t}\n\t\t} );\n\t},\n\n\t_trigger: function( type, event, data ) {\n\t\tvar prop, orig;\n\t\tvar callback = this.options[ type ];\n\n\t\tdata = data || {};\n\t\tevent = $.Event( event );\n\t\tevent.type = ( type === this.widgetEventPrefix ?\n\t\t\ttype :\n\t\t\tthis.widgetEventPrefix + type ).toLowerCase();\n\n\t\t// The original event may come from any element\n\t\t// so we need to reset the target on the new event\n\t\tevent.target = this.element[ 0 ];\n\n\t\t// Copy original event properties over to the new event\n\t\torig = event.originalEvent;\n\t\tif ( orig ) {\n\t\t\tfor ( prop in orig ) {\n\t\t\t\tif ( !( prop in event ) ) {\n\t\t\t\t\tevent[ prop ] = orig[ prop ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.element.trigger( event, data );\n\t\treturn !( $.isFunction( callback ) &&\n\t\t\tcallback.apply( this.element[ 0 ], [ event ].concat( data ) ) === false ||\n\t\t\tevent.isDefaultPrevented() );\n\t}\n};\n\n$.each( { show: \"fadeIn\", hide: \"fadeOut\" }, function( method, defaultEffect ) {\n\t$.Widget.prototype[ \"_\" + method ] = function( element, options, callback ) {\n\t\tif ( typeof options === \"string\" ) {\n\t\t\toptions = { effect: options };\n\t\t}\n\n\t\tvar hasOptions;\n\t\tvar effectName = !options ?\n\t\t\tmethod :\n\t\t\toptions === true || typeof options === \"number\" ?\n\t\t\t\tdefaultEffect :\n\t\t\t\toptions.effect || defaultEffect;\n\n\t\toptions = options || {};\n\t\tif ( typeof options === \"number\" ) {\n\t\t\toptions = { duration: options };\n\t\t}\n\n\t\thasOptions = !$.isEmptyObject( options );\n\t\toptions.complete = callback;\n\n\t\tif ( options.delay ) {\n\t\t\telement.delay( options.delay );\n\t\t}\n\n\t\tif ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {\n\t\t\telement[ method ]( options );\n\t\t} else if ( effectName !== method && element[ effectName ] ) {\n\t\t\telement[ effectName ]( options.duration, options.easing, callback );\n\t\t} else {\n\t\t\telement.queue( function( next ) {\n\t\t\t\t$( this )[ method ]();\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback.call( element[ 0 ] );\n\t\t\t\t}\n\t\t\t\tnext();\n\t\t\t} );\n\t\t}\n\t};\n} );\n\nreturn $.widget;\n\n} ) );\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jquery-ui/ui/widget.js\n// module id = 137\n// module chunks = 0","( function( factory ) {\n\tif ( typeof define === \"function\" && define.amd ) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine( [ \"jquery\" ], factory );\n\t} else {\n\n\t\t// Browser globals\n\t\tfactory( jQuery );\n\t}\n} ( function( $ ) {\n\n$.ui = $.ui || {};\n\nreturn $.ui.version = \"1.12.1\";\n\n} ) );\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jquery-ui/ui/version.js\n// module id = 138\n// module chunks = 0","(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define(factory);\r\n    } else if (typeof exports === 'object') {\r\n        // Node. Does not work with strict CommonJS, but\r\n        // only CommonJS-like enviroments that support module.exports,\r\n        // like Node.\r\n        module.exports = factory();\r\n    } else {\r\n        // Browser globals (root is window)\r\n        root.Sparkline = factory();\r\n  }\r\n}(this, function () {\r\n\r\n\r\n    function extend(specific, general){\r\n        var obj = {};\r\n        for(var key in general){\r\n            obj[key] = key in specific ? specific[key] : general[key];\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    function Sparkline(element, options){\r\n        this.element = element;\r\n        this.options = extend(options || {}, Sparkline.options);\r\n\r\n        init: {\r\n            this.element.innerHTML = \"<canvas></canvas>\";\r\n            this.canvas = this.element.firstChild;\r\n            this.context = this.canvas.getContext(\"2d\");\r\n            this.ratio = window.devicePixelRatio || 1;\r\n            \r\n            if(this.options.tooltip){\r\n                this.canvas.style.position = \"relative\";\r\n                this.canvas.onmousemove = showTooltip.bind(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    Sparkline.options = {\r\n        width: 100,\r\n        lineColor: \"black\",\r\n        lineWidth: 1,\r\n        startColor: \"transparent\",\r\n        endColor: \"red\",\r\n        maxColor: \"transparent\",\r\n        minColor: \"transparent\",\r\n        minValue: null,\r\n        maxValue: null,\r\n        dotRadius: 2.5,\r\n        tooltip: null\r\n    };\r\n\r\n    Sparkline.init = function(element, options){\r\n        return new Sparkline(element, options);\r\n    };\r\n\r\n    Sparkline.draw = function(element, points, options){\r\n        var sparkline = new Sparkline(element, options);\r\n        sparkline.draw(points);\r\n        return sparkline;\r\n    }\r\n\r\n    function getY(minValue, maxValue, offsetY, height, index){\r\n        var range = maxValue - minValue;\r\n        if(range == 0){\r\n          return offsetY + height/2;\r\n        }else{\r\n          return (offsetY + height) - ((this[index] - minValue) / range)*height;\r\n        }\r\n    }\r\n\r\n    function drawDot(radius, color, x, y){\r\n        this.beginPath();\r\n        this.fillStyle = color;\r\n        this.arc(x, y, radius, 0, Math.PI*2, false);\r\n        this.fill();\r\n    }\r\n  \r\n    function showTooltip(e){\r\n        var x = e.offsetX || e.layerX || 0;\r\n        var delta = ((this.options.width - this.options.dotRadius*2) / (this.points.length - 1));\r\n        var index = minmax(0, Math.round((x - this.options.dotRadius)/delta), this.points.length - 1);\r\n        \r\n        this.canvas.title = this.options.tooltip(this.points[index], index, this.points);\r\n    }\r\n\r\n    Sparkline.prototype.draw = function(points){\r\n\r\n        points = points || [];\r\n        this.points = points;\r\n        \r\n        this.canvas.width = this.options.width * this.ratio;\r\n        this.canvas.height = this.element.offsetHeight * this.ratio;\r\n        this.canvas.style.width = this.options.width + 'px';\r\n        this.canvas.style.height = this.element.offsetHeight + 'px';\r\n\r\n        var offsetX = this.options.dotRadius*this.ratio;\r\n        var offsetY = this.options.dotRadius*this.ratio;\r\n        var width = this.canvas.width - offsetX*2;\r\n        var height = this.canvas.height - offsetY*2;\r\n\r\n        var minValue = this.options.minValue || Math.min.apply(Math, points);\r\n        var maxValue = this.options.maxValue || Math.max.apply(Math, points);\r\n        var minX = offsetX;\r\n        var maxX = offsetX;\r\n\r\n        var x = offsetX;\r\n        var y = getY.bind(points, minValue, maxValue, offsetY, height);\r\n        var delta = width / (points.length - 1);\r\n\r\n        var dot = drawDot.bind(this.context, this.options.dotRadius*this.ratio);\r\n\r\n\r\n        this.context.beginPath();\r\n        this.context.strokeStyle = this.options.lineColor;\r\n        this.context.lineWidth = this.options.lineWidth*this.ratio;\r\n\r\n        this.context.moveTo(x, y(0));\r\n        for(var i=1; i<points.length; i++){\r\n            x += delta;\r\n            this.context.lineTo(x, y(i));\r\n\r\n            minX = points[i] == minValue ? x : minX;\r\n            maxX = points[i] == maxValue ? x : maxX;\r\n        }\r\n        this.context.stroke();\r\n\r\n        dot(this.options.startColor, offsetX + (points.length == 1 ? width/2 : 0), y(0));\r\n        dot(this.options.endColor, offsetX + (points.length == 1 ? width/2 : width), y(i - 1));\r\n        dot(this.options.minColor, minX + (points.length == 1 ? width/2 : 0), y(points.indexOf(minValue)));\r\n        dot(this.options.maxColor, maxX + (points.length == 1 ? width/2 : 0), y(points.indexOf(maxValue)));\r\n    }\r\n    \r\n    function minmax(a, b, c){\r\n        return Math.max(a, Math.min(b, c));\r\n    }\r\n\r\n    return Sparkline;\r\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/sparklines/source/sparkline.js\n// module id = 139\n// module chunks = 0","/*\r\n * Superclick v1.0.0 - jQuery menu widget\r\n * Copyright (c) 2013 Joel Birch\r\n *\r\n * Dual licensed under the MIT and GPL licenses:\r\n * \thttp://www.opensource.org/licenses/mit-license.php\r\n * \thttp://www.gnu.org/licenses/gpl.html\r\n */\r\n\r\n;(function($) {\r\n\r\n\tvar methods = (function(){\r\n\t\t// private properties and methods go here\r\n\t\tvar c = {\r\n\t\t\t\tbcClass: 'sf-breadcrumb',\r\n\t\t\t\tmenuClass: 'sf-js-enabled',\r\n\t\t\t\tanchorClass: 'sf-with-ul',\r\n\t\t\t\tmenuArrowClass: 'sf-arrows'\r\n\t\t\t},\r\n\t\t\touterClick = (function() {\r\n\t\t\t\t$(window).load(function() {\r\n\t\t\t\t\t$('body').children().on('click.superclick', function() {\r\n\t\t\t\t\t\tvar $allMenus = $('.sf-js-enabled');\r\n\t\t\t\t\t\t$allMenus.superclick('reset');\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t})(),\r\n\t\t\ttoggleMenuClasses = function($menu, o) {\r\n\t\t\t\tvar classes = c.menuClass;\r\n\t\t\t\tif (o.cssArrows) {\r\n\t\t\t\t\tclasses += ' ' + c.menuArrowClass;\r\n\t\t\t\t}\r\n\t\t\t\t$menu.toggleClass(classes);\r\n\t\t\t},\r\n\t\t\tsetPathToCurrent = function($menu, o) {\r\n\t\t\t\treturn $menu.find('li.' + o.pathClass).slice(0, o.pathLevels)\r\n\t\t\t\t\t.addClass(o.activeClass + ' ' + c.bcClass)\r\n\t\t\t\t\t\t.filter(function() {\r\n\t\t\t\t\t\t\treturn ($(this).children('.sidebar-submenu').hide().show().length);\r\n\t\t\t\t\t\t}).removeClass(o.pathClass);\r\n\t\t\t},\r\n\t\t\ttoggleAnchorClass = function($li) {\r\n\t\t\t\t$li.children('a').toggleClass(c.anchorClass);\r\n\t\t\t},\r\n\t\t\ttoggleTouchAction = function($menu) {\r\n\t\t\t\tvar touchAction = $menu.css('ms-touch-action');\r\n\t\t\t\ttouchAction = (touchAction === 'pan-y') ? 'auto' : 'pan-y';\r\n\t\t\t\t$menu.css('ms-touch-action', touchAction);\r\n\t\t\t},\r\n\t\t\tclickHandler = function(e) {\r\n\t\t\t\tvar $this = $(this),\r\n\t\t\t\t\t$ul = $this.siblings('.sidebar-submenu'),\r\n\t\t\t\t\tfunc;\r\n\r\n\r\n\t\t\t\tif ($ul.length) {\r\n\t\t\t\t\tfunc = ($ul.is(':hidden')) ? over : out;\r\n\t\t\t\t\t$.proxy(func, $this.parent('li'))();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\t\t\tover = function() {\r\n\t\t\t\tvar $this = $(this),\r\n\t\t\t\t\to = getOptions($this);\r\n\t\t\t\t$this.siblings().superclick('hide').end().superclick('show');\r\n\t\t\t},\r\n\t\t\tout = function() {\r\n\t\t\t\tvar $this = $(this),\r\n\t\t\t\t\to = getOptions($this);\r\n\t\t\t\t$.proxy(close, $this, o)();\r\n\t\t\t},\r\n\t\t\tclose = function(o) {\r\n\t\t\t\to.retainPath = ( $.inArray(this[0], o.$path) > -1);\r\n\t\t\t\tthis.superclick('hide');\r\n\r\n\t\t\t\tif (!this.parents('.' + o.activeClass).length) {\r\n\t\t\t\t\to.onIdle.call(getMenu(this));\r\n\t\t\t\t\tif (o.$path.length) {\r\n\t\t\t\t\t\t$.proxy(over, o.$path)();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tgetMenu = function($el) {\r\n\t\t\t\treturn $el.closest('.' + c.menuClass);\r\n\t\t\t},\r\n\t\t\tgetOptions = function($el) {\r\n\t\t\t\treturn getMenu($el).data('sf-options');\r\n\t\t\t};\r\n\r\n\t\treturn {\r\n\t\t\t// public methods\r\n\t\t\thide: function(instant) {\r\n\t\t\t\tif (this.length) {\r\n\t\t\t\t\tvar $this = this,\r\n\t\t\t\t\t\to = getOptions($this);\r\n\t\t\t\t\t\tif (!o) {\r\n\t\t\t\t\t\t\treturn this;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tvar not = (o.retainPath === true) ? o.$path : '',\r\n\t\t\t\t\t\t$ul = $this.find('li.' + o.activeClass).add(this).not(not).removeClass(o.activeClass).children('.sidebar-submenu'),\r\n\t\t\t\t\t\tspeed = o.speedOut;\r\n\r\n\t\t\t\t\tif (instant) {\r\n\t\t\t\t\t\t$ul.show();\r\n\t\t\t\t\t\tspeed = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\to.retainPath = false;\r\n\t\t\t\t\to.onBeforeHide.call($ul);\r\n\t\t\t\t\t$ul.stop(true, true).animate(o.animationOut, speed, function() {\r\n\t\t\t\t\t\tvar $this = $(this);\r\n\t\t\t\t\t\to.onHide.call($this);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\t\t\tshow: function() {\r\n\t\t\t\tvar o = getOptions(this);\r\n\t\t\t\tif (!o) {\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t}\r\n\t\t\t\tvar $this = this.addClass(o.activeClass),\r\n\t\t\t\t\t$ul = $this.children('.sidebar-submenu');\r\n\r\n\t\t\t\to.onBeforeShow.call($ul);\r\n\t\t\t\t$ul.stop(true, true).animate(o.animation, o.speed, function() {\r\n\t\t\t\t\to.onShow.call($ul);\r\n\t\t\t\t});\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\t\t\tdestroy: function() {\r\n\t\t\t\treturn this.each(function(){\r\n\t\t\t\t\tvar $this = $(this),\r\n\t\t\t\t\t\to = $this.data('sf-options'),\r\n\t\t\t\t\t\t$liHasUl = $this.find('li:has(ul)');\r\n\t\t\t\t\tif (!o) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttoggleMenuClasses($this, o);\r\n\t\t\t\t\ttoggleAnchorClass($liHasUl);\r\n\t\t\t\t\ttoggleTouchAction($this);\r\n\t\t\t\t\t// remove event handlers\r\n\t\t\t\t\t$this.off('.superclick');\r\n\t\t\t\t\t// clear animation's inline display style\r\n\t\t\t\t\t$liHasUl.children('.sidebar-submenu').attr('style', function(i, style){\r\n\t\t\t\t\t\treturn style.replace(/display[^;]+;?/g, '');\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// reset 'current' path classes\r\n\t\t\t\t\to.$path.removeClass(o.activeClass + ' ' + c.bcClass).addClass(o.pathClass);\r\n\t\t\t\t\t$this.find('.' + o.activeClass).removeClass(o.activeClass);\r\n\t\t\t\t\to.onDestroy.call($this);\r\n\t\t\t\t\t$this.removeData('sf-options');\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\treset: function() {\r\n\t\t\t\treturn this.each(function(){\r\n\t\t\t\t\tvar $menu = $(this),\r\n\t\t\t\t\t\to = getOptions($menu),\r\n\t\t\t\t\t\t$openLis = $( $menu.find('.' + o.activeClass).toArray().reverse() );\r\n\t\t\t\t\t$openLis.children('a').trigger('click');\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tinit: function(op){\r\n\t\t\t\treturn this.each(function() {\r\n\t\t\t\t\tvar $this = $(this);\r\n\t\t\t\t\tif ($this.data('sf-options')) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar o = $.extend({}, $.fn.superclick.defaults, op),\r\n\t\t\t\t\t\t$liHasUl = $this.find('li:has(ul)');\r\n\t\t\t\t\to.$path = setPathToCurrent($this, o);\r\n\r\n\t\t\t\t\t$this.data('sf-options', o);\r\n\r\n\t\t\t\t\ttoggleMenuClasses($this, o);\r\n\t\t\t\t\ttoggleAnchorClass($liHasUl);\r\n\t\t\t\t\ttoggleTouchAction($this);\r\n\t\t\t\t\t$this.on('click.superclick', 'a', clickHandler);\r\n\r\n\t\t\t\t\t$liHasUl.not('.' + c.bcClass).superclick('hide',true);\r\n\r\n\t\t\t\t\to.onInit.call(this);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t})();\r\n\r\n\t$.fn.superclick = function(method, args) {\r\n\t\tif (methods[method]) {\r\n\t\t\treturn methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\r\n\t\t}\r\n\t\telse if (typeof method === 'object' || ! method) {\r\n\t\t\treturn methods.init.apply(this, arguments);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn $.error('Method ' +  method + ' does not exist on jQuery.fn.superclick');\r\n\t\t}\r\n\t};\r\n\r\n\t$.fn.superclick.defaults = {\r\n\t\tactiveClass: 'sfHover', // keep 'hover' in classname for compatibility reasons\r\n\t\tpathClass: 'overrideThisToUse',\r\n\t\tpathLevels: 1,\r\n\t\tanimation: {opacity:'show'},\r\n\t\tanimationOut: {opacity:'hide'},\r\n\t\tspeed: 'normal',\r\n\t\tspeedOut: 'fast',\r\n\t\tcssArrows: true,\r\n\t\tonInit: $.noop,\r\n\t\tonBeforeShow: $.noop,\r\n\t\tonShow: $.noop,\r\n\t\tonBeforeHide: $.noop,\r\n\t\tonHide: $.noop,\r\n\t\tonIdle: $.noop,\r\n\t\tonDestroy: $.noop\r\n\t};\r\n\r\n})(jQuery);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./resources/assets/node_modules/superclick/superclick.js\n// module id = 142\n// module chunks = 0","/* Progress bars */\r\n\r\nfunction progress(percent, element) {\r\n    var progressBarWidth = percent * element.width() / 100;\r\n\r\n    element.find('.progressbar-value').animate({ width: progressBarWidth }, 1200);\r\n}\r\n\r\n$(document).on('ready', function() {\r\n\r\n    $('.progressbar').each(function() {\r\n        var bar = $(this);\r\n        var max = $(this).attr('data-value');\r\n\r\n        progress(max, bar);\r\n    });\r\n\r\n});\r\n\r\n$(function(){\r\n\r\n    $('#header-right, .updateEasyPieChart, .complete-user-profile, #progress-dropdown, .progress-box').hover(function () {\r\n\r\n        $('.progressbar').each(function() {\r\n            var bar = $(this);\r\n            var max = $(this).attr('data-value');\r\n\r\n            progress(max, bar);\r\n        });\r\n\r\n    });\r\n\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./resources/assets/node_modules/progressbar/progressbar.js\n// module id = 143\n// module chunks = 0","(function( $ ) {\r\n    $.fn.simpleCheckbox = function(options) {\r\n        var defaults = {\r\n            newElementClass: 'switch-toggle',\r\n            activeElementClass: 'switch-on'\r\n        };\r\n        var options = $.extend(defaults, options);\r\n        this.each(function() {\r\n            //Assign the current checkbox to obj\r\n            var obj = $(this);\r\n            //Create new span element to be styled\r\n            var newObj = $('<div/>', {\r\n                'id': '#' + obj.attr('id'),\r\n                'class': options.newElementClass,\r\n                'style': 'display: block;'\r\n            }).insertAfter(this);\r\n            //Make sure pre-checked boxes are rendered as checked\r\n            if(obj.is(':checked')) {\r\n                newObj.addClass(options.activeElementClass);\r\n            }\r\n            obj.hide(); //Hide original checkbox\r\n            //Labels can be painful, let's fix that\r\n            if($('[for=' + obj.attr('id') + ']').length) {\r\n\r\n                var label = $('[for=' + obj.attr('id') + ']');\r\n                label.click(function() {\r\n                    newObj.trigger('click'); //Force the label to fire our element\r\n                    return false;\r\n                });\r\n            }\r\n            //Attach a click handler\r\n            newObj.click(function() {\r\n                //Assign current clicked object\r\n                var obj = $(this);\r\n                //Check the current state of the checkbox\r\n                if(obj.hasClass(options.activeElementClass)) {\r\n                    obj.removeClass(options.activeElementClass);\r\n                    $(obj.attr('id')).attr('checked',false);\r\n                } else {\r\n                    obj.addClass(options.activeElementClass);\r\n                    $(obj.attr('id')).attr('checked',true);\r\n                }\r\n                //Kill the click function\r\n                return false;\r\n            });\r\n        });\r\n    };\r\n})(jQuery);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./resources/assets/node_modules/input-switch/inputswitch-alt.js\n// module id = 144\n// module chunks = 0","// -----------------------------------\r\n// Slidebars\r\n// Development version, do not use this in your site, use the latest in the distribution folder.\r\n// http://plugins.adchsm.me/slidebars/\r\n//\r\n// Written by Adam Smith\r\n// http://www.adchsm.me/\r\n//\r\n// Released under MIT License\r\n// http://plugins.adchsm.me/slidebars/license.txt\r\n//\r\n// ---------------------\r\n// Index of Slidebars.js\r\n//\r\n// 001 - Default Settings\r\n// 002 - Feature Detection\r\n// 003 - User Agents\r\n// 004 - Setup\r\n// 005 - Animation\r\n// 006 - Operations\r\n// 007 - API\r\n// 008 - User Input\r\n\r\n;(function($) {\r\n\r\n    $.slidebars = function(options) {\r\n\r\n        // ----------------------\r\n        // 001 - Default Settings\r\n\r\n        var settings = $.extend({\r\n            siteClose: true, // true or false - Enable closing of Slidebars by clicking on #sb-site.\r\n            scrollLock: false, // true or false - Prevent scrolling of site when a Slidebar is open.\r\n            disableOver: false, // integer or false - Hide Slidebars over a specific width.\r\n            hideControlClasses: false // true or false - Hide controls at same width as disableOver.\r\n        }, options);\r\n\r\n        // -----------------------\r\n        // 002 - Feature Detection\r\n\r\n        var test = document.createElement('div').style, // Create element to test on.\r\n            supportTransition = false, // Variable for testing transitions.\r\n            supportTransform = false; // variable for testing transforms.\r\n\r\n        // Test for CSS Transitions\r\n        if (test.MozTransition === '' || test.WebkitTransition === '' || test.OTransition === '' || test.transition === '') supportTransition = true;\r\n\r\n        // Test for CSS Transforms\r\n        if (test.MozTransform === '' || test.WebkitTransform === '' || test.OTransform === '' || test.transform === '') supportTransform = true;\r\n\r\n        // -----------------\r\n        // 003 - User Agents\r\n\r\n        var ua = navigator.userAgent, // Get user agent string.\r\n            android = false, // Variable for storing android version.\r\n            iOS = false; // Variable for storing iOS version.\r\n\r\n        if (/Android/.test(ua)) { // Detect Android in user agent string.\r\n            android = ua.substr(ua.indexOf('Android')+8, 3); // Set version of Android.\r\n        } else if (/(iPhone|iPod|iPad)/.test(ua)) { // Detect iOS in user agent string.\r\n            iOS = ua.substr(ua.indexOf('OS ')+3, 3).replace('_', '.'); // Set version of iOS.\r\n        }\r\n\r\n        if (android && android < 3 || iOS && iOS < 5) $('html').addClass('sb-static'); // Add helper class for older versions of Android & iOS.\r\n\r\n        // -----------\r\n        // 004 - Setup\r\n\r\n        // Site container\r\n        var $site = $('#sb-site, .sb-site-container'); // Cache the selector.\r\n\r\n        // Left Slidebar\r\n        if ($('.sb-left').length) { // Check if the left Slidebar exists.\r\n            var $left = $('.sb-left'), // Cache the selector.\r\n                leftActive = false; // Used to check whether the left Slidebar is open or closed.\r\n        }\r\n\r\n        // Right Slidebar\r\n        if ($('.sb-right').length) { // Check if the right Slidebar exists.\r\n            var $right = $('.sb-right'), // Cache the selector.\r\n                rightActive = false; // Used to check whether the right Slidebar is open or closed.\r\n        }\r\n\r\n        var init = false, // Initialisation variable.\r\n            windowWidth = $(window).width(), // Get width of window.\r\n            $controls = $('.sb-toggle-left, .sb-toggle-right, .sb-open-left, .sb-open-right, .sb-close'), // Cache the control classes.\r\n            $slide = $('.sb-slide'); // Cache users elements to animate.\r\n\r\n        // Initailise Slidebars\r\n        function initialise() {\r\n            if (!settings.disableOver || (typeof settings.disableOver === 'number' && settings.disableOver >= windowWidth)) { // False or larger than window size.\r\n                init = true; // true enabled Slidebars to open.\r\n                $('html').addClass('sb-init'); // Add helper class.\r\n                if (settings.hideControlClasses) $controls.removeClass('sb-hide'); // Remove class just incase Slidebars was originally disabled.\r\n                css(); // Set required inline styles.\r\n            } else if (typeof settings.disableOver === 'number' && settings.disableOver < windowWidth) { // Less than window size.\r\n                init = false; // false stop Slidebars from opening.\r\n                $('html').removeClass('sb-init'); // Remove helper class.\r\n                if (settings.hideControlClasses) $controls.addClass('sb-hide'); // Hide controls\r\n                $site.css('minHeight', ''); // Remove minimum height.\r\n                if (leftActive || rightActive) close(); // Close Slidebars if open.\r\n            }\r\n        }\r\n        initialise();\r\n\r\n        // Inline CSS\r\n        function css() {\r\n            // Set minimum height.\r\n            $site.css('minHeight', ''); // Reset minimum height.\r\n            $site.css('minHeight', $('html').height() + 'px'); // Set minimum height of the site to the minimum height of the html.\r\n\r\n            // Custom Slidebar widths.\r\n            if ($left && $left.hasClass('sb-width-custom')) $left.css('width', $left.attr('data-sb-width')); // Set user custom width.\r\n            if ($right && $right.hasClass('sb-width-custom')) $right.css('width', $right.attr('data-sb-width')); // Set user custom width.\r\n\r\n            // Set off-canvas margins for Slidebars with push and overlay animations.\r\n            if ($left && ($left.hasClass('sb-style-push') || $left.hasClass('sb-style-overlay'))) $left.css('marginLeft', '-' + $left.css('width'));\r\n            if ($right && ($right.hasClass('sb-style-push') || $right.hasClass('sb-style-overlay'))) $right.css('marginRight', '-' + $right.css('width'));\r\n\r\n            // Site scroll locking.\r\n            if (settings.scrollLock) $('html').addClass('sb-scroll-lock');\r\n        }\r\n\r\n        // Resize Functions\r\n        $(window).resize(function() {\r\n            var resizedWindowWidth = $(window).width(); // Get resized window width.\r\n            if (windowWidth !== resizedWindowWidth) { // Slidebars is running and window was actually resized.\r\n                windowWidth = resizedWindowWidth; // Set the new window width.\r\n                initialise(); // Call initalise to see if Slidebars should still be running.\r\n                if (leftActive) open('left'); // If left Slidebar is open, calling open will ensure it is the correct size.\r\n                if (rightActive) open('right'); // If right Slidebar is open, calling open will ensure it is the correct size.\r\n            }\r\n        });\r\n        // I may include a height check along side a width check here in future.\r\n\r\n        // ---------------\r\n        // 005 - Animation\r\n\r\n        var animation; // Animation type.\r\n\r\n        // Set animation type.\r\n        if (supportTransition && supportTransform) { // Browser supports css transitions and transforms.\r\n            animation = 'translate'; // Translate for browsers that support it.\r\n            if (android && android < 4.4) animation = 'side'; // Android supports both, but can't translate any fixed positions, so use left instead.\r\n        } else {\r\n            animation = 'jQuery'; // Browsers that don't support css transitions and transitions.\r\n        }\r\n\r\n        // Animate mixin.\r\n        function animate(object, amount, side) {\r\n            // Choose selectors depending on animation style.\r\n            var selector;\r\n\r\n            if (object.hasClass('sb-style-push')) {\r\n                selector = $site.add(object).add($slide); // Push - Animate site, Slidebar and user elements.\r\n            } else if (object.hasClass('sb-style-overlay')) {\r\n                selector = object; // Overlay - Animate Slidebar only.\r\n            } else {\r\n                selector = $site.add($slide); // Reveal - Animate site and user elements.\r\n            }\r\n\r\n            // Apply animation\r\n            if (animation === 'translate') {\r\n                selector.css('transform', 'translate(' + amount + ')'); // Apply the animation.\r\n\r\n            } else if (animation === 'side') {\r\n                if (amount[0] === '-') amount = amount.substr(1); // Remove the '-' from the passed amount for side animations.\r\n                if (amount !== '0px') selector.css(side, '0px'); // Add a 0 value so css transition works.\r\n                setTimeout(function() { // Set a timeout to allow the 0 value to be applied above.\r\n                    selector.css(side, amount); // Apply the animation.\r\n                }, 1);\r\n\r\n            } else if (animation === 'jQuery') {\r\n                if (amount[0] === '-') amount = amount.substr(1); // Remove the '-' from the passed amount for jQuery animations.\r\n                var properties = {};\r\n                properties[side] = amount;\r\n                selector.stop().animate(properties, 400); // Stop any current jQuery animation before starting another.\r\n            }\r\n\r\n            // If closed, remove the inline styling on completion of the animation.\r\n            setTimeout(function() {\r\n                if (amount === '0px') {\r\n                    selector.removeAttr('style');\r\n                    css();\r\n                }\r\n            }, 400);\r\n        }\r\n\r\n        // ----------------\r\n        // 006 - Operations\r\n\r\n        // Open a Slidebar\r\n        function open(side, callback) {\r\n            // Check to see if opposite Slidebar is open.\r\n            if (side === 'left' && $left && rightActive || side === 'right' && $right && leftActive) { // It's open, close it, then continue.\r\n                close();\r\n                setTimeout(proceed, 400);\r\n            } else { // Its not open, continue.\r\n                proceed();\r\n            }\r\n\r\n            // Open\r\n            function proceed() {\r\n                if (init && side === 'left' && $left) { // Slidebars is initiated, left is in use and called to open.\r\n                    $('html').addClass('sb-active sb-active-left'); // Add active classes.\r\n                    $left.addClass('sb-active');\r\n                    animate($left, $left.css('width'), 'left'); // Animation\r\n                    setTimeout(function() {\r\n                        leftActive = true;\r\n                        if (typeof callback === 'function') callback(); // Run callback function.\r\n                    }, 400); // Set active variables.\r\n                } else if (init && side === 'right' && $right) { // Slidebars is initiated, right is in use and called to open.\r\n                    $('html').addClass('sb-active sb-active-right'); // Add active classes.\r\n                    $right.addClass('sb-active');\r\n                    animate($right, '-' + $right.css('width'), 'right'); // Animation\r\n                    setTimeout(function() {\r\n                        rightActive = true;\r\n                        if (typeof callback === 'function') callback(); // Run callback function.\r\n                    }, 400); // Set active variables.\r\n                }\r\n            }\r\n        }\r\n\r\n        // Close either Slidebar\r\n        function close(callback) {\r\n            if (leftActive || rightActive) { // If a Slidebar is open.\r\n                if (leftActive) {\r\n                    animate($left, '0px', 'left'); // Animation\r\n                    leftActive = false;\r\n                }\r\n                if (rightActive) {\r\n                    animate($right, '0px', 'right'); // Animation\r\n                    rightActive = false;\r\n                }\r\n\r\n                setTimeout(function() { // Wait for closing animation to finish.\r\n                    $('html').removeClass('sb-active sb-active-left sb-active-right'); // Remove active classes.\r\n                    if ($left) $left.removeClass('sb-active');\r\n                    if ($right) $right.removeClass('sb-active');\r\n                    if (typeof callback === 'function') callback(); // Run callback function.\r\n                }, 400);\r\n            }\r\n        }\r\n\r\n        // Toggle either Slidebar\r\n        function toggle(side, callback) {\r\n            if (side === 'left' && $left) { // If left Slidebar is called and in use.\r\n                if (!leftActive) {\r\n                    open('left', callback); // Slidebar is closed, open it.\r\n                } else {\r\n                    close(null, callback); // Slidebar is open, close it.\r\n                }\r\n            }\r\n            if (side === 'right' && $right) { // If right Slidebar is called and in use.\r\n                if (!rightActive) {\r\n                    open('right', callback); // Slidebar is closed, open it.\r\n                } else {\r\n                    close(null, callback); // Slidebar is open, close it.\r\n                }\r\n            }\r\n        }\r\n\r\n        // ---------\r\n        // 007 - API\r\n\r\n        this.slidebars = {\r\n            open: open, // Maps user variable name to the open method.\r\n            close: close, // Maps user variable name to the close method.\r\n            toggle: toggle, // Maps user variable name to the toggle method.\r\n            init: function() { // Returns true or false whether Slidebars are running or not.\r\n                return init; // Returns true or false whether Slidebars are running.\r\n            },\r\n            reInit: initialise, // Run the init method to check if the plugin should still be running.\r\n            resetCSS: css, // Reset inline\r\n            active: function(side) { // Returns true or false whether Slidebar is open or closed.\r\n                if (side === 'left' && $left) return leftActive;\r\n                if (side === 'right' && $right) return rightActive;\r\n            },\r\n            destroy: function(side) { // Removes the Slidebar from the DOM.\r\n                if (side === 'left' && $left) {\r\n                    if (leftActive) close(); // Close if its open.\r\n                    setTimeout(function() {\r\n                        $left.remove(); // Remove it.\r\n                        $left = false; // Set variable to false so it cannot be opened again.\r\n                    }, 400);\r\n                }\r\n                if (side === 'right' && $right) {\r\n                    if (rightActive) close(); // Close if its open.\r\n                    setTimeout(function() {\r\n                        $right.remove(); // Remove it.\r\n                        $right = false; // Set variable to false so it cannot be opened again.\r\n                    }, 400);\r\n                }\r\n            }\r\n        };\r\n\r\n        // ----------------\r\n        // 008 - User Input\r\n\r\n        function eventHandler(event, selector) {\r\n            event.stopPropagation(); // Stop event bubbling.\r\n            event.preventDefault(); // Prevent default behaviour.\r\n            if (event.type === 'touchend') selector.off('click'); // If event type was touch, turn off clicks to prevent phantom clicks.\r\n        }\r\n\r\n        // Toggle left Slidebar\r\n        $('.sb-toggle-left').on('touchend click', function(event) {\r\n            eventHandler(event, $(this)); // Handle the event.\r\n            toggle('left'); // Toggle the left Slidbar.\r\n        });\r\n\r\n        // Toggle right Slidebar\r\n        $('.sb-toggle-right').on('touchend click', function(event) {\r\n            eventHandler(event, $(this)); // Handle the event.\r\n            toggle('right'); // Toggle the right Slidbar.\r\n        });\r\n\r\n        // Open left Slidebar\r\n        $('.sb-open-left').on('touchend click', function(event) {\r\n            eventHandler(event, $(this)); // Handle the event.\r\n            open('left'); // Open the left Slidebar.\r\n        });\r\n\r\n        // Open right Slidebar\r\n        $('.sb-open-right').on('touchend click', function(event) {\r\n            eventHandler(event, $(this)); // Handle the event.\r\n            open('right'); // Open the right Slidebar.\r\n        });\r\n\r\n        // Close Slidebar\r\n        $('.sb-close').on('touchend click', function(event) {\r\n            if ( $(this).is('a') || $(this).children().is('a') ) { // Is a link or contains a link.\r\n                if ( event.type === 'click' ) { // Make sure the user wanted to follow the link.\r\n                    event.preventDefault(); // Stop default behaviour.\r\n                    var href = ( $(this).is('a') ? $(this).attr('href') : $(this).find('a').attr('href') ); // Get the href.\r\n                    close(function() { // Close Slidebar and pass callback to redirect.\r\n                        window.location = href;\r\n                    });\r\n                }\r\n            } else { // Just a normal control class.\r\n                eventHandler(event, $(this)); // Handle the event.\r\n                close(); // Close Slidebar.\r\n            }\r\n        });\r\n\r\n        // Close Slidebar via site\r\n        $site.on('touchend click', function(event) {\r\n            if (settings.siteClose && (leftActive || rightActive)) { // If settings permit closing by site and left or right Slidebar is open.\r\n                eventHandler(event, $(this)); // Handle the event.\r\n                close(); // Close it.\r\n            }\r\n        });\r\n\r\n    }; // End Slidebars function.\r\n\r\n}) (jQuery);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./resources/assets/node_modules/slidebars/slidebars.js\n// module id = 145\n// module chunks = 0","$(document).ready(function(){\r\n\r\n    /* Box switch toggle */\r\n\r\n  $('.switch-button').click(function(ev){\r\n\r\n    ev.preventDefault();\r\n\r\n    var switchParent = $(this).attr('switch-parent');\r\n    var switchTarget = $(this).attr('switch-target');\r\n\r\n    $(switchParent).slideToggle();\r\n    $(switchTarget).slideToggle();\r\n\r\n  });\r\n\r\n    /* Content Box Show/Hide Buttons */\r\n\r\n  $('.hidden-button').hover(function(){\r\n\r\n    $(\".btn-hide\", this).fadeIn('fast');\r\n\r\n  },function(){\r\n\r\n    $(\".btn-hide\", this).fadeOut('normal');\r\n\r\n  });\r\n\r\n\r\n  /* Content Box Toggle */\r\n\r\n  $('.toggle-button').click(function(ev) {\r\n\r\n    ev.preventDefault();\r\n\r\n    $(\".glyph-icon\", this).toggleClass(\"icon-rotate-180\");\r\n\r\n    $(this).parents(\".content-box:first\").find(\".content-box-wrapper\").slideToggle();\r\n\r\n  });\r\n\r\n  /* Content Box Remove */\r\n\r\n  $('.remove-button').click(function(ev){\r\n\r\n      ev.preventDefault();\r\n\r\n      var animationEFFECT = $(this).attr('data-animation');\r\n\r\n      var animationTARGET = $(this).parents(\".content-box:first\");\r\n\r\n      $(animationTARGET).addClass('animated');\r\n      $(animationTARGET).addClass(animationEFFECT);\r\n\r\n      var wait = window.setTimeout( function(){\r\n        $(animationTARGET).slideUp()},\r\n        500\r\n      );\r\n\r\n      /* Demo show removed content box */\r\n\r\n      var wait2 = window.setTimeout( function(){\r\n        $(animationTARGET).removeClass(animationEFFECT).fadeIn()},\r\n        2500\r\n      );\r\n\r\n  });\r\n\r\n  /* Close Info Boxes */\r\n\r\n  $(function() { \"use strict\";\r\n\r\n    $(\".infobox-close\").click(function(ev){\r\n\r\n      ev.preventDefault();\r\n\r\n      $(this).parent().fadeOut();\r\n\r\n    });\r\n\r\n\r\n  });\r\n\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./resources/assets/node_modules/content-box/contentbox.js\n// module id = 146\n// module chunks = 0","$(document).ready(function(){\r\n\r\n  /* Loader Show */\r\n\r\n  $('.overlay-button').click(function(){\r\n\r\n\tvar loadertheme = $(this).attr('data-theme');\r\n\tvar loaderopacity = $(this).attr('data-opacity');\r\n\tvar loaderstyle = $(this).attr('data-style');\r\n\r\n\r\n\tvar loader = '<div id=\"loader-overlay\" class=\"ui-front loader ui-widget-overlay ' + loadertheme + ' opacity-' + loaderopacity + '\"><img src=\"../../assets/images/spinner/loader-' + loaderstyle + '.gif\" alt=\"\" /></div>';\r\n\r\n    if ( $('#loader-overlay').length ) {\r\n\t    $('#loader-overlay').remove();\r\n    }\r\n    $('body').append(loader);\r\n    $('#loader-overlay').fadeIn('fast');\r\n\r\n    //demo\r\n\r\n    setTimeout(function() {\r\n      $('#loader-overlay').fadeOut('fast');\r\n    }, 3000);\r\n\r\n  });\r\n\r\n\t/* Refresh Box */\r\n\r\n\t$('.refresh-button').click(function(ev){\r\n\r\n\t\t$('.glyph-icon', this).addClass('icon-spin');\r\n\r\n\t    ev.preventDefault();\r\n\r\n\t    var refreshParent = $(this).parents('.content-box');\r\n\r\n\t\tvar loaderTheme = $(this).attr('data-theme');\r\n\t\tvar loaderOpacity = $(this).attr('data-opacity');\r\n\t\tvar loaderStyle = $(this).attr('data-style');\r\n\r\n\r\n\t\tvar loader = '<div id=\"refresh-overlay\" class=\"ui-front loader ui-widget-overlay ' + loaderTheme + ' opacity-' + loaderOpacity + '\"><img src=\"../../assets/images/spinner/loader-' + loaderStyle + '.gif\" alt=\"\" /></div>';\r\n\r\n        if ( $('#refresh-overlay').length ) {\r\n            $('#refresh-overlay').remove();\r\n        }\r\n\t    $(refreshParent).append(loader);\r\n\t    $('#refresh-overlay').fadeIn('fast');\r\n\r\n\t\t//DEMO\r\n\r\n        setTimeout(function() {\r\n            $('#refresh-overlay').fadeOut('fast');\r\n            $('.glyph-icon', this).removeClass('icon-spin');\r\n        }, 1500);\r\n\r\n\t});\r\n\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./resources/assets/node_modules/overlay/overlay.js\n// module id = 147\n// module chunks = 0","/*! DataTables 1.10.2\r\n * Â©2008-2014 SpryMedia Ltd - datatables.net/license\r\n */\r\n\r\n/**\r\n * @summary     DataTables\r\n * @description Paginate, search and order HTML tables\r\n * @version     1.10.2\r\n * @file        jquery.dataTables.js\r\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\r\n * @contact     www.sprymedia.co.uk/contact\r\n * @copyright   Copyright 2008-2014 SpryMedia Ltd.\r\n *\r\n * This source file is free software, available under the following license:\r\n *   MIT license - http://datatables.net/license\r\n *\r\n * This source file is distributed in the hope that it will be useful, but\r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\r\n *\r\n * For details please refer to: http://www.datatables.net\r\n */\r\n\r\n/*jslint evil: true, undef: true, browser: true */\r\n/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidateRow,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnScrollingWidthAdjust,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnScrollBarWidth,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/\r\n\r\n(/** @lends <global> */function( window, document, undefined ) {\r\n\r\n    (function( factory ) {\r\n        \"use strict\";\r\n\r\n        if ( typeof define === 'function' && define.amd ) {\r\n            // Define as an AMD module if possible\r\n            define( 'datatables', ['jquery'], factory );\r\n        }\r\n        else if ( typeof exports === 'object' ) {\r\n            // Node/CommonJS\r\n            factory( require( 'jquery' ) );\r\n        }\r\n        else if ( jQuery && !jQuery.fn.dataTable ) {\r\n            // Define using browser globals otherwise\r\n            // Prevent multiple instantiations if the script is loaded twice\r\n            factory( jQuery );\r\n        }\r\n    }\r\n    (/** @lends <global> */function( $ ) {\r\n        \"use strict\";\r\n\r\n        /**\r\n         * DataTables is a plug-in for the jQuery Javascript library. It is a highly\r\n         * flexible tool, based upon the foundations of progressive enhancement,\r\n         * which will add advanced interaction controls to any HTML table. For a\r\n         * full list of features please refer to\r\n         * [DataTables.net](href=\"http://datatables.net).\r\n         *\r\n         * Note that the `DataTable` object is not a global variable but is aliased\r\n         * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may\r\n         * be  accessed.\r\n         *\r\n         *  @class\r\n         *  @param {object} [init={}] Configuration object for DataTables. Options\r\n         *    are defined by {@link DataTable.defaults}\r\n         *  @requires jQuery 1.7+\r\n         *\r\n         *  @example\r\n         *    // Basic initialisation\r\n         *    $(document).ready( function {\r\n\t *      $('#example').dataTable();\r\n\t *    } );\r\n         *\r\n         *  @example\r\n         *    // Initialisation with configuration options - in this case, disable\r\n         *    // pagination and sorting.\r\n         *    $(document).ready( function {\r\n\t *      $('#example').dataTable( {\r\n\t *        \"paginate\": false,\r\n\t *        \"sort\": false\r\n\t *      } );\r\n\t *    } );\r\n         */\r\n        var DataTable;\r\n\r\n\r\n        /*\r\n         * It is useful to have variables which are scoped locally so only the\r\n         * DataTables functions can access them and they don't leak into global space.\r\n         * At the same time these functions are often useful over multiple files in the\r\n         * core and API, so we list, or at least document, all variables which are used\r\n         * by DataTables as private variables here. This also ensures that there is no\r\n         * clashing of variable names and that they can easily referenced for reuse.\r\n         */\r\n\r\n\r\n        // Defined else where\r\n        //  _selector_run\r\n        //  _selector_opts\r\n        //  _selector_first\r\n        //  _selector_row_indexes\r\n\r\n        var _ext; // DataTable.ext\r\n        var _Api; // DataTable.Api\r\n        var _api_register; // DataTable.Api.register\r\n        var _api_registerPlural; // DataTable.Api.registerPlural\r\n\r\n        var _re_dic = {};\r\n        var _re_new_lines = /[\\r\\n]/g;\r\n        var _re_html = /<.*?>/g;\r\n        var _re_date_start = /^[\\w\\+\\-]/;\r\n        var _re_date_end = /[\\w\\+\\-]$/;\r\n\r\n        // Escape regular expression special characters\r\n        var _re_escape_regex = new RegExp( '(\\\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-' ].join('|\\\\') + ')', 'g' );\r\n\r\n        // U+2009 is thin space and U+202F is narrow no-break space, both used in many\r\n        // standards as thousands separators\r\n        var _re_formatted_numeric = /[',$Â£â‚¬Â¥%\\u2009\\u202F]/g;\r\n\r\n\r\n        var _empty = function ( d ) {\r\n            return !d || d === true || d === '-' ? true : false;\r\n        };\r\n\r\n\r\n        var _intVal = function ( s ) {\r\n            var integer = parseInt( s, 10 );\r\n            return !isNaN(integer) && isFinite(s) ? integer : null;\r\n        };\r\n\r\n        // Convert from a formatted number with characters other than `.` as the\r\n        // decimal place, to a Javascript number\r\n        var _numToDecimal = function ( num, decimalPoint ) {\r\n            // Cache created regular expressions for speed as this function is called often\r\n            if ( ! _re_dic[ decimalPoint ] ) {\r\n                _re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );\r\n            }\r\n            return typeof num === 'string' ?\r\n                num.replace( /\\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :\r\n                num;\r\n        };\r\n\r\n\r\n        var _isNumber = function ( d, decimalPoint, formatted ) {\r\n            var strType = typeof d === 'string';\r\n\r\n            if ( decimalPoint && strType ) {\r\n                d = _numToDecimal( d, decimalPoint );\r\n            }\r\n\r\n            if ( formatted && strType ) {\r\n                d = d.replace( _re_formatted_numeric, '' );\r\n            }\r\n\r\n            return _empty( d ) || (!isNaN( parseFloat(d) ) && isFinite( d ));\r\n        };\r\n\r\n\r\n        // A string without HTML in it can be considered to be HTML still\r\n        var _isHtml = function ( d ) {\r\n            return _empty( d ) || typeof d === 'string';\r\n        };\r\n\r\n\r\n        var _htmlNumeric = function ( d, decimalPoint, formatted ) {\r\n            if ( _empty( d ) ) {\r\n                return true;\r\n            }\r\n\r\n            var html = _isHtml( d );\r\n            return ! html ?\r\n                null :\r\n                _isNumber( _stripHtml( d ), decimalPoint, formatted ) ?\r\n                    true :\r\n                    null;\r\n        };\r\n\r\n\r\n        var _pluck = function ( a, prop, prop2 ) {\r\n            var out = [];\r\n            var i=0, ien=a.length;\r\n\r\n            // Could have the test in the loop for slightly smaller code, but speed\r\n            // is essential here\r\n            if ( prop2 !== undefined ) {\r\n                for ( ; i<ien ; i++ ) {\r\n                    if ( a[i] && a[i][ prop ] ) {\r\n                        out.push( a[i][ prop ][ prop2 ] );\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for ( ; i<ien ; i++ ) {\r\n                    if ( a[i] ) {\r\n                        out.push( a[i][ prop ] );\r\n                    }\r\n                }\r\n            }\r\n\r\n            return out;\r\n        };\r\n\r\n\r\n        // Basically the same as _pluck, but rather than looping over `a` we use `order`\r\n        // as the indexes to pick from `a`\r\n        var _pluck_order = function ( a, order, prop, prop2 )\r\n        {\r\n            var out = [];\r\n            var i=0, ien=order.length;\r\n\r\n            // Could have the test in the loop for slightly smaller code, but speed\r\n            // is essential here\r\n            if ( prop2 !== undefined ) {\r\n                for ( ; i<ien ; i++ ) {\r\n                    out.push( a[ order[i] ][ prop ][ prop2 ] );\r\n                }\r\n            }\r\n            else {\r\n                for ( ; i<ien ; i++ ) {\r\n                    out.push( a[ order[i] ][ prop ] );\r\n                }\r\n            }\r\n\r\n            return out;\r\n        };\r\n\r\n\r\n        var _range = function ( len, start )\r\n        {\r\n            var out = [];\r\n            var end;\r\n\r\n            if ( start === undefined ) {\r\n                start = 0;\r\n                end = len;\r\n            }\r\n            else {\r\n                end = start;\r\n                start = len;\r\n            }\r\n\r\n            for ( var i=start ; i<end ; i++ ) {\r\n                out.push( i );\r\n            }\r\n\r\n            return out;\r\n        };\r\n\r\n\r\n        var _stripHtml = function ( d ) {\r\n            return d.replace( _re_html, '' );\r\n        };\r\n\r\n\r\n        /**\r\n         * Find the unique elements in a source array.\r\n         *\r\n         * @param  {array} src Source array\r\n         * @return {array} Array of unique items\r\n         * @ignore\r\n         */\r\n        var _unique = function ( src )\r\n        {\r\n            // A faster unique method is to use object keys to identify used values,\r\n            // but this doesn't work with arrays or objects, which we must also\r\n            // consider. See jsperf.com/compare-array-unique-versions/4 for more\r\n            // information.\r\n            var\r\n                out = [],\r\n                val,\r\n                i, ien=src.length,\r\n                j, k=0;\r\n\r\n            again: for ( i=0 ; i<ien ; i++ ) {\r\n                val = src[i];\r\n\r\n                for ( j=0 ; j<k ; j++ ) {\r\n                    if ( out[j] === val ) {\r\n                        continue again;\r\n                    }\r\n                }\r\n\r\n                out.push( val );\r\n                k++;\r\n            }\r\n\r\n            return out;\r\n        };\r\n\r\n\r\n\r\n        /**\r\n         * Create a mapping object that allows camel case parameters to be looked up\r\n         * for their Hungarian counterparts. The mapping is stored in a private\r\n         * parameter called `_hungarianMap` which can be accessed on the source object.\r\n         *  @param {object} o\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnHungarianMap ( o )\r\n        {\r\n            var\r\n                hungarian = 'a aa ai ao as b fn i m o s ',\r\n                match,\r\n                newKey,\r\n                map = {};\r\n\r\n            $.each( o, function (key, val) {\r\n                match = key.match(/^([^A-Z]+?)([A-Z])/);\r\n\r\n                if ( match && hungarian.indexOf(match[1]+' ') !== -1 )\r\n                {\r\n                    newKey = key.replace( match[0], match[2].toLowerCase() );\r\n                    map[ newKey ] = key;\r\n\r\n                    //console.log( key, match );\r\n                    if ( match[1] === 'o' )\r\n                    {\r\n                        _fnHungarianMap( o[key] );\r\n                    }\r\n                }\r\n            } );\r\n\r\n            o._hungarianMap = map;\r\n        }\r\n\r\n\r\n        /**\r\n         * Convert from camel case parameters to Hungarian, based on a Hungarian map\r\n         * created by _fnHungarianMap.\r\n         *  @param {object} src The model object which holds all parameters that can be\r\n         *    mapped.\r\n         *  @param {object} user The object to convert from camel case to Hungarian.\r\n         *  @param {boolean} force When set to `true`, properties which already have a\r\n         *    Hungarian value in the `user` object will be overwritten. Otherwise they\r\n         *    won't be.\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnCamelToHungarian ( src, user, force )\r\n        {\r\n            if ( ! src._hungarianMap ) {\r\n                _fnHungarianMap( src );\r\n            }\r\n\r\n            var hungarianKey;\r\n\r\n            $.each( user, function (key, val) {\r\n                hungarianKey = src._hungarianMap[ key ];\r\n\r\n                if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )\r\n                {\r\n                    // For objects, we need to buzz down into the object to copy parameters\r\n                    if ( hungarianKey.charAt(0) === 'o' )\r\n                    {\r\n                        // Copy the camelCase options over to the hungarian\r\n                        if ( ! user[ hungarianKey ] ) {\r\n                            user[ hungarianKey ] = {};\r\n                        }\r\n                        $.extend( true, user[hungarianKey], user[key] );\r\n\r\n                        _fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );\r\n                    }\r\n                    else {\r\n                        user[hungarianKey] = user[ key ];\r\n                    }\r\n                }\r\n            } );\r\n        }\r\n\r\n\r\n        /**\r\n         * Language compatibility - when certain options are given, and others aren't, we\r\n         * need to duplicate the values over, in order to provide backwards compatibility\r\n         * with older language files.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnLanguageCompat( lang )\r\n        {\r\n            var defaults = DataTable.defaults.oLanguage;\r\n            var zeroRecords = lang.sZeroRecords;\r\n\r\n            /* Backwards compatibility - if there is no sEmptyTable given, then use the same as\r\n             * sZeroRecords - assuming that is given.\r\n             */\r\n            if ( ! lang.sEmptyTable && zeroRecords &&\r\n                defaults.sEmptyTable === \"No data available in table\" )\r\n            {\r\n                _fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );\r\n            }\r\n\r\n            /* Likewise with loading records */\r\n            if ( ! lang.sLoadingRecords && zeroRecords &&\r\n                defaults.sLoadingRecords === \"Loading...\" )\r\n            {\r\n                _fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );\r\n            }\r\n\r\n            // Old parameter name of the thousands separator mapped onto the new\r\n            if ( lang.sInfoThousands ) {\r\n                lang.sThousands = lang.sInfoThousands;\r\n            }\r\n\r\n            var decimal = lang.sDecimal;\r\n            if ( decimal ) {\r\n                _addNumericSort( decimal );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Map one parameter onto another\r\n         *  @param {object} o Object to map\r\n         *  @param {*} knew The new parameter name\r\n         *  @param {*} old The old parameter name\r\n         */\r\n        var _fnCompatMap = function ( o, knew, old ) {\r\n            if ( o[ knew ] !== undefined ) {\r\n                o[ old ] = o[ knew ];\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * Provide backwards compatibility for the main DT options. Note that the new\r\n         * options are mapped onto the old parameters, so this is an external interface\r\n         * change only.\r\n         *  @param {object} init Object to map\r\n         */\r\n        function _fnCompatOpts ( init )\r\n        {\r\n            _fnCompatMap( init, 'ordering',      'bSort' );\r\n            _fnCompatMap( init, 'orderMulti',    'bSortMulti' );\r\n            _fnCompatMap( init, 'orderClasses',  'bSortClasses' );\r\n            _fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );\r\n            _fnCompatMap( init, 'order',         'aaSorting' );\r\n            _fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );\r\n            _fnCompatMap( init, 'paging',        'bPaginate' );\r\n            _fnCompatMap( init, 'pagingType',    'sPaginationType' );\r\n            _fnCompatMap( init, 'pageLength',    'iDisplayLength' );\r\n            _fnCompatMap( init, 'searching',     'bFilter' );\r\n\r\n            // Column search objects are in an array, so it needs to be converted\r\n            // element by element\r\n            var searchCols = init.aoSearchCols;\r\n\r\n            if ( searchCols ) {\r\n                for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {\r\n                    if ( searchCols[i] ) {\r\n                        _fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Provide backwards compatibility for column options. Note that the new options\r\n         * are mapped onto the old parameters, so this is an external interface change\r\n         * only.\r\n         *  @param {object} init Object to map\r\n         */\r\n        function _fnCompatCols ( init )\r\n        {\r\n            _fnCompatMap( init, 'orderable',     'bSortable' );\r\n            _fnCompatMap( init, 'orderData',     'aDataSort' );\r\n            _fnCompatMap( init, 'orderSequence', 'asSorting' );\r\n            _fnCompatMap( init, 'orderDataType', 'sortDataType' );\r\n        }\r\n\r\n\r\n        /**\r\n         * Browser feature detection for capabilities, quirks\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnBrowserDetect( settings )\r\n        {\r\n            var browser = settings.oBrowser;\r\n\r\n            // Scrolling feature / quirks detection\r\n            var n = $('<div/>')\r\n                .css( {\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    left: 0,\r\n                    height: 1,\r\n                    width: 1,\r\n                    overflow: 'hidden'\r\n                } )\r\n                .append(\r\n                $('<div/>')\r\n                    .css( {\r\n                        position: 'absolute',\r\n                        top: 1,\r\n                        left: 1,\r\n                        width: 100,\r\n                        overflow: 'scroll'\r\n                    } )\r\n                    .append(\r\n                    $('<div class=\"test\"/>')\r\n                        .css( {\r\n                            width: '100%',\r\n                            height: 10\r\n                        } )\r\n                )\r\n            )\r\n                .appendTo( 'body' );\r\n\r\n            var test = n.find('.test');\r\n\r\n            // IE6/7 will oversize a width 100% element inside a scrolling element, to\r\n            // include the width of the scrollbar, while other browsers ensure the inner\r\n            // element is contained without forcing scrolling\r\n            browser.bScrollOversize = test[0].offsetWidth === 100;\r\n\r\n            // In rtl text layout, some browsers (most, but not all) will place the\r\n            // scrollbar on the left, rather than the right.\r\n            browser.bScrollbarLeft = test.offset().left !== 1;\r\n\r\n            n.remove();\r\n        }\r\n\r\n\r\n        /**\r\n         * Array.prototype reduce[Right] method, used for browsers which don't support\r\n         * JS 1.6. Done this way to reduce code size, since we iterate either way\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnReduce ( that, fn, init, start, end, inc )\r\n        {\r\n            var\r\n                i = start,\r\n                value,\r\n                isSet = false;\r\n\r\n            if ( init !== undefined ) {\r\n                value = init;\r\n                isSet = true;\r\n            }\r\n\r\n            while ( i !== end ) {\r\n                if ( ! that.hasOwnProperty(i) ) {\r\n                    continue;\r\n                }\r\n\r\n                value = isSet ?\r\n                    fn( value, that[i], i, that ) :\r\n                    that[i];\r\n\r\n                isSet = true;\r\n                i += inc;\r\n            }\r\n\r\n            return value;\r\n        }\r\n\r\n        /**\r\n         * Add a column to the list used for the table with default values\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {node} nTh The th element for this column\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAddColumn( oSettings, nTh )\r\n        {\r\n            // Add column to aoColumns array\r\n            var oDefaults = DataTable.defaults.column;\r\n            var iCol = oSettings.aoColumns.length;\r\n            var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {\r\n                \"nTh\": nTh ? nTh : document.createElement('th'),\r\n                \"sTitle\":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',\r\n                \"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\r\n                \"mData\": oDefaults.mData ? oDefaults.mData : iCol,\r\n                idx: iCol\r\n            } );\r\n            oSettings.aoColumns.push( oCol );\r\n\r\n            // Add search object for column specific search. Note that the `searchCols[ iCol ]`\r\n            // passed into extend can be undefined. This allows the user to give a default\r\n            // with only some of the parameters defined, and also not give a default\r\n            var searchCols = oSettings.aoPreSearchCols;\r\n            searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );\r\n\r\n            // Use the default column options function to initialise classes etc\r\n            _fnColumnOptions( oSettings, iCol, null );\r\n        }\r\n\r\n\r\n        /**\r\n         * Apply options for a column\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {int} iCol column index to consider\r\n         *  @param {object} oOptions object with sType, bVisible and bSearchable etc\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnColumnOptions( oSettings, iCol, oOptions )\r\n        {\r\n            var oCol = oSettings.aoColumns[ iCol ];\r\n            var oClasses = oSettings.oClasses;\r\n            var th = $(oCol.nTh);\r\n\r\n            // Try to get width information from the DOM. We can't get it from CSS\r\n            // as we'd need to parse the CSS stylesheet. `width` option can override\r\n            if ( ! oCol.sWidthOrig ) {\r\n                // Width attribute\r\n                oCol.sWidthOrig = th.attr('width') || null;\r\n\r\n                // Style attribute\r\n                var t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);\r\n                if ( t ) {\r\n                    oCol.sWidthOrig = t[1];\r\n                }\r\n            }\r\n\r\n            /* User specified column options */\r\n            if ( oOptions !== undefined && oOptions !== null )\r\n            {\r\n                // Backwards compatibility\r\n                _fnCompatCols( oOptions );\r\n\r\n                // Map camel case parameters to their Hungarian counterparts\r\n                _fnCamelToHungarian( DataTable.defaults.column, oOptions );\r\n\r\n                /* Backwards compatibility for mDataProp */\r\n                if ( oOptions.mDataProp !== undefined && !oOptions.mData )\r\n                {\r\n                    oOptions.mData = oOptions.mDataProp;\r\n                }\r\n\r\n                if ( oOptions.sType )\r\n                {\r\n                    oCol._sManualType = oOptions.sType;\r\n                }\r\n\r\n                // `class` is a reserved word in Javascript, so we need to provide\r\n                // the ability to use a valid name for the camel case input\r\n                if ( oOptions.className && ! oOptions.sClass )\r\n                {\r\n                    oOptions.sClass = oOptions.className;\r\n                }\r\n\r\n                $.extend( oCol, oOptions );\r\n                _fnMap( oCol, oOptions, \"sWidth\", \"sWidthOrig\" );\r\n\r\n                /* iDataSort to be applied (backwards compatibility), but aDataSort will take\r\n                 * priority if defined\r\n                 */\r\n                if ( typeof oOptions.iDataSort === 'number' )\r\n                {\r\n                    oCol.aDataSort = [ oOptions.iDataSort ];\r\n                }\r\n                _fnMap( oCol, oOptions, \"aDataSort\" );\r\n            }\r\n\r\n            /* Cache the data get and set functions for speed */\r\n            var mDataSrc = oCol.mData;\r\n            var mData = _fnGetObjectDataFn( mDataSrc );\r\n            var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;\r\n\r\n            var attrTest = function( src ) {\r\n                return typeof src === 'string' && src.indexOf('@') !== -1;\r\n            };\r\n            oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (\r\n            attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)\r\n            );\r\n\r\n            oCol.fnGetData = function (rowData, type, meta) {\r\n                var innerData = mData( rowData, type, undefined, meta );\r\n\r\n                return mRender && type ?\r\n                    mRender( innerData, type, rowData, meta ) :\r\n                    innerData;\r\n            };\r\n            oCol.fnSetData = function ( rowData, val, meta ) {\r\n                return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );\r\n            };\r\n\r\n            /* Feature sorting overrides column specific when off */\r\n            if ( !oSettings.oFeatures.bSort )\r\n            {\r\n                oCol.bSortable = false;\r\n                th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called\r\n            }\r\n\r\n            /* Check that the class assignment is correct for sorting */\r\n            var bAsc = $.inArray('asc', oCol.asSorting) !== -1;\r\n            var bDesc = $.inArray('desc', oCol.asSorting) !== -1;\r\n            if ( !oCol.bSortable || (!bAsc && !bDesc) )\r\n            {\r\n                oCol.sSortingClass = oClasses.sSortableNone;\r\n                oCol.sSortingClassJUI = \"\";\r\n            }\r\n            else if ( bAsc && !bDesc )\r\n            {\r\n                oCol.sSortingClass = oClasses.sSortableAsc;\r\n                oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\r\n            }\r\n            else if ( !bAsc && bDesc )\r\n            {\r\n                oCol.sSortingClass = oClasses.sSortableDesc;\r\n                oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\r\n            }\r\n            else\r\n            {\r\n                oCol.sSortingClass = oClasses.sSortable;\r\n                oCol.sSortingClassJUI = oClasses.sSortJUI;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Adjust the table column widths for new data. Note: you would probably want to\r\n         * do a redraw after calling this function!\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAdjustColumnSizing ( settings )\r\n        {\r\n            /* Not interested in doing column width calculation if auto-width is disabled */\r\n            if ( settings.oFeatures.bAutoWidth !== false )\r\n            {\r\n                var columns = settings.aoColumns;\r\n\r\n                _fnCalculateColumnWidths( settings );\r\n                for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )\r\n                {\r\n                    columns[i].nTh.style.width = columns[i].sWidth;\r\n                }\r\n            }\r\n\r\n            var scroll = settings.oScroll;\r\n            if ( scroll.sY !== '' || scroll.sX !== '')\r\n            {\r\n                _fnScrollDraw( settings );\r\n            }\r\n\r\n            _fnCallbackFire( settings, null, 'column-sizing', [settings] );\r\n        }\r\n\r\n\r\n        /**\r\n         * Covert the index of a visible column to the index in the data array (take account\r\n         * of hidden columns)\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {int} iMatch Visible column index to lookup\r\n         *  @returns {int} i the data index\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnVisibleToColumnIndex( oSettings, iMatch )\r\n        {\r\n            var aiVis = _fnGetColumns( oSettings, 'bVisible' );\r\n\r\n            return typeof aiVis[iMatch] === 'number' ?\r\n                aiVis[iMatch] :\r\n                null;\r\n        }\r\n\r\n\r\n        /**\r\n         * Covert the index of an index in the data array and convert it to the visible\r\n         *   column index (take account of hidden columns)\r\n         *  @param {int} iMatch Column index to lookup\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns {int} i the data index\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnColumnIndexToVisible( oSettings, iMatch )\r\n        {\r\n            var aiVis = _fnGetColumns( oSettings, 'bVisible' );\r\n            var iPos = $.inArray( iMatch, aiVis );\r\n\r\n            return iPos !== -1 ? iPos : null;\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the number of visible columns\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns {int} i the number of visible columns\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnVisbleColumns( oSettings )\r\n        {\r\n            return _fnGetColumns( oSettings, 'bVisible' ).length;\r\n        }\r\n\r\n\r\n        /**\r\n         * Get an array of column indexes that match a given property\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {string} sParam Parameter in aoColumns to look for - typically\r\n         *    bVisible or bSearchable\r\n         *  @returns {array} Array of indexes with matched properties\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetColumns( oSettings, sParam )\r\n        {\r\n            var a = [];\r\n\r\n            $.map( oSettings.aoColumns, function(val, i) {\r\n                if ( val[sParam] ) {\r\n                    a.push( i );\r\n                }\r\n            } );\r\n\r\n            return a;\r\n        }\r\n\r\n\r\n        /**\r\n         * Calculate the 'type' of a column\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnColumnTypes ( settings )\r\n        {\r\n            var columns = settings.aoColumns;\r\n            var data = settings.aoData;\r\n            var types = DataTable.ext.type.detect;\r\n            var i, ien, j, jen, k, ken;\r\n            var col, cell, detectedType, cache;\r\n\r\n            // For each column, spin over the \r\n            for ( i=0, ien=columns.length ; i<ien ; i++ ) {\r\n                col = columns[i];\r\n                cache = [];\r\n\r\n                if ( ! col.sType && col._sManualType ) {\r\n                    col.sType = col._sManualType;\r\n                }\r\n                else if ( ! col.sType ) {\r\n                    for ( j=0, jen=types.length ; j<jen ; j++ ) {\r\n                        for ( k=0, ken=data.length ; k<ken ; k++ ) {\r\n                            // Use a cache array so we only need to get the type data\r\n                            // from the formatter once (when using multiple detectors)\r\n                            if ( cache[k] === undefined ) {\r\n                                cache[k] = _fnGetCellData( settings, k, i, 'type' );\r\n                            }\r\n\r\n                            detectedType = types[j]( cache[k], settings );\r\n\r\n                            // Doesn't match, so break early, since this type can't\r\n                            // apply to this column. Also, HTML is a special case since\r\n                            // it is so similar to `string`. Just a single match is\r\n                            // needed for a column to be html type\r\n                            if ( ! detectedType || detectedType === 'html' ) {\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        // Type is valid for all data points in the column - use this\r\n                        // type\r\n                        if ( detectedType ) {\r\n                            col.sType = detectedType;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    // Fall back - if no type was detected, always use string\r\n                    if ( ! col.sType ) {\r\n                        col.sType = 'string';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Take the column definitions and static columns arrays and calculate how\r\n         * they relate to column indexes. The callback function will then apply the\r\n         * definition found for a column to a suitable configuration object.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\r\n         *  @param {array} aoCols The aoColumns array that defines columns individually\r\n         *  @param {function} fn Callback function - takes two parameters, the calculated\r\n         *    column index and the definition for that column.\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )\r\n        {\r\n            var i, iLen, j, jLen, k, kLen, def;\r\n            var columns = oSettings.aoColumns;\r\n\r\n            // Column definitions with aTargets\r\n            if ( aoColDefs )\r\n            {\r\n                /* Loop over the definitions array - loop in reverse so first instance has priority */\r\n                for ( i=aoColDefs.length-1 ; i>=0 ; i-- )\r\n                {\r\n                    def = aoColDefs[i];\r\n\r\n                    /* Each definition can target multiple columns, as it is an array */\r\n                    var aTargets = def.targets !== undefined ?\r\n                        def.targets :\r\n                        def.aTargets;\r\n\r\n                    if ( ! $.isArray( aTargets ) )\r\n                    {\r\n                        aTargets = [ aTargets ];\r\n                    }\r\n\r\n                    for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )\r\n                    {\r\n                        if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )\r\n                        {\r\n                            /* Add columns that we don't yet know about */\r\n                            while( columns.length <= aTargets[j] )\r\n                            {\r\n                                _fnAddColumn( oSettings );\r\n                            }\r\n\r\n                            /* Integer, basic index */\r\n                            fn( aTargets[j], def );\r\n                        }\r\n                        else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )\r\n                        {\r\n                            /* Negative integer, right to left column counting */\r\n                            fn( columns.length+aTargets[j], def );\r\n                        }\r\n                        else if ( typeof aTargets[j] === 'string' )\r\n                        {\r\n                            /* Class name matching on TH element */\r\n                            for ( k=0, kLen=columns.length ; k<kLen ; k++ )\r\n                            {\r\n                                if ( aTargets[j] == \"_all\" ||\r\n                                    $(columns[k].nTh).hasClass( aTargets[j] ) )\r\n                                {\r\n                                    fn( k, def );\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Statically defined columns array\r\n            if ( aoCols )\r\n            {\r\n                for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )\r\n                {\r\n                    fn( i, aoCols[i] );\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Add a data array to the table, creating DOM node etc. This is the parallel to\r\n         * _fnGatherData, but for adding rows from a Javascript source, rather than a\r\n         * DOM source.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {array} aData data array to be added\r\n         *  @param {node} [nTr] TR element to add to the table - optional. If not given,\r\n         *    DataTables will create a row automatically\r\n         *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\r\n         *    if nTr is.\r\n         *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAddData ( oSettings, aDataIn, nTr, anTds )\r\n        {\r\n            /* Create the object for storing information about this new row */\r\n            var iRow = oSettings.aoData.length;\r\n            var oData = $.extend( true, {}, DataTable.models.oRow, {\r\n                src: nTr ? 'dom' : 'data'\r\n            } );\r\n\r\n            oData._aData = aDataIn;\r\n            oSettings.aoData.push( oData );\r\n\r\n            /* Create the cells */\r\n            var nTd, sThisType;\r\n            var columns = oSettings.aoColumns;\r\n            for ( var i=0, iLen=columns.length ; i<iLen ; i++ )\r\n            {\r\n                // When working with a row, the data source object must be populated. In\r\n                // all other cases, the data source object is already populated, so we\r\n                // don't overwrite it, which might break bindings etc\r\n                if ( nTr ) {\r\n                    _fnSetCellData( oSettings, iRow, i, _fnGetCellData( oSettings, iRow, i ) );\r\n                }\r\n                columns[i].sType = null;\r\n            }\r\n\r\n            /* Add to the display array */\r\n            oSettings.aiDisplayMaster.push( iRow );\r\n\r\n            /* Create the DOM information, or register it if already present */\r\n            if ( nTr || ! oSettings.oFeatures.bDeferRender )\r\n            {\r\n                _fnCreateTr( oSettings, iRow, nTr, anTds );\r\n            }\r\n\r\n            return iRow;\r\n        }\r\n\r\n\r\n        /**\r\n         * Add one or more TR elements to the table. Generally we'd expect to\r\n         * use this for reading data from a DOM sourced table, but it could be\r\n         * used for an TR element. Note that if a TR is given, it is used (i.e.\r\n         * it is not cloned).\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {array|node|jQuery} trs The TR element(s) to add to the table\r\n         *  @returns {array} Array of indexes for the added rows\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAddTr( settings, trs )\r\n        {\r\n            var row;\r\n\r\n            // Allow an individual node to be passed in\r\n            if ( ! (trs instanceof $) ) {\r\n                trs = $(trs);\r\n            }\r\n\r\n            return trs.map( function (i, el) {\r\n                row = _fnGetRowElements( settings, el );\r\n                return _fnAddData( settings, row.data, el, row.cells );\r\n            } );\r\n        }\r\n\r\n\r\n        /**\r\n         * Take a TR element and convert it to an index in aoData\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {node} n the TR element to find\r\n         *  @returns {int} index if the node is found, null if not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnNodeToDataIndex( oSettings, n )\r\n        {\r\n            return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;\r\n        }\r\n\r\n\r\n        /**\r\n         * Take a TD element and convert it into a column data index (not the visible index)\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {int} iRow The row number the TD/TH can be found in\r\n         *  @param {node} n The TD/TH element to find\r\n         *  @returns {int} index if the node is found, -1 if not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnNodeToColumnIndex( oSettings, iRow, n )\r\n        {\r\n            return $.inArray( n, oSettings.aoData[ iRow ].anCells );\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the data for a given cell from the internal cache, taking into account data mapping\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {int} rowIdx aoData row id\r\n         *  @param {int} colIdx Column index\r\n         *  @param {string} type data get type ('display', 'type' 'filter' 'sort')\r\n         *  @returns {*} Cell data\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetCellData( settings, rowIdx, colIdx, type )\r\n        {\r\n            var draw           = settings.iDraw;\r\n            var col            = settings.aoColumns[colIdx];\r\n            var rowData        = settings.aoData[rowIdx]._aData;\r\n            var defaultContent = col.sDefaultContent;\r\n            var cellData       = col.fnGetData( rowData, type, {\r\n                settings: settings,\r\n                row:      rowIdx,\r\n                col:      colIdx\r\n            } );\r\n\r\n            if ( cellData === undefined ) {\r\n                if ( settings.iDrawError != draw && defaultContent === null ) {\r\n                    _fnLog( settings, 0, \"Requested unknown parameter \"+\r\n                    (typeof col.mData=='function' ? '{function}' : \"'\"+col.mData+\"'\")+\r\n                    \" for row \"+rowIdx, 4 );\r\n                    settings.iDrawError = draw;\r\n                }\r\n                return defaultContent;\r\n            }\r\n\r\n            /* When the data source is null, we can use default column data */\r\n            if ( (cellData === rowData || cellData === null) && defaultContent !== null ) {\r\n                cellData = defaultContent;\r\n            }\r\n            else if ( typeof cellData === 'function' ) {\r\n                // If the data source is a function, then we run it and use the return,\r\n                // executing in the scope of the data object (for instances)\r\n                return cellData.call( rowData );\r\n            }\r\n\r\n            if ( cellData === null && type == 'display' ) {\r\n                return '';\r\n            }\r\n            return cellData;\r\n        }\r\n\r\n\r\n        /**\r\n         * Set the value for a specific cell, into the internal data cache\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {int} rowIdx aoData row id\r\n         *  @param {int} colIdx Column index\r\n         *  @param {*} val Value to set\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSetCellData( settings, rowIdx, colIdx, val )\r\n        {\r\n            var col     = settings.aoColumns[colIdx];\r\n            var rowData = settings.aoData[rowIdx]._aData;\r\n\r\n            col.fnSetData( rowData, val, {\r\n                settings: settings,\r\n                row:      rowIdx,\r\n                col:      colIdx\r\n            }  );\r\n        }\r\n\r\n\r\n        // Private variable that is used to match action syntax in the data property object\r\n        var __reArray = /\\[.*?\\]$/;\r\n        var __reFn = /\\(\\)$/;\r\n\r\n        /**\r\n         * Split string on periods, taking into account escaped periods\r\n         * @param  {string} str String to split\r\n         * @return {array} Split string\r\n         */\r\n        function _fnSplitObjNotation( str )\r\n        {\r\n            return $.map( str.match(/(\\\\.|[^\\.])+/g), function ( s ) {\r\n                return s.replace(/\\\\./g, '.');\r\n            } );\r\n        }\r\n\r\n\r\n        /**\r\n         * Return a function that can be used to get data from a source object, taking\r\n         * into account the ability to use nested objects as a source\r\n         *  @param {string|int|function} mSource The data source for the object\r\n         *  @returns {function} Data get function\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetObjectDataFn( mSource )\r\n        {\r\n            if ( $.isPlainObject( mSource ) )\r\n            {\r\n                /* Build an object of get functions, and wrap them in a single call */\r\n                var o = {};\r\n                $.each( mSource, function (key, val) {\r\n                    if ( val ) {\r\n                        o[key] = _fnGetObjectDataFn( val );\r\n                    }\r\n                } );\r\n\r\n                return function (data, type, row, meta) {\r\n                    var t = o[type] || o._;\r\n                    return t !== undefined ?\r\n                        t(data, type, row, meta) :\r\n                        data;\r\n                };\r\n            }\r\n            else if ( mSource === null )\r\n            {\r\n                /* Give an empty string for rendering / sorting etc */\r\n                return function (data) { // type, row and meta also passed, but not used\r\n                    return data;\r\n                };\r\n            }\r\n            else if ( typeof mSource === 'function' )\r\n            {\r\n                return function (data, type, row, meta) {\r\n                    return mSource( data, type, row, meta );\r\n                };\r\n            }\r\n            else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\r\n                mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\r\n            {\r\n                /* If there is a . in the source string then the data source is in a\r\n                 * nested object so we loop over the data for each level to get the next\r\n                 * level down. On each loop we test for undefined, and if found immediately\r\n                 * return. This allows entire objects to be missing and sDefaultContent to\r\n                 * be used if defined, rather than throwing an error\r\n                 */\r\n                var fetchData = function (data, type, src) {\r\n                    var arrayNotation, funcNotation, out, innerSrc;\r\n\r\n                    if ( src !== \"\" )\r\n                    {\r\n                        var a = _fnSplitObjNotation( src );\r\n\r\n                        for ( var i=0, iLen=a.length ; i<iLen ; i++ )\r\n                        {\r\n                            // Check if we are dealing with special notation\r\n                            arrayNotation = a[i].match(__reArray);\r\n                            funcNotation = a[i].match(__reFn);\r\n\r\n                            if ( arrayNotation )\r\n                            {\r\n                                // Array notation\r\n                                a[i] = a[i].replace(__reArray, '');\r\n\r\n                                // Condition allows simply [] to be passed in\r\n                                if ( a[i] !== \"\" ) {\r\n                                    data = data[ a[i] ];\r\n                                }\r\n                                out = [];\r\n\r\n                                // Get the remainder of the nested object to get\r\n                                a.splice( 0, i+1 );\r\n                                innerSrc = a.join('.');\r\n\r\n                                // Traverse each entry in the array getting the properties requested\r\n                                for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {\r\n                                    out.push( fetchData( data[j], type, innerSrc ) );\r\n                                }\r\n\r\n                                // If a string is given in between the array notation indicators, that\r\n                                // is used to join the strings together, otherwise an array is returned\r\n                                var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);\r\n                                data = (join===\"\") ? out : out.join(join);\r\n\r\n                                // The inner call to fetchData has already traversed through the remainder\r\n                                // of the source requested, so we exit from the loop\r\n                                break;\r\n                            }\r\n                            else if ( funcNotation )\r\n                            {\r\n                                // Function call\r\n                                a[i] = a[i].replace(__reFn, '');\r\n                                data = data[ a[i] ]();\r\n                                continue;\r\n                            }\r\n\r\n                            if ( data === null || data[ a[i] ] === undefined )\r\n                            {\r\n                                return undefined;\r\n                            }\r\n                            data = data[ a[i] ];\r\n                        }\r\n                    }\r\n\r\n                    return data;\r\n                };\r\n\r\n                return function (data, type) { // row and meta also passed, but not used\r\n                    return fetchData( data, type, mSource );\r\n                };\r\n            }\r\n            else\r\n            {\r\n                /* Array or flat object mapping */\r\n                return function (data, type) { // row and meta also passed, but not used\r\n                    return data[mSource];\r\n                };\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Return a function that can be used to set data from a source object, taking\r\n         * into account the ability to use nested objects as a source\r\n         *  @param {string|int|function} mSource The data source for the object\r\n         *  @returns {function} Data set function\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSetObjectDataFn( mSource )\r\n        {\r\n            if ( $.isPlainObject( mSource ) )\r\n            {\r\n                /* Unlike get, only the underscore (global) option is used for for\r\n                 * setting data since we don't know the type here. This is why an object\r\n                 * option is not documented for `mData` (which is read/write), but it is\r\n                 * for `mRender` which is read only.\r\n                 */\r\n                return _fnSetObjectDataFn( mSource._ );\r\n            }\r\n            else if ( mSource === null )\r\n            {\r\n                /* Nothing to do when the data source is null */\r\n                return function () {};\r\n            }\r\n            else if ( typeof mSource === 'function' )\r\n            {\r\n                return function (data, val, meta) {\r\n                    mSource( data, 'set', val, meta );\r\n                };\r\n            }\r\n            else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\r\n                mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\r\n            {\r\n                /* Like the get, we need to get data from a nested object */\r\n                var setData = function (data, val, src) {\r\n                    var a = _fnSplitObjNotation( src ), b;\r\n                    var aLast = a[a.length-1];\r\n                    var arrayNotation, funcNotation, o, innerSrc;\r\n\r\n                    for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )\r\n                    {\r\n                        // Check if we are dealing with an array notation request\r\n                        arrayNotation = a[i].match(__reArray);\r\n                        funcNotation = a[i].match(__reFn);\r\n\r\n                        if ( arrayNotation )\r\n                        {\r\n                            a[i] = a[i].replace(__reArray, '');\r\n                            data[ a[i] ] = [];\r\n\r\n                            // Get the remainder of the nested object to set so we can recurse\r\n                            b = a.slice();\r\n                            b.splice( 0, i+1 );\r\n                            innerSrc = b.join('.');\r\n\r\n                            // Traverse each entry in the array setting the properties requested\r\n                            for ( var j=0, jLen=val.length ; j<jLen ; j++ )\r\n                            {\r\n                                o = {};\r\n                                setData( o, val[j], innerSrc );\r\n                                data[ a[i] ].push( o );\r\n                            }\r\n\r\n                            // The inner call to setData has already traversed through the remainder\r\n                            // of the source and has set the data, thus we can exit here\r\n                            return;\r\n                        }\r\n                        else if ( funcNotation )\r\n                        {\r\n                            // Function call\r\n                            a[i] = a[i].replace(__reFn, '');\r\n                            data = data[ a[i] ]( val );\r\n                        }\r\n\r\n                        // If the nested object doesn't currently exist - since we are\r\n                        // trying to set the value - create it\r\n                        if ( data[ a[i] ] === null || data[ a[i] ] === undefined )\r\n                        {\r\n                            data[ a[i] ] = {};\r\n                        }\r\n                        data = data[ a[i] ];\r\n                    }\r\n\r\n                    // Last item in the input - i.e, the actual set\r\n                    if ( aLast.match(__reFn ) )\r\n                    {\r\n                        // Function call\r\n                        data = data[ aLast.replace(__reFn, '') ]( val );\r\n                    }\r\n                    else\r\n                    {\r\n                        // If array notation is used, we just want to strip it and use the property name\r\n                        // and assign the value. If it isn't used, then we get the result we want anyway\r\n                        data[ aLast.replace(__reArray, '') ] = val;\r\n                    }\r\n                };\r\n\r\n                return function (data, val) { // meta is also passed in, but not used\r\n                    return setData( data, val, mSource );\r\n                };\r\n            }\r\n            else\r\n            {\r\n                /* Array or flat object mapping */\r\n                return function (data, val) { // meta is also passed in, but not used\r\n                    data[mSource] = val;\r\n                };\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Return an array with the full table data\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns array {array} aData Master data array\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetDataMaster ( settings )\r\n        {\r\n            return _pluck( settings.aoData, '_aData' );\r\n        }\r\n\r\n\r\n        /**\r\n         * Nuke the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnClearTable( settings )\r\n        {\r\n            settings.aoData.length = 0;\r\n            settings.aiDisplayMaster.length = 0;\r\n            settings.aiDisplay.length = 0;\r\n        }\r\n\r\n\r\n        /**\r\n         * Take an array of integers (index array) and remove a target integer (value - not\r\n         * the key!)\r\n         *  @param {array} a Index array to target\r\n         *  @param {int} iTarget value to find\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnDeleteIndex( a, iTarget, splice )\r\n        {\r\n            var iTargetIndex = -1;\r\n\r\n            for ( var i=0, iLen=a.length ; i<iLen ; i++ )\r\n            {\r\n                if ( a[i] == iTarget )\r\n                {\r\n                    iTargetIndex = i;\r\n                }\r\n                else if ( a[i] > iTarget )\r\n                {\r\n                    a[i]--;\r\n                }\r\n            }\r\n\r\n            if ( iTargetIndex != -1 && splice === undefined )\r\n            {\r\n                a.splice( iTargetIndex, 1 );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Mark cached data as invalid such that a re-read of the data will occur when\r\n         * the cached data is next requested. Also update from the data source object.\r\n         *\r\n         * @param {object} settings DataTables settings object\r\n         * @param  {int}    rowIdx   Row index to invalidate\r\n         * @memberof DataTable#oApi\r\n         *\r\n         * @todo For the modularisation of v1.11 this will need to become a callback, so\r\n         *   the sort and filter methods can subscribe to it. That will required\r\n         *   initialisation options for sorting, which is why it is not already baked in\r\n         */\r\n        function _fnInvalidateRow( settings, rowIdx, src, column )\r\n        {\r\n            var row = settings.aoData[ rowIdx ];\r\n            var i, ien;\r\n\r\n            // Are we reading last data from DOM or the data object?\r\n            if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {\r\n                // Read the data from the DOM\r\n                row._aData = _fnGetRowElements( settings, row ).data;\r\n            }\r\n            else {\r\n                // Reading from data object, update the DOM\r\n                var cells = row.anCells;\r\n                var cell;\r\n\r\n                if ( cells ) {\r\n                    for ( i=0, ien=cells.length ; i<ien ; i++ ) {\r\n                        cell = cells[i];\r\n\r\n                        // This is very frustrating, but in IE if you just write directly\r\n                        // to innerHTML, and elements that are overwritten are GC'ed,\r\n                        // even if there is a reference to them elsewhere\r\n                        while ( cell.childNodes.length ) {\r\n                            cell.removeChild( cell.firstChild );\r\n                        }\r\n\r\n                        cells[i].innerHTML = _fnGetCellData( settings, rowIdx, i, 'display' );\r\n                    }\r\n                }\r\n            }\r\n\r\n            row._aSortData = null;\r\n            row._aFilterData = null;\r\n\r\n            // Invalidate the type for a specific column (if given) or all columns since\r\n            // the data might have changed\r\n            var cols = settings.aoColumns;\r\n            if ( column !== undefined ) {\r\n                cols[ column ].sType = null;\r\n            }\r\n            else {\r\n                for ( i=0, ien=cols.length ; i<ien ; i++ ) {\r\n                    cols[i].sType = null;\r\n                }\r\n            }\r\n\r\n            // Update DataTables special `DT_*` attributes for the row\r\n            _fnRowAttributes( row );\r\n        }\r\n\r\n\r\n        /**\r\n         * Build a data source object from an HTML row, reading the contents of the\r\n         * cells that are in the row.\r\n         *\r\n         * @param {object} settings DataTables settings object\r\n         * @param {node|object} TR element from which to read data or existing row\r\n         *   object from which to re-read the data from the cells\r\n         * @returns {object} Object with two parameters: `data` the data read, in\r\n         *   document order, and `cells` and array of nodes (they can be useful to the\r\n         *   caller, so rather than needing a second traversal to get them, just return\r\n         *   them from here).\r\n         * @memberof DataTable#oApi\r\n         */\r\n        function _fnGetRowElements( settings, row )\r\n        {\r\n            var\r\n                d = [],\r\n                tds = [],\r\n                td = row.firstChild,\r\n                name, col, o, i=0, contents,\r\n                columns = settings.aoColumns;\r\n\r\n            var attr = function ( str, data, td  ) {\r\n                if ( typeof str === 'string' ) {\r\n                    var idx = str.indexOf('@');\r\n\r\n                    if ( idx !== -1 ) {\r\n                        var src = str.substring( idx+1 );\r\n                        o[ '@'+src ] = td.getAttribute( src );\r\n                    }\r\n                }\r\n            };\r\n\r\n            var cellProcess = function ( cell ) {\r\n                col = columns[i];\r\n                contents = $.trim(cell.innerHTML);\r\n\r\n                if ( col && col._bAttrSrc ) {\r\n                    o = {\r\n                        display: contents\r\n                    };\r\n\r\n                    attr( col.mData.sort, o, cell );\r\n                    attr( col.mData.type, o, cell );\r\n                    attr( col.mData.filter, o, cell );\r\n\r\n                    d.push( o );\r\n                }\r\n                else {\r\n                    d.push( contents );\r\n                }\r\n\r\n                i++;\r\n            };\r\n\r\n            if ( td ) {\r\n                // `tr` element passed in\r\n                while ( td ) {\r\n                    name = td.nodeName.toUpperCase();\r\n\r\n                    if ( name == \"TD\" || name == \"TH\" ) {\r\n                        cellProcess( td );\r\n                        tds.push( td );\r\n                    }\r\n\r\n                    td = td.nextSibling;\r\n                }\r\n            }\r\n            else {\r\n                // Existing row object passed in\r\n                tds = row.anCells;\r\n\r\n                for ( var j=0, jen=tds.length ; j<jen ; j++ ) {\r\n                    cellProcess( tds[j] );\r\n                }\r\n            }\r\n\r\n            return {\r\n                data: d,\r\n                cells: tds\r\n            };\r\n        }\r\n        /**\r\n         * Create a new TR element (and it's TD children) for a row\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {int} iRow Row to consider\r\n         *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\r\n         *    DataTables will create a row automatically\r\n         *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\r\n         *    if nTr is.\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )\r\n        {\r\n            var\r\n                row = oSettings.aoData[iRow],\r\n                rowData = row._aData,\r\n                cells = [],\r\n                nTr, nTd, oCol,\r\n                i, iLen;\r\n\r\n            if ( row.nTr === null )\r\n            {\r\n                nTr = nTrIn || document.createElement('tr');\r\n\r\n                row.nTr = nTr;\r\n                row.anCells = cells;\r\n\r\n                /* Use a private property on the node to allow reserve mapping from the node\r\n                 * to the aoData array for fast look up\r\n                 */\r\n                nTr._DT_RowIndex = iRow;\r\n\r\n                /* Special parameters can be given by the data source to be used on the row */\r\n                _fnRowAttributes( row );\r\n\r\n                /* Process each column */\r\n                for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )\r\n                {\r\n                    oCol = oSettings.aoColumns[i];\r\n\r\n                    nTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );\r\n                    cells.push( nTd );\r\n\r\n                    // Need to create the HTML if new, or if a rendering function is defined\r\n                    if ( !nTrIn || oCol.mRender || oCol.mData !== i )\r\n                    {\r\n                        nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );\r\n                    }\r\n\r\n                    /* Add user defined class */\r\n                    if ( oCol.sClass )\r\n                    {\r\n                        nTd.className += ' '+oCol.sClass;\r\n                    }\r\n\r\n                    // Visibility - add or remove as required\r\n                    if ( oCol.bVisible && ! nTrIn )\r\n                    {\r\n                        nTr.appendChild( nTd );\r\n                    }\r\n                    else if ( ! oCol.bVisible && nTrIn )\r\n                    {\r\n                        nTd.parentNode.removeChild( nTd );\r\n                    }\r\n\r\n                    if ( oCol.fnCreatedCell )\r\n                    {\r\n                        oCol.fnCreatedCell.call( oSettings.oInstance,\r\n                            nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i\r\n                        );\r\n                    }\r\n                }\r\n\r\n                _fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow] );\r\n            }\r\n\r\n            // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved\r\n            // and deployed\r\n            row.nTr.setAttribute( 'role', 'row' );\r\n        }\r\n\r\n\r\n        /**\r\n         * Add attributes to a row based on the special `DT_*` parameters in a data\r\n         * source object.\r\n         *  @param {object} DataTables row object for the row to be modified\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnRowAttributes( row )\r\n        {\r\n            var tr = row.nTr;\r\n            var data = row._aData;\r\n\r\n            if ( tr ) {\r\n                if ( data.DT_RowId ) {\r\n                    tr.id = data.DT_RowId;\r\n                }\r\n\r\n                if ( data.DT_RowClass ) {\r\n                    // Remove any classes added by DT_RowClass before\r\n                    var a = data.DT_RowClass.split(' ');\r\n                    row.__rowc = row.__rowc ?\r\n                        _unique( row.__rowc.concat( a ) ) :\r\n                        a;\r\n\r\n                    $(tr)\r\n                        .removeClass( row.__rowc.join(' ') )\r\n                        .addClass( data.DT_RowClass );\r\n                }\r\n\r\n                if ( data.DT_RowData ) {\r\n                    $(tr).data( data.DT_RowData );\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Create the HTML header for the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnBuildHead( oSettings )\r\n        {\r\n            var i, ien, cell, row, column;\r\n            var thead = oSettings.nTHead;\r\n            var tfoot = oSettings.nTFoot;\r\n            var createHeader = $('th, td', thead).length === 0;\r\n            var classes = oSettings.oClasses;\r\n            var columns = oSettings.aoColumns;\r\n\r\n            if ( createHeader ) {\r\n                row = $('<tr/>').appendTo( thead );\r\n            }\r\n\r\n            for ( i=0, ien=columns.length ; i<ien ; i++ ) {\r\n                column = columns[i];\r\n                cell = $( column.nTh ).addClass( column.sClass );\r\n\r\n                if ( createHeader ) {\r\n                    cell.appendTo( row );\r\n                }\r\n\r\n                // 1.11 move into sorting\r\n                if ( oSettings.oFeatures.bSort ) {\r\n                    cell.addClass( column.sSortingClass );\r\n\r\n                    if ( column.bSortable !== false ) {\r\n                        cell\r\n                            .attr( 'tabindex', oSettings.iTabIndex )\r\n                            .attr( 'aria-controls', oSettings.sTableId );\r\n\r\n                        _fnSortAttachListener( oSettings, column.nTh, i );\r\n                    }\r\n                }\r\n\r\n                if ( column.sTitle != cell.html() ) {\r\n                    cell.html( column.sTitle );\r\n                }\r\n\r\n                _fnRenderer( oSettings, 'header' )(\r\n                    oSettings, cell, column, classes\r\n                );\r\n            }\r\n\r\n            if ( createHeader ) {\r\n                _fnDetectHeader( oSettings.aoHeader, thead );\r\n            }\r\n\r\n            /* ARIA role for the rows */\r\n            $(thead).find('>tr').attr('role', 'row');\r\n\r\n            /* Deal with the footer - add classes if required */\r\n            $(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );\r\n            $(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );\r\n\r\n            // Cache the footer cells. Note that we only take the cells from the first\r\n            // row in the footer. If there is more than one row the user wants to\r\n            // interact with, they need to use the table().foot() method. Note also this\r\n            // allows cells to be used for multiple columns using colspan\r\n            if ( tfoot !== null ) {\r\n                var cells = oSettings.aoFooter[0];\r\n\r\n                for ( i=0, ien=cells.length ; i<ien ; i++ ) {\r\n                    column = columns[i];\r\n                    column.nTf = cells[i].cell;\r\n\r\n                    if ( column.sClass ) {\r\n                        $(column.nTf).addClass( column.sClass );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Draw the header (or footer) element based on the column visibility states. The\r\n         * methodology here is to use the layout array from _fnDetectHeader, modified for\r\n         * the instantaneous column visibility, to construct the new layout. The grid is\r\n         * traversed over cell at a time in a rows x columns grid fashion, although each\r\n         * cell insert can cover multiple elements in the grid - which is tracks using the\r\n         * aApplied array. Cell inserts in the grid will only occur where there isn't\r\n         * already a cell in that position.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param array {objects} aoSource Layout array from _fnDetectHeader\r\n         *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnDrawHead( oSettings, aoSource, bIncludeHidden )\r\n        {\r\n            var i, iLen, j, jLen, k, kLen, n, nLocalTr;\r\n            var aoLocal = [];\r\n            var aApplied = [];\r\n            var iColumns = oSettings.aoColumns.length;\r\n            var iRowspan, iColspan;\r\n\r\n            if ( ! aoSource )\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (  bIncludeHidden === undefined )\r\n            {\r\n                bIncludeHidden = false;\r\n            }\r\n\r\n            /* Make a copy of the master layout array, but without the visible columns in it */\r\n            for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )\r\n            {\r\n                aoLocal[i] = aoSource[i].slice();\r\n                aoLocal[i].nTr = aoSource[i].nTr;\r\n\r\n                /* Remove any columns which are currently hidden */\r\n                for ( j=iColumns-1 ; j>=0 ; j-- )\r\n                {\r\n                    if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )\r\n                    {\r\n                        aoLocal[i].splice( j, 1 );\r\n                    }\r\n                }\r\n\r\n                /* Prep the applied array - it needs an element for each row */\r\n                aApplied.push( [] );\r\n            }\r\n\r\n            for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )\r\n            {\r\n                nLocalTr = aoLocal[i].nTr;\r\n\r\n                /* All cells are going to be replaced, so empty out the row */\r\n                if ( nLocalTr )\r\n                {\r\n                    while( (n = nLocalTr.firstChild) )\r\n                    {\r\n                        nLocalTr.removeChild( n );\r\n                    }\r\n                }\r\n\r\n                for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )\r\n                {\r\n                    iRowspan = 1;\r\n                    iColspan = 1;\r\n\r\n                    /* Check to see if there is already a cell (row/colspan) covering our target\r\n                     * insert point. If there is, then there is nothing to do.\r\n                     */\r\n                    if ( aApplied[i][j] === undefined )\r\n                    {\r\n                        nLocalTr.appendChild( aoLocal[i][j].cell );\r\n                        aApplied[i][j] = 1;\r\n\r\n                        /* Expand the cell to cover as many rows as needed */\r\n                        while ( aoLocal[i+iRowspan] !== undefined &&\r\n                        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )\r\n                        {\r\n                            aApplied[i+iRowspan][j] = 1;\r\n                            iRowspan++;\r\n                        }\r\n\r\n                        /* Expand the cell to cover as many columns as needed */\r\n                        while ( aoLocal[i][j+iColspan] !== undefined &&\r\n                        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )\r\n                        {\r\n                            /* Must update the applied array over the rows for the columns */\r\n                            for ( k=0 ; k<iRowspan ; k++ )\r\n                            {\r\n                                aApplied[i+k][j+iColspan] = 1;\r\n                            }\r\n                            iColspan++;\r\n                        }\r\n\r\n                        /* Do the actual expansion in the DOM */\r\n                        $(aoLocal[i][j].cell)\r\n                            .attr('rowspan', iRowspan)\r\n                            .attr('colspan', iColspan);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Insert the required TR nodes into the table for display\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnDraw( oSettings )\r\n        {\r\n            /* Provide a pre-callback function which can be used to cancel the draw is false is returned */\r\n            var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );\r\n            if ( $.inArray( false, aPreDraw ) !== -1 )\r\n            {\r\n                _fnProcessingDisplay( oSettings, false );\r\n                return;\r\n            }\r\n\r\n            var i, iLen, n;\r\n            var anRows = [];\r\n            var iRowCount = 0;\r\n            var asStripeClasses = oSettings.asStripeClasses;\r\n            var iStripes = asStripeClasses.length;\r\n            var iOpenRows = oSettings.aoOpenRows.length;\r\n            var oLang = oSettings.oLanguage;\r\n            var iInitDisplayStart = oSettings.iInitDisplayStart;\r\n            var bServerSide = _fnDataSource( oSettings ) == 'ssp';\r\n            var aiDisplay = oSettings.aiDisplay;\r\n\r\n            oSettings.bDrawing = true;\r\n\r\n            /* Check and see if we have an initial draw position from state saving */\r\n            if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )\r\n            {\r\n                oSettings._iDisplayStart = bServerSide ?\r\n                    iInitDisplayStart :\r\n                    iInitDisplayStart >= oSettings.fnRecordsDisplay() ?\r\n                        0 :\r\n                        iInitDisplayStart;\r\n\r\n                oSettings.iInitDisplayStart = -1;\r\n            }\r\n\r\n            var iDisplayStart = oSettings._iDisplayStart;\r\n            var iDisplayEnd = oSettings.fnDisplayEnd();\r\n\r\n            /* Server-side processing draw intercept */\r\n            if ( oSettings.bDeferLoading )\r\n            {\r\n                oSettings.bDeferLoading = false;\r\n                oSettings.iDraw++;\r\n                _fnProcessingDisplay( oSettings, false );\r\n            }\r\n            else if ( !bServerSide )\r\n            {\r\n                oSettings.iDraw++;\r\n            }\r\n            else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )\r\n            {\r\n                return;\r\n            }\r\n\r\n            if ( aiDisplay.length !== 0 )\r\n            {\r\n                var iStart = bServerSide ? 0 : iDisplayStart;\r\n                var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\r\n\r\n                for ( var j=iStart ; j<iEnd ; j++ )\r\n                {\r\n                    var iDataIndex = aiDisplay[j];\r\n                    var aoData = oSettings.aoData[ iDataIndex ];\r\n                    if ( aoData.nTr === null )\r\n                    {\r\n                        _fnCreateTr( oSettings, iDataIndex );\r\n                    }\r\n\r\n                    var nRow = aoData.nTr;\r\n\r\n                    /* Remove the old striping classes and then add the new one */\r\n                    if ( iStripes !== 0 )\r\n                    {\r\n                        var sStripe = asStripeClasses[ iRowCount % iStripes ];\r\n                        if ( aoData._sRowStripe != sStripe )\r\n                        {\r\n                            $(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );\r\n                            aoData._sRowStripe = sStripe;\r\n                        }\r\n                    }\r\n\r\n                    /* Row callback functions - might want to manipulate the row */\r\n                    _fnCallbackFire( oSettings, 'aoRowCallback', null,\r\n                        [nRow, aoData._aData, iRowCount, j] );\r\n\r\n                    anRows.push( nRow );\r\n                    iRowCount++;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                /* Table is empty - create a row with an empty message in it */\r\n                var sZero = oLang.sZeroRecords;\r\n                if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )\r\n                {\r\n                    sZero = oLang.sLoadingRecords;\r\n                }\r\n                else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )\r\n                {\r\n                    sZero = oLang.sEmptyTable;\r\n                }\r\n\r\n                anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )\r\n                    .append( $('<td />', {\r\n                        'valign':  'top',\r\n                        'colSpan': _fnVisbleColumns( oSettings ),\r\n                        'class':   oSettings.oClasses.sRowEmpty\r\n                    } ).html( sZero ) )[0];\r\n            }\r\n\r\n            /* Header and footer callbacks */\r\n            _fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],\r\n                _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\r\n\r\n            _fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],\r\n                _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\r\n\r\n            var body = $(oSettings.nTBody);\r\n\r\n            body.children().detach();\r\n            body.append( $(anRows) );\r\n\r\n            /* Call all required callback functions for the end of a draw */\r\n            _fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );\r\n\r\n            /* Draw is complete, sorting and filtering must be as well */\r\n            oSettings.bSorted = false;\r\n            oSettings.bFiltered = false;\r\n            oSettings.bDrawing = false;\r\n        }\r\n\r\n\r\n        /**\r\n         * Redraw the table - taking account of the various features which are enabled\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {boolean} [holdPosition] Keep the current paging position. By default\r\n         *    the paging is reset to the first page\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnReDraw( settings, holdPosition )\r\n        {\r\n            var\r\n                features = settings.oFeatures,\r\n                sort     = features.bSort,\r\n                filter   = features.bFilter;\r\n\r\n            if ( sort ) {\r\n                _fnSort( settings );\r\n            }\r\n\r\n            if ( filter ) {\r\n                _fnFilterComplete( settings, settings.oPreviousSearch );\r\n            }\r\n            else {\r\n                // No filtering, so we want to just use the display master\r\n                settings.aiDisplay = settings.aiDisplayMaster.slice();\r\n            }\r\n\r\n            if ( holdPosition !== true ) {\r\n                settings._iDisplayStart = 0;\r\n            }\r\n\r\n            // Let any modules know about the draw hold position state (used by\r\n            // scrolling internally)\r\n            settings._drawHold = holdPosition;\r\n\r\n            _fnDraw( settings );\r\n\r\n            settings._drawHold = false;\r\n        }\r\n\r\n\r\n        /**\r\n         * Add the options to the page HTML for the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAddOptionsHtml ( oSettings )\r\n        {\r\n            var classes = oSettings.oClasses;\r\n            var table = $(oSettings.nTable);\r\n            var holding = $('<div/>').insertBefore( table ); // Holding element for speed\r\n            var features = oSettings.oFeatures;\r\n\r\n            // All DataTables are wrapped in a div\r\n            var insert = $('<div/>', {\r\n                id:      oSettings.sTableId+'_wrapper',\r\n                'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)\r\n            } );\r\n\r\n            oSettings.nHolding = holding[0];\r\n            oSettings.nTableWrapper = insert[0];\r\n            oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\r\n\r\n            /* Loop over the user set positioning and place the elements as needed */\r\n            var aDom = oSettings.sDom.split('');\r\n            var featureNode, cOption, nNewNode, cNext, sAttr, j;\r\n            for ( var i=0 ; i<aDom.length ; i++ )\r\n            {\r\n                featureNode = null;\r\n                cOption = aDom[i];\r\n\r\n                if ( cOption == '<' )\r\n                {\r\n                    /* New container div */\r\n                    nNewNode = $('<div/>')[0];\r\n\r\n                    /* Check to see if we should append an id and/or a class name to the container */\r\n                    cNext = aDom[i+1];\r\n                    if ( cNext == \"'\" || cNext == '\"' )\r\n                    {\r\n                        sAttr = \"\";\r\n                        j = 2;\r\n                        while ( aDom[i+j] != cNext )\r\n                        {\r\n                            sAttr += aDom[i+j];\r\n                            j++;\r\n                        }\r\n\r\n                        /* Replace jQuery UI constants @todo depreciated */\r\n                        if ( sAttr == \"H\" )\r\n                        {\r\n                            sAttr = classes.sJUIHeader;\r\n                        }\r\n                        else if ( sAttr == \"F\" )\r\n                        {\r\n                            sAttr = classes.sJUIFooter;\r\n                        }\r\n\r\n                        /* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\r\n                         * breaks the string into parts and applies them as needed\r\n                         */\r\n                        if ( sAttr.indexOf('.') != -1 )\r\n                        {\r\n                            var aSplit = sAttr.split('.');\r\n                            nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);\r\n                            nNewNode.className = aSplit[1];\r\n                        }\r\n                        else if ( sAttr.charAt(0) == \"#\" )\r\n                        {\r\n                            nNewNode.id = sAttr.substr(1, sAttr.length-1);\r\n                        }\r\n                        else\r\n                        {\r\n                            nNewNode.className = sAttr;\r\n                        }\r\n\r\n                        i += j; /* Move along the position array */\r\n                    }\r\n\r\n                    insert.append( nNewNode );\r\n                    insert = $(nNewNode);\r\n                }\r\n                else if ( cOption == '>' )\r\n                {\r\n                    /* End container div */\r\n                    insert = insert.parent();\r\n                }\r\n                // @todo Move options into their own plugins?\r\n                else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )\r\n                {\r\n                    /* Length */\r\n                    featureNode = _fnFeatureHtmlLength( oSettings );\r\n                }\r\n                else if ( cOption == 'f' && features.bFilter )\r\n                {\r\n                    /* Filter */\r\n                    featureNode = _fnFeatureHtmlFilter( oSettings );\r\n                }\r\n                else if ( cOption == 'r' && features.bProcessing )\r\n                {\r\n                    /* pRocessing */\r\n                    featureNode = _fnFeatureHtmlProcessing( oSettings );\r\n                }\r\n                else if ( cOption == 't' )\r\n                {\r\n                    /* Table */\r\n                    featureNode = _fnFeatureHtmlTable( oSettings );\r\n                }\r\n                else if ( cOption ==  'i' && features.bInfo )\r\n                {\r\n                    /* Info */\r\n                    featureNode = _fnFeatureHtmlInfo( oSettings );\r\n                }\r\n                else if ( cOption == 'p' && features.bPaginate )\r\n                {\r\n                    /* Pagination */\r\n                    featureNode = _fnFeatureHtmlPaginate( oSettings );\r\n                }\r\n                else if ( DataTable.ext.feature.length !== 0 )\r\n                {\r\n                    /* Plug-in features */\r\n                    var aoFeatures = DataTable.ext.feature;\r\n                    for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )\r\n                    {\r\n                        if ( cOption == aoFeatures[k].cFeature )\r\n                        {\r\n                            featureNode = aoFeatures[k].fnInit( oSettings );\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /* Add to the 2D features array */\r\n                if ( featureNode )\r\n                {\r\n                    var aanFeatures = oSettings.aanFeatures;\r\n\r\n                    if ( ! aanFeatures[cOption] )\r\n                    {\r\n                        aanFeatures[cOption] = [];\r\n                    }\r\n\r\n                    aanFeatures[cOption].push( featureNode );\r\n                    insert.append( featureNode );\r\n                }\r\n            }\r\n\r\n            /* Built our DOM structure - replace the holding div with what we want */\r\n            holding.replaceWith( insert );\r\n        }\r\n\r\n\r\n        /**\r\n         * Use the DOM source to create up an array of header cells. The idea here is to\r\n         * create a layout grid (array) of rows x columns, which contains a reference\r\n         * to the cell that that point in the grid (regardless of col/rowspan), such that\r\n         * any column / row could be removed and the new grid constructed\r\n         *  @param array {object} aLayout Array to store the calculated layout in\r\n         *  @param {node} nThead The header/footer element for the table\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnDetectHeader ( aLayout, nThead )\r\n        {\r\n            var nTrs = $(nThead).children('tr');\r\n            var nTr, nCell;\r\n            var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;\r\n            var bUnique;\r\n            var fnShiftCol = function ( a, i, j ) {\r\n                var k = a[i];\r\n                while ( k[j] ) {\r\n                    j++;\r\n                }\r\n                return j;\r\n            };\r\n\r\n            aLayout.splice( 0, aLayout.length );\r\n\r\n            /* We know how many rows there are in the layout - so prep it */\r\n            for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\r\n            {\r\n                aLayout.push( [] );\r\n            }\r\n\r\n            /* Calculate a layout array */\r\n            for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\r\n            {\r\n                nTr = nTrs[i];\r\n                iColumn = 0;\r\n\r\n                /* For every cell in the row... */\r\n                nCell = nTr.firstChild;\r\n                while ( nCell ) {\r\n                    if ( nCell.nodeName.toUpperCase() == \"TD\" ||\r\n                        nCell.nodeName.toUpperCase() == \"TH\" )\r\n                    {\r\n                        /* Get the col and rowspan attributes from the DOM and sanitise them */\r\n                        iColspan = nCell.getAttribute('colspan') * 1;\r\n                        iRowspan = nCell.getAttribute('rowspan') * 1;\r\n                        iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;\r\n                        iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;\r\n\r\n                        /* There might be colspan cells already in this row, so shift our target\r\n                         * accordingly\r\n                         */\r\n                        iColShifted = fnShiftCol( aLayout, i, iColumn );\r\n\r\n                        /* Cache calculation for unique columns */\r\n                        bUnique = iColspan === 1 ? true : false;\r\n\r\n                        /* If there is col / rowspan, copy the information into the layout grid */\r\n                        for ( l=0 ; l<iColspan ; l++ )\r\n                        {\r\n                            for ( k=0 ; k<iRowspan ; k++ )\r\n                            {\r\n                                aLayout[i+k][iColShifted+l] = {\r\n                                    \"cell\": nCell,\r\n                                    \"unique\": bUnique\r\n                                };\r\n                                aLayout[i+k].nTr = nTr;\r\n                            }\r\n                        }\r\n                    }\r\n                    nCell = nCell.nextSibling;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Get an array of unique th elements, one for each column\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {node} nHeader automatically detect the layout from this node - optional\r\n         *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\r\n         *  @returns array {node} aReturn list of unique th's\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetUniqueThs ( oSettings, nHeader, aLayout )\r\n        {\r\n            var aReturn = [];\r\n            if ( !aLayout )\r\n            {\r\n                aLayout = oSettings.aoHeader;\r\n                if ( nHeader )\r\n                {\r\n                    aLayout = [];\r\n                    _fnDetectHeader( aLayout, nHeader );\r\n                }\r\n            }\r\n\r\n            for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )\r\n            {\r\n                for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )\r\n                {\r\n                    if ( aLayout[i][j].unique &&\r\n                        (!aReturn[j] || !oSettings.bSortCellsTop) )\r\n                    {\r\n                        aReturn[j] = aLayout[i][j].cell;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return aReturn;\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Create an Ajax call based on the table's settings, taking into account that\r\n         * parameters can have multiple forms, and backwards compatibility.\r\n         *\r\n         * @param {object} oSettings dataTables settings object\r\n         * @param {array} data Data to send to the server, required by\r\n         *     DataTables - may be augmented by developer callbacks\r\n         * @param {function} fn Callback function to run when data is obtained\r\n         */\r\n        function _fnBuildAjax( oSettings, data, fn )\r\n        {\r\n            // Compatibility with 1.9-, allow fnServerData and event to manipulate\r\n            _fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );\r\n\r\n            // Convert to object based for 1.10+ if using the old array scheme which can\r\n            // come from server-side processing or serverParams\r\n            if ( data && $.isArray(data) ) {\r\n                var tmp = {};\r\n                var rbracket = /(.*?)\\[\\]$/;\r\n\r\n                $.each( data, function (key, val) {\r\n                    var match = val.name.match(rbracket);\r\n\r\n                    if ( match ) {\r\n                        // Support for arrays\r\n                        var name = match[0];\r\n\r\n                        if ( ! tmp[ name ] ) {\r\n                            tmp[ name ] = [];\r\n                        }\r\n                        tmp[ name ].push( val.value );\r\n                    }\r\n                    else {\r\n                        tmp[val.name] = val.value;\r\n                    }\r\n                } );\r\n                data = tmp;\r\n            }\r\n\r\n            var ajaxData;\r\n            var ajax = oSettings.ajax;\r\n            var instance = oSettings.oInstance;\r\n\r\n            if ( $.isPlainObject( ajax ) && ajax.data )\r\n            {\r\n                ajaxData = ajax.data;\r\n\r\n                var newData = $.isFunction( ajaxData ) ?\r\n                    ajaxData( data ) :  // fn can manipulate data or return an object\r\n                    ajaxData;           // object or array to merge\r\n\r\n                // If the function returned an object, use that alone\r\n                data = $.isFunction( ajaxData ) && newData ?\r\n                    newData :\r\n                    $.extend( true, data, newData );\r\n\r\n                // Remove the data property as we've resolved it already and don't want\r\n                // jQuery to do it again (it is restored at the end of the function)\r\n                delete ajax.data;\r\n            }\r\n\r\n            var baseAjax = {\r\n                \"data\": data,\r\n                \"success\": function (json) {\r\n                    var error = json.error || json.sError;\r\n                    if ( error ) {\r\n                        oSettings.oApi._fnLog( oSettings, 0, error );\r\n                    }\r\n\r\n                    oSettings.json = json;\r\n                    _fnCallbackFire( oSettings, null, 'xhr', [oSettings, json] );\r\n                    fn( json );\r\n                },\r\n                \"dataType\": \"json\",\r\n                \"cache\": false,\r\n                \"type\": oSettings.sServerMethod,\r\n                \"error\": function (xhr, error, thrown) {\r\n                    var log = oSettings.oApi._fnLog;\r\n\r\n                    if ( error == \"parsererror\" ) {\r\n                        log( oSettings, 0, 'Invalid JSON response', 1 );\r\n                    }\r\n                    else if ( xhr.readyState === 4 ) {\r\n                        log( oSettings, 0, 'Ajax error', 7 );\r\n                    }\r\n\r\n                    _fnProcessingDisplay( oSettings, false );\r\n                }\r\n            };\r\n\r\n            // Store the data submitted for the API\r\n            oSettings.oAjaxData = data;\r\n\r\n            // Allow plug-ins and external processes to modify the data\r\n            _fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );\r\n\r\n            if ( oSettings.fnServerData )\r\n            {\r\n                // DataTables 1.9- compatibility\r\n                oSettings.fnServerData.call( instance,\r\n                    oSettings.sAjaxSource,\r\n                    $.map( data, function (val, key) { // Need to convert back to 1.9 trad format\r\n                        return { name: key, value: val };\r\n                    } ),\r\n                    fn,\r\n                    oSettings\r\n                );\r\n            }\r\n            else if ( oSettings.sAjaxSource || typeof ajax === 'string' )\r\n            {\r\n                // DataTables 1.9- compatibility\r\n                oSettings.jqXHR = $.ajax( $.extend( baseAjax, {\r\n                    url: ajax || oSettings.sAjaxSource\r\n                } ) );\r\n            }\r\n            else if ( $.isFunction( ajax ) )\r\n            {\r\n                // Is a function - let the caller define what needs to be done\r\n                oSettings.jqXHR = ajax.call( instance, data, fn, oSettings );\r\n            }\r\n            else\r\n            {\r\n                // Object to extend the base settings\r\n                oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );\r\n\r\n                // Restore for next time around\r\n                ajax.data = ajaxData;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Update the table using an Ajax call\r\n         *  @param {object} settings dataTables settings object\r\n         *  @returns {boolean} Block the table drawing or not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAjaxUpdate( settings )\r\n        {\r\n            if ( settings.bAjaxDataGet ) {\r\n                settings.iDraw++;\r\n                _fnProcessingDisplay( settings, true );\r\n\r\n                _fnBuildAjax(\r\n                    settings,\r\n                    _fnAjaxParameters( settings ),\r\n                    function(json) {\r\n                        _fnAjaxUpdateDraw( settings, json );\r\n                    }\r\n                );\r\n\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n\r\n        /**\r\n         * Build up the parameters in an object needed for a server-side processing\r\n         * request. Note that this is basically done twice, is different ways - a modern\r\n         * method which is used by default in DataTables 1.10 which uses objects and\r\n         * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\r\n         * the sAjaxSource option is used in the initialisation, or the legacyAjax\r\n         * option is set.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns {bool} block the table drawing or not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAjaxParameters( settings )\r\n        {\r\n            var\r\n                columns = settings.aoColumns,\r\n                columnCount = columns.length,\r\n                features = settings.oFeatures,\r\n                preSearch = settings.oPreviousSearch,\r\n                preColSearch = settings.aoPreSearchCols,\r\n                i, data = [], dataProp, column, columnSearch,\r\n                sort = _fnSortFlatten( settings ),\r\n                displayStart = settings._iDisplayStart,\r\n                displayLength = features.bPaginate !== false ?\r\n                    settings._iDisplayLength :\r\n                    -1;\r\n\r\n            var param = function ( name, value ) {\r\n                data.push( { 'name': name, 'value': value } );\r\n            };\r\n\r\n            // DataTables 1.9- compatible method\r\n            param( 'sEcho',          settings.iDraw );\r\n            param( 'iColumns',       columnCount );\r\n            param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );\r\n            param( 'iDisplayStart',  displayStart );\r\n            param( 'iDisplayLength', displayLength );\r\n\r\n            // DataTables 1.10+ method\r\n            var d = {\r\n                draw:    settings.iDraw,\r\n                columns: [],\r\n                order:   [],\r\n                start:   displayStart,\r\n                length:  displayLength,\r\n                search:  {\r\n                    value: preSearch.sSearch,\r\n                    regex: preSearch.bRegex\r\n                }\r\n            };\r\n\r\n            for ( i=0 ; i<columnCount ; i++ ) {\r\n                column = columns[i];\r\n                columnSearch = preColSearch[i];\r\n                dataProp = typeof column.mData==\"function\" ? 'function' : column.mData ;\r\n\r\n                d.columns.push( {\r\n                    data:       dataProp,\r\n                    name:       column.sName,\r\n                    searchable: column.bSearchable,\r\n                    orderable:  column.bSortable,\r\n                    search:     {\r\n                        value: columnSearch.sSearch,\r\n                        regex: columnSearch.bRegex\r\n                    }\r\n                } );\r\n\r\n                param( \"mDataProp_\"+i, dataProp );\r\n\r\n                if ( features.bFilter ) {\r\n                    param( 'sSearch_'+i,     columnSearch.sSearch );\r\n                    param( 'bRegex_'+i,      columnSearch.bRegex );\r\n                    param( 'bSearchable_'+i, column.bSearchable );\r\n                }\r\n\r\n                if ( features.bSort ) {\r\n                    param( 'bSortable_'+i, column.bSortable );\r\n                }\r\n            }\r\n\r\n            if ( features.bFilter ) {\r\n                param( 'sSearch', preSearch.sSearch );\r\n                param( 'bRegex', preSearch.bRegex );\r\n            }\r\n\r\n            if ( features.bSort ) {\r\n                $.each( sort, function ( i, val ) {\r\n                    d.order.push( { column: val.col, dir: val.dir } );\r\n\r\n                    param( 'iSortCol_'+i, val.col );\r\n                    param( 'sSortDir_'+i, val.dir );\r\n                } );\r\n\r\n                param( 'iSortingCols', sort.length );\r\n            }\r\n\r\n            // If the legacy.ajax parameter is null, then we automatically decide which\r\n            // form to use, based on sAjaxSource\r\n            var legacy = DataTable.ext.legacy.ajax;\r\n            if ( legacy === null ) {\r\n                return settings.sAjaxSource ? data : d;\r\n            }\r\n\r\n            // Otherwise, if legacy has been specified then we use that to decide on the\r\n            // form\r\n            return legacy ? data : d;\r\n        }\r\n\r\n\r\n        /**\r\n         * Data the data from the server (nuking the old) and redraw the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {object} json json data return from the server.\r\n         *  @param {string} json.sEcho Tracking flag for DataTables to match requests\r\n         *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\r\n         *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\r\n         *  @param {array} json.aaData The data to display on this page\r\n         *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnAjaxUpdateDraw ( settings, json )\r\n        {\r\n            // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\r\n            // Support both\r\n            var compat = function ( old, modern ) {\r\n                return json[old] !== undefined ? json[old] : json[modern];\r\n            };\r\n\r\n            var draw            = compat( 'sEcho',                'draw' );\r\n            var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );\r\n            var rocordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );\r\n\r\n            if ( draw ) {\r\n                // Protect against out of sequence returns\r\n                if ( draw*1 < settings.iDraw ) {\r\n                    return;\r\n                }\r\n                settings.iDraw = draw * 1;\r\n            }\r\n\r\n            _fnClearTable( settings );\r\n            settings._iRecordsTotal   = parseInt(recordsTotal, 10);\r\n            settings._iRecordsDisplay = parseInt(rocordsFiltered, 10);\r\n\r\n            var data = _fnAjaxDataSrc( settings, json );\r\n            for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                _fnAddData( settings, data[i] );\r\n            }\r\n            settings.aiDisplay = settings.aiDisplayMaster.slice();\r\n\r\n            settings.bAjaxDataGet = false;\r\n            _fnDraw( settings );\r\n\r\n            if ( ! settings._bInitComplete ) {\r\n                _fnInitComplete( settings, json );\r\n            }\r\n\r\n            settings.bAjaxDataGet = true;\r\n            _fnProcessingDisplay( settings, false );\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the data from the JSON data source to use for drawing a table. Using\r\n         * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\r\n         * source object, or from a processing function.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param  {object} json Data source object / array from the server\r\n         *  @return {array} Array of data to use\r\n         */\r\n        function _fnAjaxDataSrc ( oSettings, json )\r\n        {\r\n            var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?\r\n                oSettings.ajax.dataSrc :\r\n                oSettings.sAjaxDataProp; // Compatibility with 1.9-.\r\n\r\n            // Compatibility with 1.9-. In order to read from aaData, check if the\r\n            // default has been changed, if not, check for aaData\r\n            if ( dataSrc === 'data' ) {\r\n                return json.aaData || json[dataSrc];\r\n            }\r\n\r\n            return dataSrc !== \"\" ?\r\n                _fnGetObjectDataFn( dataSrc )( json ) :\r\n                json;\r\n        }\r\n\r\n\r\n        /**\r\n         * Generate the node required for filtering text\r\n         *  @returns {node} Filter control element\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlFilter ( settings )\r\n        {\r\n            var classes = settings.oClasses;\r\n            var tableId = settings.sTableId;\r\n            var language = settings.oLanguage;\r\n            var previousSearch = settings.oPreviousSearch;\r\n            var features = settings.aanFeatures;\r\n            var input = '<input type=\"search\" class=\"'+classes.sFilterInput+'\"/>';\r\n\r\n            var str = language.sSearch;\r\n            str = str.match(/_INPUT_/) ?\r\n                str.replace('_INPUT_', input) :\r\n            str+input;\r\n\r\n            var filter = $('<div/>', {\r\n                'id': ! features.f ? tableId+'_filter' : null,\r\n                'class': classes.sFilter\r\n            } )\r\n                .append( $('<label/>' ).append( str ) );\r\n\r\n            var searchFn = function() {\r\n                /* Update all other filter input elements for the new display */\r\n                var n = features.f;\r\n                var val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\r\n\r\n                /* Now do the filter */\r\n                if ( val != previousSearch.sSearch ) {\r\n                    _fnFilterComplete( settings, {\r\n                        \"sSearch\": val,\r\n                        \"bRegex\": previousSearch.bRegex,\r\n                        \"bSmart\": previousSearch.bSmart ,\r\n                        \"bCaseInsensitive\": previousSearch.bCaseInsensitive\r\n                    } );\r\n\r\n                    // Need to redraw, without resorting\r\n                    settings._iDisplayStart = 0;\r\n                    _fnDraw( settings );\r\n                }\r\n            };\r\n            var jqFilter = $('input', filter)\r\n                .val( previousSearch.sSearch )\r\n                .attr( 'placeholder', language.sSearchPlaceholder )\r\n                .bind(\r\n                'keyup.DT search.DT input.DT paste.DT cut.DT',\r\n                _fnDataSource( settings ) === 'ssp' ?\r\n                    _fnThrottle( searchFn, 400 ):\r\n                    searchFn\r\n            )\r\n                .bind( 'keypress.DT', function(e) {\r\n                    /* Prevent form submission */\r\n                    if ( e.keyCode == 13 ) {\r\n                        return false;\r\n                    }\r\n                } )\r\n                .attr('aria-controls', tableId);\r\n\r\n            // Update the input elements whenever the table is filtered\r\n            $(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {\r\n                if ( settings === s ) {\r\n                    // IE9 throws an 'unknown error' if document.activeElement is used\r\n                    // inside an iframe or frame...\r\n                    try {\r\n                        if ( jqFilter[0] !== document.activeElement ) {\r\n                            jqFilter.val( previousSearch.sSearch );\r\n                        }\r\n                    }\r\n                    catch ( e ) {}\r\n                }\r\n            } );\r\n\r\n            return filter[0];\r\n        }\r\n\r\n\r\n        /**\r\n         * Filter the table using both the global filter and column based filtering\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {object} oSearch search information\r\n         *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFilterComplete ( oSettings, oInput, iForce )\r\n        {\r\n            var oPrevSearch = oSettings.oPreviousSearch;\r\n            var aoPrevSearch = oSettings.aoPreSearchCols;\r\n            var fnSaveFilter = function ( oFilter ) {\r\n                /* Save the filtering values */\r\n                oPrevSearch.sSearch = oFilter.sSearch;\r\n                oPrevSearch.bRegex = oFilter.bRegex;\r\n                oPrevSearch.bSmart = oFilter.bSmart;\r\n                oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\r\n            };\r\n            var fnRegex = function ( o ) {\r\n                // Backwards compatibility with the bEscapeRegex option\r\n                return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\r\n            };\r\n\r\n            // Resolve any column types that are unknown due to addition or invalidation\r\n            // @todo As per sort - can this be moved into an event handler?\r\n            _fnColumnTypes( oSettings );\r\n\r\n            /* In server-side processing all filtering is done by the server, so no point hanging around here */\r\n            if ( _fnDataSource( oSettings ) != 'ssp' )\r\n            {\r\n                /* Global filter */\r\n                _fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );\r\n                fnSaveFilter( oInput );\r\n\r\n                /* Now do the individual column filter */\r\n                for ( var i=0 ; i<aoPrevSearch.length ; i++ )\r\n                {\r\n                    _fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),\r\n                        aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );\r\n                }\r\n\r\n                /* Custom filtering */\r\n                _fnFilterCustom( oSettings );\r\n            }\r\n            else\r\n            {\r\n                fnSaveFilter( oInput );\r\n            }\r\n\r\n            /* Tell the draw function we have been filtering */\r\n            oSettings.bFiltered = true;\r\n            _fnCallbackFire( oSettings, null, 'search', [oSettings] );\r\n        }\r\n\r\n\r\n        /**\r\n         * Apply custom filtering functions\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFilterCustom( settings )\r\n        {\r\n            var filters = DataTable.ext.search;\r\n            var displayRows = settings.aiDisplay;\r\n            var row, rowIdx;\r\n\r\n            for ( var i=0, ien=filters.length ; i<ien ; i++ ) {\r\n                var rows = [];\r\n\r\n                // Loop over each row and see if it should be included\r\n                for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {\r\n                    rowIdx = displayRows[ j ];\r\n                    row = settings.aoData[ rowIdx ];\r\n\r\n                    if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {\r\n                        rows.push( rowIdx );\r\n                    }\r\n                }\r\n\r\n                // So the array reference doesn't break set the results into the\r\n                // existing array\r\n                displayRows.length = 0;\r\n                displayRows.push.apply( displayRows, rows );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Filter the table on a per-column basis\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {string} sInput string to filter on\r\n         *  @param {int} iColumn column to filter\r\n         *  @param {bool} bRegex treat search string as a regular expression or not\r\n         *  @param {bool} bSmart use smart filtering or not\r\n         *  @param {bool} bCaseInsensitive Do case insenstive matching or not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )\r\n        {\r\n            if ( searchStr === '' ) {\r\n                return;\r\n            }\r\n\r\n            var data;\r\n            var display = settings.aiDisplay;\r\n            var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );\r\n\r\n            for ( var i=display.length-1 ; i>=0 ; i-- ) {\r\n                data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];\r\n\r\n                if ( ! rpSearch.test( data ) ) {\r\n                    display.splice( i, 1 );\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Filter the data table based on user input and draw the table\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {string} input string to filter on\r\n         *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\r\n         *  @param {bool} regex treat as a regular expression or not\r\n         *  @param {bool} smart perform smart filtering or not\r\n         *  @param {bool} caseInsensitive Do case insenstive matching or not\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFilter( settings, input, force, regex, smart, caseInsensitive )\r\n        {\r\n            var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );\r\n            var prevSearch = settings.oPreviousSearch.sSearch;\r\n            var displayMaster = settings.aiDisplayMaster;\r\n            var display, invalidated, i;\r\n\r\n            // Need to take account of custom filtering functions - always filter\r\n            if ( DataTable.ext.search.length !== 0 ) {\r\n                force = true;\r\n            }\r\n\r\n            // Check if any of the rows were invalidated\r\n            invalidated = _fnFilterData( settings );\r\n\r\n            // If the input is blank - we just want the full data set\r\n            if ( input.length <= 0 ) {\r\n                settings.aiDisplay = displayMaster.slice();\r\n            }\r\n            else {\r\n                // New search - start from the master array\r\n                if ( invalidated ||\r\n                    force ||\r\n                    prevSearch.length > input.length ||\r\n                    input.indexOf(prevSearch) !== 0 ||\r\n                    settings.bSorted // On resort, the display master needs to be\r\n                                     // re-filtered since indexes will have changed\r\n                ) {\r\n                    settings.aiDisplay = displayMaster.slice();\r\n                }\r\n\r\n                // Search the display array\r\n                display = settings.aiDisplay;\r\n\r\n                for ( i=display.length-1 ; i>=0 ; i-- ) {\r\n                    if ( ! rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {\r\n                        display.splice( i, 1 );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Build a regular expression object suitable for searching a table\r\n         *  @param {string} sSearch string to search for\r\n         *  @param {bool} bRegex treat as a regular expression or not\r\n         *  @param {bool} bSmart perform smart filtering or not\r\n         *  @param {bool} bCaseInsensitive Do case insensitive matching or not\r\n         *  @returns {RegExp} constructed object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )\r\n        {\r\n            search = regex ?\r\n                search :\r\n                _fnEscapeRegex( search );\r\n\r\n            if ( smart ) {\r\n                /* For smart filtering we want to allow the search to work regardless of\r\n                 * word order. We also want double quoted text to be preserved, so word\r\n                 * order is important - a la google. So this is what we want to\r\n                 * generate:\r\n                 * \r\n                 * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\r\n                 */\r\n                var a = $.map( search.match( /\"[^\"]+\"|[^ ]+/g ) || '', function ( word ) {\r\n                    return word.charAt(0) === '\"' ?\r\n                        word.match( /^\"(.*)\"$/ )[1] :\r\n                        word;\r\n                } );\r\n\r\n                search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';\r\n            }\r\n\r\n            return new RegExp( search, caseInsensitive ? 'i' : '' );\r\n        }\r\n\r\n\r\n        /**\r\n         * scape a string such that it can be used in a regular expression\r\n         *  @param {string} sVal string to escape\r\n         *  @returns {string} escaped string\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnEscapeRegex ( sVal )\r\n        {\r\n            return sVal.replace( _re_escape_regex, '\\\\$1' );\r\n        }\r\n\r\n\r\n\r\n        var __filter_div = $('<div>')[0];\r\n        var __filter_div_textContent = __filter_div.textContent !== undefined;\r\n\r\n        // Update the filtering data for each row if needed (by invalidation or first run)\r\n        function _fnFilterData ( settings )\r\n        {\r\n            var columns = settings.aoColumns;\r\n            var column;\r\n            var i, j, ien, jen, filterData, cellData, row;\r\n            var fomatters = DataTable.ext.type.search;\r\n            var wasInvalidated = false;\r\n\r\n            for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n                row = settings.aoData[i];\r\n\r\n                if ( ! row._aFilterData ) {\r\n                    filterData = [];\r\n\r\n                    for ( j=0, jen=columns.length ; j<jen ; j++ ) {\r\n                        column = columns[j];\r\n\r\n                        if ( column.bSearchable ) {\r\n                            cellData = _fnGetCellData( settings, i, j, 'filter' );\r\n\r\n                            if ( fomatters[ column.sType ] ) {\r\n                                cellData = fomatters[ column.sType ]( cellData );\r\n                            }\r\n\r\n                            // Search in DataTables 1.10 is string based. In 1.11 this\r\n                            // should be altered to also allow strict type checking.\r\n                            if ( cellData === null ) {\r\n                                cellData = '';\r\n                            }\r\n\r\n                            if ( typeof cellData !== 'string' && cellData.toString ) {\r\n                                cellData = cellData.toString();\r\n                            }\r\n                        }\r\n                        else {\r\n                            cellData = '';\r\n                        }\r\n\r\n                        // If it looks like there is an HTML entity in the string,\r\n                        // attempt to decode it so sorting works as expected. Note that\r\n                        // we could use a single line of jQuery to do this, but the DOM\r\n                        // method used here is much faster http://jsperf.com/html-decode\r\n                        if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {\r\n                            __filter_div.innerHTML = cellData;\r\n                            cellData = __filter_div_textContent ?\r\n                                __filter_div.textContent :\r\n                                __filter_div.innerText;\r\n                        }\r\n\r\n                        if ( cellData.replace ) {\r\n                            cellData = cellData.replace(/[\\r\\n]/g, '');\r\n                        }\r\n\r\n                        filterData.push( cellData );\r\n                    }\r\n\r\n                    row._aFilterData = filterData;\r\n                    row._sFilterRow = filterData.join('  ');\r\n                    wasInvalidated = true;\r\n                }\r\n            }\r\n\r\n            return wasInvalidated;\r\n        }\r\n\r\n\r\n        /**\r\n         * Convert from the internal Hungarian notation to camelCase for external\r\n         * interaction\r\n         *  @param {object} obj Object to convert\r\n         *  @returns {object} Inverted object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSearchToCamel ( obj )\r\n        {\r\n            return {\r\n                search:          obj.sSearch,\r\n                smart:           obj.bSmart,\r\n                regex:           obj.bRegex,\r\n                caseInsensitive: obj.bCaseInsensitive\r\n            };\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Convert from camelCase notation to the internal Hungarian. We could use the\r\n         * Hungarian convert function here, but this is cleaner\r\n         *  @param {object} obj Object to convert\r\n         *  @returns {object} Inverted object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSearchToHung ( obj )\r\n        {\r\n            return {\r\n                sSearch:          obj.search,\r\n                bSmart:           obj.smart,\r\n                bRegex:           obj.regex,\r\n                bCaseInsensitive: obj.caseInsensitive\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Generate the node required for the info display\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns {node} Information element\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlInfo ( settings )\r\n        {\r\n            var\r\n                tid = settings.sTableId,\r\n                nodes = settings.aanFeatures.i,\r\n                n = $('<div/>', {\r\n                    'class': settings.oClasses.sInfo,\r\n                    'id': ! nodes ? tid+'_info' : null\r\n                } );\r\n\r\n            if ( ! nodes ) {\r\n                // Update display on each draw\r\n                settings.aoDrawCallback.push( {\r\n                    \"fn\": _fnUpdateInfo,\r\n                    \"sName\": \"information\"\r\n                } );\r\n\r\n                n\r\n                    .attr( 'role', 'status' )\r\n                    .attr( 'aria-live', 'polite' );\r\n\r\n                // Table is described by our info div\r\n                $(settings.nTable).attr( 'aria-describedby', tid+'_info' );\r\n            }\r\n\r\n            return n[0];\r\n        }\r\n\r\n\r\n        /**\r\n         * Update the information elements in the display\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnUpdateInfo ( settings )\r\n        {\r\n            /* Show information about the table */\r\n            var nodes = settings.aanFeatures.i;\r\n            if ( nodes.length === 0 ) {\r\n                return;\r\n            }\r\n\r\n            var\r\n                lang  = settings.oLanguage,\r\n                start = settings._iDisplayStart+1,\r\n                end   = settings.fnDisplayEnd(),\r\n                max   = settings.fnRecordsTotal(),\r\n                total = settings.fnRecordsDisplay(),\r\n                out   = total ?\r\n                    lang.sInfo :\r\n                    lang.sInfoEmpty;\r\n\r\n            if ( total !== max ) {\r\n                /* Record set after filtering */\r\n                out += ' ' + lang.sInfoFiltered;\r\n            }\r\n\r\n            // Convert the macros\r\n            out += lang.sInfoPostFix;\r\n            out = _fnInfoMacros( settings, out );\r\n\r\n            var callback = lang.fnInfoCallback;\r\n            if ( callback !== null ) {\r\n                out = callback.call( settings.oInstance,\r\n                    settings, start, end, max, total, out\r\n                );\r\n            }\r\n\r\n            $(nodes).html( out );\r\n        }\r\n\r\n\r\n        function _fnInfoMacros ( settings, str )\r\n        {\r\n            // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\r\n            // internally\r\n            var\r\n                formatter  = settings.fnFormatNumber,\r\n                start      = settings._iDisplayStart+1,\r\n                len        = settings._iDisplayLength,\r\n                vis        = settings.fnRecordsDisplay(),\r\n                all        = len === -1;\r\n\r\n            return str.\r\n                replace(/_START_/g, formatter.call( settings, start ) ).\r\n                replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).\r\n                replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).\r\n                replace(/_TOTAL_/g, formatter.call( settings, vis ) ).\r\n                replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).\r\n                replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Draw the table for the first time, adding all required features\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnInitialise ( settings )\r\n        {\r\n            var i, iLen, iAjaxStart=settings.iInitDisplayStart;\r\n            var columns = settings.aoColumns, column;\r\n            var features = settings.oFeatures;\r\n\r\n            /* Ensure that the table data is fully initialised */\r\n            if ( ! settings.bInitialised ) {\r\n                setTimeout( function(){ _fnInitialise( settings ); }, 200 );\r\n                return;\r\n            }\r\n\r\n            /* Show the display HTML options */\r\n            _fnAddOptionsHtml( settings );\r\n\r\n            /* Build and draw the header / footer for the table */\r\n            _fnBuildHead( settings );\r\n            _fnDrawHead( settings, settings.aoHeader );\r\n            _fnDrawHead( settings, settings.aoFooter );\r\n\r\n            /* Okay to show that something is going on now */\r\n            _fnProcessingDisplay( settings, true );\r\n\r\n            /* Calculate sizes for columns */\r\n            if ( features.bAutoWidth ) {\r\n                _fnCalculateColumnWidths( settings );\r\n            }\r\n\r\n            for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {\r\n                column = columns[i];\r\n\r\n                if ( column.sWidth ) {\r\n                    column.nTh.style.width = _fnStringToCss( column.sWidth );\r\n                }\r\n            }\r\n\r\n            // If there is default sorting required - let's do it. The sort function\r\n            // will do the drawing for us. Otherwise we draw the table regardless of the\r\n            // Ajax source - this allows the table to look initialised for Ajax sourcing\r\n            // data (show 'loading' message possibly)\r\n            _fnReDraw( settings );\r\n\r\n            // Server-side processing init complete is done by _fnAjaxUpdateDraw\r\n            var dataSrc = _fnDataSource( settings );\r\n            if ( dataSrc != 'ssp' ) {\r\n                // if there is an ajax source load the data\r\n                if ( dataSrc == 'ajax' ) {\r\n                    _fnBuildAjax( settings, [], function(json) {\r\n                        var aData = _fnAjaxDataSrc( settings, json );\r\n\r\n                        // Got the data - add it to the table\r\n                        for ( i=0 ; i<aData.length ; i++ ) {\r\n                            _fnAddData( settings, aData[i] );\r\n                        }\r\n\r\n                        // Reset the init display for cookie saving. We've already done\r\n                        // a filter, and therefore cleared it before. So we need to make\r\n                        // it appear 'fresh'\r\n                        settings.iInitDisplayStart = iAjaxStart;\r\n\r\n                        _fnReDraw( settings );\r\n\r\n                        _fnProcessingDisplay( settings, false );\r\n                        _fnInitComplete( settings, json );\r\n                    }, settings );\r\n                }\r\n                else {\r\n                    _fnProcessingDisplay( settings, false );\r\n                    _fnInitComplete( settings );\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Draw the table for the first time, adding all required features\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\r\n         *    with client-side processing (optional)\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnInitComplete ( settings, json )\r\n        {\r\n            settings._bInitComplete = true;\r\n\r\n            // On an Ajax load we now have data and therefore want to apply the column\r\n            // sizing\r\n            if ( json ) {\r\n                _fnAdjustColumnSizing( settings );\r\n            }\r\n\r\n            _fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );\r\n        }\r\n\r\n\r\n        function _fnLengthChange ( settings, val )\r\n        {\r\n            var len = parseInt( val, 10 );\r\n            settings._iDisplayLength = len;\r\n\r\n            _fnLengthOverflow( settings );\r\n\r\n            // Fire length change event\r\n            _fnCallbackFire( settings, null, 'length', [settings, len] );\r\n        }\r\n\r\n\r\n        /**\r\n         * Generate the node required for user display length changing\r\n         *  @param {object} settings dataTables settings object\r\n         *  @returns {node} Display length feature node\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlLength ( settings )\r\n        {\r\n            var\r\n                classes  = settings.oClasses,\r\n                tableId  = settings.sTableId,\r\n                menu     = settings.aLengthMenu,\r\n                d2       = $.isArray( menu[0] ),\r\n                lengths  = d2 ? menu[0] : menu,\r\n                language = d2 ? menu[1] : menu;\r\n\r\n            var select = $('<select/>', {\r\n                'name':          tableId+'_length',\r\n                'aria-controls': tableId,\r\n                'class':         classes.sLengthSelect\r\n            } );\r\n\r\n            for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {\r\n                select[0][ i ] = new Option( language[i], lengths[i] );\r\n            }\r\n\r\n            var div = $('<div><label/></div>').addClass( classes.sLength );\r\n            if ( ! settings.aanFeatures.l ) {\r\n                div[0].id = tableId+'_length';\r\n            }\r\n\r\n            div.children().append(\r\n                settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )\r\n            );\r\n\r\n            // Can't use `select` variable as user might provide their own and the\r\n            // reference is broken by the use of outerHTML\r\n            $('select', div)\r\n                .val( settings._iDisplayLength )\r\n                .bind( 'change.DT', function(e) {\r\n                    _fnLengthChange( settings, $(this).val() );\r\n                    _fnDraw( settings );\r\n                } );\r\n\r\n            // Update node value whenever anything changes the table's length\r\n            $(settings.nTable).bind( 'length.dt.DT', function (e, s, len) {\r\n                if ( settings === s ) {\r\n                    $('select', div).val( len );\r\n                }\r\n            } );\r\n\r\n            return div[0];\r\n        }\r\n\r\n\r\n\r\n        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n         * Note that most of the paging logic is done in\r\n         * DataTable.ext.pager\r\n         */\r\n\r\n        /**\r\n         * Generate the node required for default pagination\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @returns {node} Pagination feature node\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlPaginate ( settings )\r\n        {\r\n            var\r\n                type   = settings.sPaginationType,\r\n                plugin = DataTable.ext.pager[ type ],\r\n                modern = typeof plugin === 'function',\r\n                redraw = function( settings ) {\r\n                    _fnDraw( settings );\r\n                },\r\n                node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],\r\n                features = settings.aanFeatures;\r\n\r\n            if ( ! modern ) {\r\n                plugin.fnInit( settings, node, redraw );\r\n            }\r\n\r\n            /* Add a draw callback for the pagination on first instance, to update the paging display */\r\n            if ( ! features.p )\r\n            {\r\n                node.id = settings.sTableId+'_paginate';\r\n\r\n                settings.aoDrawCallback.push( {\r\n                    \"fn\": function( settings ) {\r\n                        if ( modern ) {\r\n                            var\r\n                                start      = settings._iDisplayStart,\r\n                                len        = settings._iDisplayLength,\r\n                                visRecords = settings.fnRecordsDisplay(),\r\n                                all        = len === -1,\r\n                                page = all ? 0 : Math.ceil( start / len ),\r\n                                pages = all ? 1 : Math.ceil( visRecords / len ),\r\n                                buttons = plugin(page, pages),\r\n                                i, ien;\r\n\r\n                            for ( i=0, ien=features.p.length ; i<ien ; i++ ) {\r\n                                _fnRenderer( settings, 'pageButton' )(\r\n                                    settings, features.p[i], i, buttons, page, pages\r\n                                );\r\n                            }\r\n                        }\r\n                        else {\r\n                            plugin.fnUpdate( settings, redraw );\r\n                        }\r\n                    },\r\n                    \"sName\": \"pagination\"\r\n                } );\r\n            }\r\n\r\n            return node;\r\n        }\r\n\r\n\r\n        /**\r\n         * Alter the display settings to change the page\r\n         *  @param {object} settings DataTables settings object\r\n         *  @param {string|int} action Paging action to take: \"first\", \"previous\",\r\n         *    \"next\" or \"last\" or page number to jump to (integer)\r\n         *  @param [bool] redraw Automatically draw the update or not\r\n         *  @returns {bool} true page has changed, false - no change\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnPageChange ( settings, action, redraw )\r\n        {\r\n            var\r\n                start     = settings._iDisplayStart,\r\n                len       = settings._iDisplayLength,\r\n                records   = settings.fnRecordsDisplay();\r\n\r\n            if ( records === 0 || len === -1 )\r\n            {\r\n                start = 0;\r\n            }\r\n            else if ( typeof action === \"number\" )\r\n            {\r\n                start = action * len;\r\n\r\n                if ( start > records )\r\n                {\r\n                    start = 0;\r\n                }\r\n            }\r\n            else if ( action == \"first\" )\r\n            {\r\n                start = 0;\r\n            }\r\n            else if ( action == \"previous\" )\r\n            {\r\n                start = len >= 0 ?\r\n                start - len :\r\n                    0;\r\n\r\n                if ( start < 0 )\r\n                {\r\n                    start = 0;\r\n                }\r\n            }\r\n            else if ( action == \"next\" )\r\n            {\r\n                if ( start + len < records )\r\n                {\r\n                    start += len;\r\n                }\r\n            }\r\n            else if ( action == \"last\" )\r\n            {\r\n                start = Math.floor( (records-1) / len) * len;\r\n            }\r\n            else\r\n            {\r\n                _fnLog( settings, 0, \"Unknown paging action: \"+action, 5 );\r\n            }\r\n\r\n            var changed = settings._iDisplayStart !== start;\r\n            settings._iDisplayStart = start;\r\n\r\n            if ( changed ) {\r\n                _fnCallbackFire( settings, null, 'page', [settings] );\r\n\r\n                if ( redraw ) {\r\n                    _fnDraw( settings );\r\n                }\r\n            }\r\n\r\n            return changed;\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Generate the node required for the processing node\r\n         *  @param {object} settings dataTables settings object\r\n         *  @returns {node} Processing element\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlProcessing ( settings )\r\n        {\r\n            return $('<div/>', {\r\n                'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,\r\n                'class': settings.oClasses.sProcessing\r\n            } )\r\n                .html( settings.oLanguage.sProcessing )\r\n                .insertBefore( settings.nTable )[0];\r\n        }\r\n\r\n\r\n        /**\r\n         * Display or hide the processing indicator\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {bool} show Show the processing indicator (true) or not (false)\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnProcessingDisplay ( settings, show )\r\n        {\r\n            if ( settings.oFeatures.bProcessing ) {\r\n                $(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );\r\n            }\r\n\r\n            _fnCallbackFire( settings, null, 'processing', [settings, show] );\r\n        }\r\n\r\n        /**\r\n         * Add any control elements for the table - specifically scrolling\r\n         *  @param {object} settings dataTables settings object\r\n         *  @returns {node} Node to add to the DOM\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnFeatureHtmlTable ( settings )\r\n        {\r\n            var table = $(settings.nTable);\r\n\r\n            // Add the ARIA grid role to the table\r\n            table.attr( 'role', 'grid' );\r\n\r\n            // Scrolling from here on in\r\n            var scroll = settings.oScroll;\r\n\r\n            if ( scroll.sX === '' && scroll.sY === '' ) {\r\n                return settings.nTable;\r\n            }\r\n\r\n            var scrollX = scroll.sX;\r\n            var scrollY = scroll.sY;\r\n            var classes = settings.oClasses;\r\n            var caption = table.children('caption');\r\n            var captionSide = caption.length ? caption[0]._captionSide : null;\r\n            var headerClone = $( table[0].cloneNode(false) );\r\n            var footerClone = $( table[0].cloneNode(false) );\r\n            var footer = table.children('tfoot');\r\n            var _div = '<div/>';\r\n            var size = function ( s ) {\r\n                return !s ? null : _fnStringToCss( s );\r\n            };\r\n\r\n            // This is fairly messy, but with x scrolling enabled, if the table has a\r\n            // width attribute, regardless of any width applied using the column width\r\n            // options, the browser will shrink or grow the table as needed to fit into\r\n            // that 100%. That would make the width options useless. So we remove it.\r\n            // This is okay, under the assumption that width:100% is applied to the\r\n            // table in CSS (it is in the default stylesheet) which will set the table\r\n            // width as appropriate (the attribute and css behave differently...)\r\n            if ( scroll.sX && table.attr('width') === '100%' ) {\r\n                table.removeAttr('width');\r\n            }\r\n\r\n            if ( ! footer.length ) {\r\n                footer = null;\r\n            }\r\n\r\n            /*\r\n             * The HTML structure that we want to generate in this function is:\r\n             *  div - scroller\r\n             *    div - scroll head\r\n             *      div - scroll head inner\r\n             *        table - scroll head table\r\n             *          thead - thead\r\n             *    div - scroll body\r\n             *      table - table (master table)\r\n             *        thead - thead clone for sizing\r\n             *        tbody - tbody\r\n             *    div - scroll foot\r\n             *      div - scroll foot inner\r\n             *        table - scroll foot table\r\n             *          tfoot - tfoot\r\n             */\r\n            var scroller = $( _div, { 'class': classes.sScrollWrapper } )\r\n                .append(\r\n                $(_div, { 'class': classes.sScrollHead } )\r\n                    .css( {\r\n                        overflow: 'hidden',\r\n                        position: 'relative',\r\n                        border: 0,\r\n                        width: scrollX ? size(scrollX) : '100%'\r\n                    } )\r\n                    .append(\r\n                    $(_div, { 'class': classes.sScrollHeadInner } )\r\n                        .css( {\r\n                            'box-sizing': 'content-box',\r\n                            width: scroll.sXInner || '100%'\r\n                        } )\r\n                        .append(\r\n                        headerClone\r\n                            .removeAttr('id')\r\n                            .css( 'margin-left', 0 )\r\n                            .append(\r\n                            table.children('thead')\r\n                        )\r\n                    )\r\n                )\r\n                    .append( captionSide === 'top' ? caption : null )\r\n            )\r\n                .append(\r\n                $(_div, { 'class': classes.sScrollBody } )\r\n                    .css( {\r\n                        overflow: 'auto',\r\n                        height: size( scrollY ),\r\n                        width: size( scrollX )\r\n                    } )\r\n                    .append( table )\r\n            );\r\n\r\n            if ( footer ) {\r\n                scroller.append(\r\n                    $(_div, { 'class': classes.sScrollFoot } )\r\n                        .css( {\r\n                            overflow: 'hidden',\r\n                            border: 0,\r\n                            width: scrollX ? size(scrollX) : '100%'\r\n                        } )\r\n                        .append(\r\n                        $(_div, { 'class': classes.sScrollFootInner } )\r\n                            .append(\r\n                            footerClone\r\n                                .removeAttr('id')\r\n                                .css( 'margin-left', 0 )\r\n                                .append(\r\n                                table.children('tfoot')\r\n                            )\r\n                        )\r\n                    )\r\n                        .append( captionSide === 'bottom' ? caption : null )\r\n                );\r\n            }\r\n\r\n            var children = scroller.children();\r\n            var scrollHead = children[0];\r\n            var scrollBody = children[1];\r\n            var scrollFoot = footer ? children[2] : null;\r\n\r\n            // When the body is scrolled, then we also want to scroll the headers\r\n            if ( scrollX ) {\r\n                $(scrollBody).scroll( function (e) {\r\n                    var scrollLeft = this.scrollLeft;\r\n\r\n                    scrollHead.scrollLeft = scrollLeft;\r\n\r\n                    if ( footer ) {\r\n                        scrollFoot.scrollLeft = scrollLeft;\r\n                    }\r\n                } );\r\n            }\r\n\r\n            settings.nScrollHead = scrollHead;\r\n            settings.nScrollBody = scrollBody;\r\n            settings.nScrollFoot = scrollFoot;\r\n\r\n            // On redraw - align columns\r\n            settings.aoDrawCallback.push( {\r\n                \"fn\": _fnScrollDraw,\r\n                \"sName\": \"scrolling\"\r\n            } );\r\n\r\n            return scroller[0];\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Update the header, footer and body tables for resizing - i.e. column\r\n         * alignment.\r\n         *\r\n         * Welcome to the most horrible function DataTables. The process that this\r\n         * function follows is basically:\r\n         *   1. Re-create the table inside the scrolling div\r\n         *   2. Take live measurements from the DOM\r\n         *   3. Apply the measurements to align the columns\r\n         *   4. Clean up\r\n         *\r\n         *  @param {object} settings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnScrollDraw ( settings )\r\n        {\r\n            // Given that this is such a monster function, a lot of variables are use\r\n            // to try and keep the minimised size as small as possible\r\n            var\r\n                scroll         = settings.oScroll,\r\n                scrollX        = scroll.sX,\r\n                scrollXInner   = scroll.sXInner,\r\n                scrollY        = scroll.sY,\r\n                barWidth       = scroll.iBarWidth,\r\n                divHeader      = $(settings.nScrollHead),\r\n                divHeaderStyle = divHeader[0].style,\r\n                divHeaderInner = divHeader.children('div'),\r\n                divHeaderInnerStyle = divHeaderInner[0].style,\r\n                divHeaderTable = divHeaderInner.children('table'),\r\n                divBodyEl      = settings.nScrollBody,\r\n                divBody        = $(divBodyEl),\r\n                divBodyStyle   = divBodyEl.style,\r\n                divFooter      = $(settings.nScrollFoot),\r\n                divFooterInner = divFooter.children('div'),\r\n                divFooterTable = divFooterInner.children('table'),\r\n                header         = $(settings.nTHead),\r\n                table          = $(settings.nTable),\r\n                tableEl        = table[0],\r\n                tableStyle     = tableEl.style,\r\n                footer         = settings.nTFoot ? $(settings.nTFoot) : null,\r\n                browser        = settings.oBrowser,\r\n                ie67           = browser.bScrollOversize,\r\n                headerTrgEls, footerTrgEls,\r\n                headerSrcEls, footerSrcEls,\r\n                headerCopy, footerCopy,\r\n                headerWidths=[], footerWidths=[],\r\n                headerContent=[],\r\n                idx, correction, sanityWidth,\r\n                zeroOut = function(nSizer) {\r\n                    var style = nSizer.style;\r\n                    style.paddingTop = \"0\";\r\n                    style.paddingBottom = \"0\";\r\n                    style.borderTopWidth = \"0\";\r\n                    style.borderBottomWidth = \"0\";\r\n                    style.height = 0;\r\n                };\r\n\r\n            /*\r\n             * 1. Re-create the table inside the scrolling div\r\n             */\r\n\r\n            // Remove the old minimised thead and tfoot elements in the inner table\r\n            table.children('thead, tfoot').remove();\r\n\r\n            // Clone the current header and footer elements and then place it into the inner table\r\n            headerCopy = header.clone().prependTo( table );\r\n            headerTrgEls = header.find('tr'); // original header is in its own table\r\n            headerSrcEls = headerCopy.find('tr');\r\n            headerCopy.find('th, td').removeAttr('tabindex');\r\n\r\n            if ( footer ) {\r\n                footerCopy = footer.clone().prependTo( table );\r\n                footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\r\n                footerSrcEls = footerCopy.find('tr');\r\n            }\r\n\r\n\r\n            /*\r\n             * 2. Take live measurements from the DOM - do not alter the DOM itself!\r\n             */\r\n\r\n            // Remove old sizing and apply the calculated column widths\r\n            // Get the unique column headers in the newly created (cloned) header. We want to apply the\r\n            // calculated sizes to this header\r\n            if ( ! scrollX )\r\n            {\r\n                divBodyStyle.width = '100%';\r\n                divHeader[0].style.width = '100%';\r\n            }\r\n\r\n            $.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {\r\n                idx = _fnVisibleToColumnIndex( settings, i );\r\n                el.style.width = settings.aoColumns[idx].sWidth;\r\n            } );\r\n\r\n            if ( footer ) {\r\n                _fnApplyToChildren( function(n) {\r\n                    n.style.width = \"\";\r\n                }, footerSrcEls );\r\n            }\r\n\r\n            // If scroll collapse is enabled, when we put the headers back into the body for sizing, we\r\n            // will end up forcing the scrollbar to appear, making our measurements wrong for when we\r\n            // then hide it (end of this function), so add the header height to the body scroller.\r\n            if ( scroll.bCollapse && scrollY !== \"\" ) {\r\n                divBodyStyle.height = (divBody[0].offsetHeight + header[0].offsetHeight)+\"px\";\r\n            }\r\n\r\n            // Size the table as a whole\r\n            sanityWidth = table.outerWidth();\r\n            if ( scrollX === \"\" ) {\r\n                // No x scrolling\r\n                tableStyle.width = \"100%\";\r\n\r\n                // IE7 will make the width of the table when 100% include the scrollbar\r\n                // - which is shouldn't. When there is a scrollbar we need to take this\r\n                // into account.\r\n                if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||\r\n                    divBody.css('overflow-y') == \"scroll\")\r\n                ) {\r\n                    tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // x scrolling\r\n                if ( scrollXInner !== \"\" ) {\r\n                    // x scroll inner has been given - use it\r\n                    tableStyle.width = _fnStringToCss(scrollXInner);\r\n                }\r\n                else if ( sanityWidth == divBody.width() && divBody.height() < table.height() ) {\r\n                    // There is y-scrolling - try to take account of the y scroll bar\r\n                    tableStyle.width = _fnStringToCss( sanityWidth-barWidth );\r\n                    if ( table.outerWidth() > sanityWidth-barWidth ) {\r\n                        // Not possible to take account of it\r\n                        tableStyle.width = _fnStringToCss( sanityWidth );\r\n                    }\r\n                }\r\n                else {\r\n                    // When all else fails\r\n                    tableStyle.width = _fnStringToCss( sanityWidth );\r\n                }\r\n            }\r\n\r\n            // Recalculate the sanity width - now that we've applied the required width,\r\n            // before it was a temporary variable. This is required because the column\r\n            // width calculation is done before this table DOM is created.\r\n            sanityWidth = table.outerWidth();\r\n\r\n            // Hidden header should have zero height, so remove padding and borders. Then\r\n            // set the width based on the real headers\r\n\r\n            // Apply all styles in one pass\r\n            _fnApplyToChildren( zeroOut, headerSrcEls );\r\n\r\n            // Read all widths in next pass\r\n            _fnApplyToChildren( function(nSizer) {\r\n                headerContent.push( nSizer.innerHTML );\r\n                headerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\r\n            }, headerSrcEls );\r\n\r\n            // Apply all widths in final pass\r\n            _fnApplyToChildren( function(nToSize, i) {\r\n                nToSize.style.width = headerWidths[i];\r\n            }, headerTrgEls );\r\n\r\n            $(headerSrcEls).height(0);\r\n\r\n            /* Same again with the footer if we have one */\r\n            if ( footer )\r\n            {\r\n                _fnApplyToChildren( zeroOut, footerSrcEls );\r\n\r\n                _fnApplyToChildren( function(nSizer) {\r\n                    footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\r\n                }, footerSrcEls );\r\n\r\n                _fnApplyToChildren( function(nToSize, i) {\r\n                    nToSize.style.width = footerWidths[i];\r\n                }, footerTrgEls );\r\n\r\n                $(footerSrcEls).height(0);\r\n            }\r\n\r\n\r\n            /*\r\n             * 3. Apply the measurements\r\n             */\r\n\r\n            // \"Hide\" the header and footer that we used for the sizing. We need to keep\r\n            // the content of the cell so that the width applied to the header and body\r\n            // both match, but we want to hide it completely. We want to also fix their\r\n            // width to what they currently are\r\n            _fnApplyToChildren( function(nSizer, i) {\r\n                nSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+headerContent[i]+'</div>';\r\n                nSizer.style.width = headerWidths[i];\r\n            }, headerSrcEls );\r\n\r\n            if ( footer )\r\n            {\r\n                _fnApplyToChildren( function(nSizer, i) {\r\n                    nSizer.innerHTML = \"\";\r\n                    nSizer.style.width = footerWidths[i];\r\n                }, footerSrcEls );\r\n            }\r\n\r\n            // Sanity check that the table is of a sensible width. If not then we are going to get\r\n            // misalignment - try to prevent this by not allowing the table to shrink below its min width\r\n            if ( table.outerWidth() < sanityWidth )\r\n            {\r\n                // The min width depends upon if we have a vertical scrollbar visible or not */\r\n                correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||\r\n                divBody.css('overflow-y') == \"scroll\")) ?\r\n                sanityWidth+barWidth :\r\n                    sanityWidth;\r\n\r\n                // IE6/7 are a law unto themselves...\r\n                if ( ie67 && (divBodyEl.scrollHeight >\r\n                    divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")\r\n                ) {\r\n                    tableStyle.width = _fnStringToCss( correction-barWidth );\r\n                }\r\n\r\n                // And give the user a warning that we've stopped the table getting too small\r\n                if ( scrollX === \"\" || scrollXInner !== \"\" ) {\r\n                    _fnLog( settings, 1, 'Possible column misalignment', 6 );\r\n                }\r\n            }\r\n            else\r\n            {\r\n                correction = '100%';\r\n            }\r\n\r\n            // Apply to the container elements\r\n            divBodyStyle.width = _fnStringToCss( correction );\r\n            divHeaderStyle.width = _fnStringToCss( correction );\r\n\r\n            if ( footer ) {\r\n                settings.nScrollFoot.style.width = _fnStringToCss( correction );\r\n            }\r\n\r\n\r\n            /*\r\n             * 4. Clean up\r\n             */\r\n            if ( ! scrollY ) {\r\n                /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\r\n                 * the scrollbar height from the visible display, rather than adding it on. We need to\r\n                 * set the height in order to sort this. Don't want to do it in any other browsers.\r\n                 */\r\n                if ( ie67 ) {\r\n                    divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );\r\n                }\r\n            }\r\n\r\n            if ( scrollY && scroll.bCollapse ) {\r\n                divBodyStyle.height = _fnStringToCss( scrollY );\r\n\r\n                var iExtra = (scrollX && tableEl.offsetWidth > divBodyEl.offsetWidth) ?\r\n                    barWidth :\r\n                    0;\r\n\r\n                if ( tableEl.offsetHeight < divBodyEl.offsetHeight ) {\r\n                    divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+iExtra );\r\n                }\r\n            }\r\n\r\n            /* Finally set the width's of the header and footer tables */\r\n            var iOuterWidth = table.outerWidth();\r\n            divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );\r\n            divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );\r\n\r\n            // Figure out if there are scrollbar present - if so then we need a the header and footer to\r\n            // provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\r\n            var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\r\n            var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );\r\n            divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+\"px\" : \"0px\";\r\n\r\n            if ( footer ) {\r\n                divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );\r\n                divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );\r\n                divFooterInner[0].style[padding] = bScrolling ? barWidth+\"px\" : \"0px\";\r\n            }\r\n\r\n            /* Adjust the position of the header in case we loose the y-scrollbar */\r\n            divBody.scroll();\r\n\r\n            // If sorting or filtering has occurred, jump the scrolling back to the top\r\n            // only if we aren't holding the position\r\n            if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {\r\n                divBodyEl.scrollTop = 0;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Apply a given function to the display child nodes of an element array (typically\r\n         * TD children of TR rows\r\n         *  @param {function} fn Method to apply to the objects\r\n         *  @param array {nodes} an1 List of elements to look through for display children\r\n         *  @param array {nodes} an2 Another list (identical structure to the first) - optional\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnApplyToChildren( fn, an1, an2 )\r\n        {\r\n            var index=0, i=0, iLen=an1.length;\r\n            var nNode1, nNode2;\r\n\r\n            while ( i < iLen ) {\r\n                nNode1 = an1[i].firstChild;\r\n                nNode2 = an2 ? an2[i].firstChild : null;\r\n\r\n                while ( nNode1 ) {\r\n                    if ( nNode1.nodeType === 1 ) {\r\n                        if ( an2 ) {\r\n                            fn( nNode1, nNode2, index );\r\n                        }\r\n                        else {\r\n                            fn( nNode1, index );\r\n                        }\r\n\r\n                        index++;\r\n                    }\r\n\r\n                    nNode1 = nNode1.nextSibling;\r\n                    nNode2 = an2 ? nNode2.nextSibling : null;\r\n                }\r\n\r\n                i++;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        var __re_html_remove = /<.*?>/g;\r\n\r\n\r\n        /**\r\n         * Calculate the width of columns for the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnCalculateColumnWidths ( oSettings )\r\n        {\r\n            var\r\n                table = oSettings.nTable,\r\n                columns = oSettings.aoColumns,\r\n                scroll = oSettings.oScroll,\r\n                scrollY = scroll.sY,\r\n                scrollX = scroll.sX,\r\n                scrollXInner = scroll.sXInner,\r\n                columnCount = columns.length,\r\n                visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),\r\n                headerCells = $('th', oSettings.nTHead),\r\n                tableWidthAttr = table.getAttribute('width'),\r\n                tableContainer = table.parentNode,\r\n                userInputs = false,\r\n                i, column, columnIdx, width, outerWidth;\r\n\r\n            /* Convert any user input sizes into pixel sizes */\r\n            for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                column = columns[ visibleColumns[i] ];\r\n\r\n                if ( column.sWidth !== null ) {\r\n                    column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );\r\n\r\n                    userInputs = true;\r\n                }\r\n            }\r\n\r\n            /* If the number of columns in the DOM equals the number that we have to\r\n             * process in DataTables, then we can use the offsets that are created by\r\n             * the web- browser. No custom sizes can be set in order for this to happen,\r\n             * nor scrolling used\r\n             */\r\n            if ( ! userInputs && ! scrollX && ! scrollY &&\r\n                columnCount == _fnVisbleColumns( oSettings ) &&\r\n                columnCount == headerCells.length\r\n            ) {\r\n                for ( i=0 ; i<columnCount ; i++ ) {\r\n                    columns[i].sWidth = _fnStringToCss( headerCells.eq(i).width() );\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // Otherwise construct a single row table with the widest node in the\r\n                // data, assign any user defined widths, then insert it into the DOM and\r\n                // allow the browser to do all the hard work of calculating table widths\r\n                var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table\r\n                    .empty()\r\n                    .css( 'visibility', 'hidden' )\r\n                    .removeAttr( 'id' )\r\n                    .append( $(oSettings.nTHead).clone( false ) )\r\n                    .append( $(oSettings.nTFoot).clone( false ) )\r\n                    .append( $('<tbody><tr/></tbody>') );\r\n\r\n                // Remove any assigned widths from the footer (from scrolling)\r\n                tmpTable.find('tfoot th, tfoot td').css('width', '');\r\n\r\n                var tr = tmpTable.find( 'tbody tr' );\r\n\r\n                // Apply custom sizing to the cloned header\r\n                headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );\r\n\r\n                for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                    column = columns[ visibleColumns[i] ];\r\n\r\n                    headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?\r\n                        _fnStringToCss( column.sWidthOrig ) :\r\n                        '';\r\n                }\r\n\r\n                // Find the widest cell for each column and put it into the table\r\n                if ( oSettings.aoData.length ) {\r\n                    for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                        columnIdx = visibleColumns[i];\r\n                        column = columns[ columnIdx ];\r\n\r\n                        $( _fnGetWidestNode( oSettings, columnIdx ) )\r\n                            .clone( false )\r\n                            .append( column.sContentPadding )\r\n                            .appendTo( tr );\r\n                    }\r\n                }\r\n\r\n                // Table has been built, attach to the document so we can work with it\r\n                tmpTable.appendTo( tableContainer );\r\n\r\n                // When scrolling (X or Y) we want to set the width of the table as \r\n                // appropriate. However, when not scrolling leave the table width as it\r\n                // is. This results in slightly different, but I think correct behaviour\r\n                if ( scrollX && scrollXInner ) {\r\n                    tmpTable.width( scrollXInner );\r\n                }\r\n                else if ( scrollX ) {\r\n                    tmpTable.css( 'width', 'auto' );\r\n\r\n                    if ( tmpTable.width() < tableContainer.offsetWidth ) {\r\n                        tmpTable.width( tableContainer.offsetWidth );\r\n                    }\r\n                }\r\n                else if ( scrollY ) {\r\n                    tmpTable.width( tableContainer.offsetWidth );\r\n                }\r\n                else if ( tableWidthAttr ) {\r\n                    tmpTable.width( tableWidthAttr );\r\n                }\r\n\r\n                // Take into account the y scrollbar\r\n                _fnScrollingWidthAdjust( oSettings, tmpTable[0] );\r\n\r\n                // Browsers need a bit of a hand when a width is assigned to any columns\r\n                // when x-scrolling as they tend to collapse the table to the min-width,\r\n                // even if we sent the column widths. So we need to keep track of what\r\n                // the table width should be by summing the user given values, and the\r\n                // automatic values\r\n                if ( scrollX )\r\n                {\r\n                    var total = 0;\r\n\r\n                    for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                        column = columns[ visibleColumns[i] ];\r\n                        outerWidth = $(headerCells[i]).outerWidth();\r\n\r\n                        total += column.sWidthOrig === null ?\r\n                            outerWidth :\r\n                        parseInt( column.sWidth, 10 ) + outerWidth - $(headerCells[i]).width();\r\n                    }\r\n\r\n                    tmpTable.width( _fnStringToCss( total ) );\r\n                    table.style.width = _fnStringToCss( total );\r\n                }\r\n\r\n                // Get the width of each column in the constructed table\r\n                for ( i=0 ; i<visibleColumns.length ; i++ ) {\r\n                    column = columns[ visibleColumns[i] ];\r\n                    width = $(headerCells[i]).width();\r\n\r\n                    if ( width ) {\r\n                        column.sWidth = _fnStringToCss( width );\r\n                    }\r\n                }\r\n\r\n                table.style.width = _fnStringToCss( tmpTable.css('width') );\r\n\r\n                // Finished with the table - ditch it\r\n                tmpTable.remove();\r\n            }\r\n\r\n            // If there is a width attr, we want to attach an event listener which\r\n            // allows the table sizing to automatically adjust when the window is\r\n            // resized. Use the width attr rather than CSS, since we can't know if the\r\n            // CSS is a relative value or absolute - DOM read is always px.\r\n            if ( tableWidthAttr ) {\r\n                table.style.width = _fnStringToCss( tableWidthAttr );\r\n            }\r\n\r\n            if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {\r\n                $(window).bind('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {\r\n                    _fnAdjustColumnSizing( oSettings );\r\n                } ) );\r\n\r\n                oSettings._reszEvt = true;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Throttle the calls to a function. Arguments and context are maintained for\r\n         * the throttled function\r\n         *  @param {function} fn Function to be called\r\n         *  @param {int} [freq=200] call frequency in mS\r\n         *  @returns {function} wrapped function\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnThrottle( fn, freq ) {\r\n            var\r\n                frequency = freq || 200,\r\n                last,\r\n                timer;\r\n\r\n            return function () {\r\n                var\r\n                    that = this,\r\n                    now  = +new Date(),\r\n                    args = arguments;\r\n\r\n                if ( last && now < last + frequency ) {\r\n                    clearTimeout( timer );\r\n\r\n                    timer = setTimeout( function () {\r\n                        last = undefined;\r\n                        fn.apply( that, args );\r\n                    }, frequency );\r\n                }\r\n                else if ( last ) {\r\n                    last = now;\r\n                    fn.apply( that, args );\r\n                }\r\n                else {\r\n                    last = now;\r\n                }\r\n            };\r\n        }\r\n\r\n\r\n        /**\r\n         * Convert a CSS unit width to pixels (e.g. 2em)\r\n         *  @param {string} width width to be converted\r\n         *  @param {node} parent parent to get the with for (required for relative widths) - optional\r\n         *  @returns {int} width in pixels\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnConvertToWidth ( width, parent )\r\n        {\r\n            if ( ! width ) {\r\n                return 0;\r\n            }\r\n\r\n            var n = $('<div/>')\r\n                .css( 'width', _fnStringToCss( width ) )\r\n                .appendTo( parent || document.body );\r\n\r\n            var val = n[0].offsetWidth;\r\n            n.remove();\r\n\r\n            return val;\r\n        }\r\n\r\n\r\n        /**\r\n         * Adjust a table's width to take account of vertical scroll bar\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {node} n table node\r\n         *  @memberof DataTable#oApi\r\n         */\r\n\r\n        function _fnScrollingWidthAdjust ( settings, n )\r\n        {\r\n            var scroll = settings.oScroll;\r\n\r\n            if ( scroll.sX || scroll.sY ) {\r\n                // When y-scrolling only, we want to remove the width of the scroll bar\r\n                // so the table + scroll bar will fit into the area available, otherwise\r\n                // we fix the table at its current size with no adjustment\r\n                var correction = ! scroll.sX ? scroll.iBarWidth : 0;\r\n                n.style.width = _fnStringToCss( $(n).outerWidth() - correction );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the widest node\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {int} colIdx column of interest\r\n         *  @returns {node} widest table node\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetWidestNode( settings, colIdx )\r\n        {\r\n            var idx = _fnGetMaxLenString( settings, colIdx );\r\n            if ( idx < 0 ) {\r\n                return null;\r\n            }\r\n\r\n            var data = settings.aoData[ idx ];\r\n            return ! data.nTr ? // Might not have been created when deferred rendering\r\n                $('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :\r\n                data.anCells[ colIdx ];\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the maximum strlen for each data column\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {int} colIdx column of interest\r\n         *  @returns {string} max string length for each column\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnGetMaxLenString( settings, colIdx )\r\n        {\r\n            var s, max=-1, maxIdx = -1;\r\n\r\n            for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n                s = _fnGetCellData( settings, i, colIdx, 'display' )+'';\r\n                s = s.replace( __re_html_remove, '' );\r\n\r\n                if ( s.length > max ) {\r\n                    max = s.length;\r\n                    maxIdx = i;\r\n                }\r\n            }\r\n\r\n            return maxIdx;\r\n        }\r\n\r\n\r\n        /**\r\n         * Append a CSS unit (only if required) to a string\r\n         *  @param {string} value to css-ify\r\n         *  @returns {string} value with css unit\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnStringToCss( s )\r\n        {\r\n            if ( s === null ) {\r\n                return '0px';\r\n            }\r\n\r\n            if ( typeof s == 'number' ) {\r\n                return s < 0 ?\r\n                    '0px' :\r\n                s+'px';\r\n            }\r\n\r\n            // Check it has a unit character already\r\n            return s.match(/\\d$/) ?\r\n            s+'px' :\r\n                s;\r\n        }\r\n\r\n\r\n        /**\r\n         * Get the width of a scroll bar in this browser being used\r\n         *  @returns {int} width in pixels\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnScrollBarWidth ()\r\n        {\r\n            // On first run a static variable is set, since this is only needed once.\r\n            // Subsequent runs will just use the previously calculated value\r\n            if ( ! DataTable.__scrollbarWidth ) {\r\n                var inner = $('<p/>').css( {\r\n                    width: '100%',\r\n                    height: 200,\r\n                    padding: 0\r\n                } )[0];\r\n\r\n                var outer = $('<div/>')\r\n                    .css( {\r\n                        position: 'absolute',\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: 200,\r\n                        height: 150,\r\n                        padding: 0,\r\n                        overflow: 'hidden',\r\n                        visibility: 'hidden'\r\n                    } )\r\n                    .append( inner )\r\n                    .appendTo( 'body' );\r\n\r\n                var w1 = inner.offsetWidth;\r\n                outer.css( 'overflow', 'scroll' );\r\n                var w2 = inner.offsetWidth;\r\n\r\n                if ( w1 === w2 ) {\r\n                    w2 = outer[0].clientWidth;\r\n                }\r\n\r\n                outer.remove();\r\n\r\n                DataTable.__scrollbarWidth = w1 - w2;\r\n            }\r\n\r\n            return DataTable.__scrollbarWidth;\r\n        }\r\n\r\n\r\n\r\n        function _fnSortFlatten ( settings )\r\n        {\r\n            var\r\n                i, iLen, k, kLen,\r\n                aSort = [],\r\n                aiOrig = [],\r\n                aoColumns = settings.aoColumns,\r\n                aDataSort, iCol, sType, srcCol,\r\n                fixed = settings.aaSortingFixed,\r\n                fixedObj = $.isPlainObject( fixed ),\r\n                nestedSort = [],\r\n                add = function ( a ) {\r\n                    if ( a.length && ! $.isArray( a[0] ) ) {\r\n                        // 1D array\r\n                        nestedSort.push( a );\r\n                    }\r\n                    else {\r\n                        // 2D array\r\n                        nestedSort.push.apply( nestedSort, a );\r\n                    }\r\n                };\r\n\r\n            // Build the sort array, with pre-fix and post-fix options if they have been\r\n            // specified\r\n            if ( $.isArray( fixed ) ) {\r\n                add( fixed );\r\n            }\r\n\r\n            if ( fixedObj && fixed.pre ) {\r\n                add( fixed.pre );\r\n            }\r\n\r\n            add( settings.aaSorting );\r\n\r\n            if (fixedObj && fixed.post ) {\r\n                add( fixed.post );\r\n            }\r\n\r\n            for ( i=0 ; i<nestedSort.length ; i++ )\r\n            {\r\n                srcCol = nestedSort[i][0];\r\n                aDataSort = aoColumns[ srcCol ].aDataSort;\r\n\r\n                for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )\r\n                {\r\n                    iCol = aDataSort[k];\r\n                    sType = aoColumns[ iCol ].sType || 'string';\r\n\r\n                    aSort.push( {\r\n                        src:       srcCol,\r\n                        col:       iCol,\r\n                        dir:       nestedSort[i][1],\r\n                        index:     nestedSort[i][2],\r\n                        type:      sType,\r\n                        formatter: DataTable.ext.type.order[ sType+\"-pre\" ]\r\n                    } );\r\n                }\r\n            }\r\n\r\n            return aSort;\r\n        }\r\n\r\n        /**\r\n         * Change the order of the table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         *  @todo This really needs split up!\r\n         */\r\n        function _fnSort ( oSettings )\r\n        {\r\n            var\r\n                i, ien, iLen, j, jLen, k, kLen,\r\n                sDataType, nTh,\r\n                aiOrig = [],\r\n                oExtSort = DataTable.ext.type.order,\r\n                aoData = oSettings.aoData,\r\n                aoColumns = oSettings.aoColumns,\r\n                aDataSort, data, iCol, sType, oSort,\r\n                formatters = 0,\r\n                sortCol,\r\n                displayMaster = oSettings.aiDisplayMaster,\r\n                aSort;\r\n\r\n            // Resolve any column types that are unknown due to addition or invalidation\r\n            // @todo Can this be moved into a 'data-ready' handler which is called when\r\n            //   data is going to be used in the table?\r\n            _fnColumnTypes( oSettings );\r\n\r\n            aSort = _fnSortFlatten( oSettings );\r\n\r\n            for ( i=0, ien=aSort.length ; i<ien ; i++ ) {\r\n                sortCol = aSort[i];\r\n\r\n                // Track if we can use the fast sort algorithm\r\n                if ( sortCol.formatter ) {\r\n                    formatters++;\r\n                }\r\n\r\n                // Load the data needed for the sort, for each cell\r\n                _fnSortData( oSettings, sortCol.col );\r\n            }\r\n\r\n            /* No sorting required if server-side or no sorting array */\r\n            if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )\r\n            {\r\n                // Create a value - key array of the current row positions such that we can use their\r\n                // current position during the sort, if values match, in order to perform stable sorting\r\n                for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {\r\n                    aiOrig[ displayMaster[i] ] = i;\r\n                }\r\n\r\n                /* Do the sort - here we want multi-column sorting based on a given data source (column)\r\n                 * and sorting function (from oSort) in a certain direction. It's reasonably complex to\r\n                 * follow on it's own, but this is what we want (example two column sorting):\r\n                 *  fnLocalSorting = function(a,b){\r\n                 *    var iTest;\r\n                 *    iTest = oSort['string-asc']('data11', 'data12');\r\n                 *      if (iTest !== 0)\r\n                 *        return iTest;\r\n                 *    iTest = oSort['numeric-desc']('data21', 'data22');\r\n                 *    if (iTest !== 0)\r\n                 *      return iTest;\r\n                 *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\r\n                 *  }\r\n                 * Basically we have a test for each sorting column, if the data in that column is equal,\r\n                 * test the next column. If all columns match, then we use a numeric sort on the row\r\n                 * positions in the original data array to provide a stable sort.\r\n                 *\r\n                 * Note - I know it seems excessive to have two sorting methods, but the first is around\r\n                 * 15% faster, so the second is only maintained for backwards compatibility with sorting\r\n                 * methods which do not have a pre-sort formatting function.\r\n                 */\r\n                if ( formatters === aSort.length ) {\r\n                    // All sort types have formatting functions\r\n                    displayMaster.sort( function ( a, b ) {\r\n                        var\r\n                            x, y, k, test, sort,\r\n                            len=aSort.length,\r\n                            dataA = aoData[a]._aSortData,\r\n                            dataB = aoData[b]._aSortData;\r\n\r\n                        for ( k=0 ; k<len ; k++ ) {\r\n                            sort = aSort[k];\r\n\r\n                            x = dataA[ sort.col ];\r\n                            y = dataB[ sort.col ];\r\n\r\n                            test = x<y ? -1 : x>y ? 1 : 0;\r\n                            if ( test !== 0 ) {\r\n                                return sort.dir === 'asc' ? test : -test;\r\n                            }\r\n                        }\r\n\r\n                        x = aiOrig[a];\r\n                        y = aiOrig[b];\r\n                        return x<y ? -1 : x>y ? 1 : 0;\r\n                    } );\r\n                }\r\n                else {\r\n                    // Depreciated - remove in 1.11 (providing a plug-in option)\r\n                    // Not all sort types have formatting methods, so we have to call their sorting\r\n                    // methods.\r\n                    displayMaster.sort( function ( a, b ) {\r\n                        var\r\n                            x, y, k, l, test, sort, fn,\r\n                            len=aSort.length,\r\n                            dataA = aoData[a]._aSortData,\r\n                            dataB = aoData[b]._aSortData;\r\n\r\n                        for ( k=0 ; k<len ; k++ ) {\r\n                            sort = aSort[k];\r\n\r\n                            x = dataA[ sort.col ];\r\n                            y = dataB[ sort.col ];\r\n\r\n                            fn = oExtSort[ sort.type+\"-\"+sort.dir ] || oExtSort[ \"string-\"+sort.dir ];\r\n                            test = fn( x, y );\r\n                            if ( test !== 0 ) {\r\n                                return test;\r\n                            }\r\n                        }\r\n\r\n                        x = aiOrig[a];\r\n                        y = aiOrig[b];\r\n                        return x<y ? -1 : x>y ? 1 : 0;\r\n                    } );\r\n                }\r\n            }\r\n\r\n            /* Tell the draw function that we have sorted the data */\r\n            oSettings.bSorted = true;\r\n        }\r\n\r\n\r\n        function _fnSortAria ( settings )\r\n        {\r\n            var label;\r\n            var nextSort;\r\n            var columns = settings.aoColumns;\r\n            var aSort = _fnSortFlatten( settings );\r\n            var oAria = settings.oLanguage.oAria;\r\n\r\n            // ARIA attributes - need to loop all columns, to update all (removing old\r\n            // attributes as needed)\r\n            for ( var i=0, iLen=columns.length ; i<iLen ; i++ )\r\n            {\r\n                var col = columns[i];\r\n                var asSorting = col.asSorting;\r\n                var sTitle = col.sTitle.replace( /<.*?>/g, \"\" );\r\n                var th = col.nTh;\r\n\r\n                // IE7 is throwing an error when setting these properties with jQuery's\r\n                // attr() and removeAttr() methods...\r\n                th.removeAttribute('aria-sort');\r\n\r\n                /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\r\n                if ( col.bSortable ) {\r\n                    if ( aSort.length > 0 && aSort[0].col == i ) {\r\n                        th.setAttribute('aria-sort', aSort[0].dir==\"asc\" ? \"ascending\" : \"descending\" );\r\n                        nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];\r\n                    }\r\n                    else {\r\n                        nextSort = asSorting[0];\r\n                    }\r\n\r\n                    label = sTitle + ( nextSort === \"asc\" ?\r\n                        oAria.sSortAscending :\r\n                        oAria.sSortDescending\r\n                    );\r\n                }\r\n                else {\r\n                    label = sTitle;\r\n                }\r\n\r\n                th.setAttribute('aria-label', label);\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Function to run on user sort request\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {node} attachTo node to attach the handler to\r\n         *  @param {int} colIdx column sorting index\r\n         *  @param {boolean} [append=false] Append the requested sort to the existing\r\n         *    sort if true (i.e. multi-column sort)\r\n         *  @param {function} [callback] callback function\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSortListener ( settings, colIdx, append, callback )\r\n        {\r\n            var col = settings.aoColumns[ colIdx ];\r\n            var sorting = settings.aaSorting;\r\n            var asSorting = col.asSorting;\r\n            var nextSortIdx;\r\n            var next = function ( a ) {\r\n                var idx = a._idx;\r\n                if ( idx === undefined ) {\r\n                    idx = $.inArray( a[1], asSorting );\r\n                }\r\n\r\n                return idx+1 >= asSorting.length ? 0 : idx+1;\r\n            };\r\n\r\n            // Convert to 2D array if needed\r\n            if ( typeof sorting[0] === 'number' ) {\r\n                sorting = settings.aaSorting = [ sorting ];\r\n            }\r\n\r\n            // If appending the sort then we are multi-column sorting\r\n            if ( append && settings.oFeatures.bSortMulti ) {\r\n                // Are we already doing some kind of sort on this column?\r\n                var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );\r\n\r\n                if ( sortIdx !== -1 ) {\r\n                    // Yes, modify the sort\r\n                    nextSortIdx = next( sorting[sortIdx] );\r\n\r\n                    sorting[sortIdx][1] = asSorting[ nextSortIdx ];\r\n                    sorting[sortIdx]._idx = nextSortIdx;\r\n                }\r\n                else {\r\n                    // No sort on this column yet\r\n                    sorting.push( [ colIdx, asSorting[0], 0 ] );\r\n                    sorting[sorting.length-1]._idx = 0;\r\n                }\r\n            }\r\n            else if ( sorting.length && sorting[0][0] == colIdx ) {\r\n                // Single column - already sorting on this column, modify the sort\r\n                nextSortIdx = next( sorting[0] );\r\n\r\n                sorting.length = 1;\r\n                sorting[0][1] = asSorting[ nextSortIdx ];\r\n                sorting[0]._idx = nextSortIdx;\r\n            }\r\n            else {\r\n                // Single column - sort only on this column\r\n                sorting.length = 0;\r\n                sorting.push( [ colIdx, asSorting[0] ] );\r\n                sorting[0]._idx = 0;\r\n            }\r\n\r\n            // Run the sort by calling a full redraw\r\n            _fnReDraw( settings );\r\n\r\n            // callback used for async user interaction\r\n            if ( typeof callback == 'function' ) {\r\n                callback( settings );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Attach a sort handler (click) to a node\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {node} attachTo node to attach the handler to\r\n         *  @param {int} colIdx column sorting index\r\n         *  @param {function} [callback] callback function\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSortAttachListener ( settings, attachTo, colIdx, callback )\r\n        {\r\n            var col = settings.aoColumns[ colIdx ];\r\n\r\n            _fnBindAction( attachTo, {}, function (e) {\r\n                /* If the column is not sortable - don't to anything */\r\n                if ( col.bSortable === false ) {\r\n                    return;\r\n                }\r\n\r\n                // If processing is enabled use a timeout to allow the processing\r\n                // display to be shown - otherwise to it synchronously\r\n                if ( settings.oFeatures.bProcessing ) {\r\n                    _fnProcessingDisplay( settings, true );\r\n\r\n                    setTimeout( function() {\r\n                        _fnSortListener( settings, colIdx, e.shiftKey, callback );\r\n\r\n                        // In server-side processing, the draw callback will remove the\r\n                        // processing display\r\n                        if ( _fnDataSource( settings ) !== 'ssp' ) {\r\n                            _fnProcessingDisplay( settings, false );\r\n                        }\r\n                    }, 0 );\r\n                }\r\n                else {\r\n                    _fnSortListener( settings, colIdx, e.shiftKey, callback );\r\n                }\r\n            } );\r\n        }\r\n\r\n\r\n        /**\r\n         * Set the sorting classes on table's body, Note: it is safe to call this function\r\n         * when bSort and bSortClasses are false\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSortingClasses( settings )\r\n        {\r\n            var oldSort = settings.aLastSort;\r\n            var sortClass = settings.oClasses.sSortColumn;\r\n            var sort = _fnSortFlatten( settings );\r\n            var features = settings.oFeatures;\r\n            var i, ien, colIdx;\r\n\r\n            if ( features.bSort && features.bSortClasses ) {\r\n                // Remove old sorting classes\r\n                for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {\r\n                    colIdx = oldSort[i].src;\r\n\r\n                    // Remove column sorting\r\n                    $( _pluck( settings.aoData, 'anCells', colIdx ) )\r\n                        .removeClass( sortClass + (i<2 ? i+1 : 3) );\r\n                }\r\n\r\n                // Add new column sorting\r\n                for ( i=0, ien=sort.length ; i<ien ; i++ ) {\r\n                    colIdx = sort[i].src;\r\n\r\n                    $( _pluck( settings.aoData, 'anCells', colIdx ) )\r\n                        .addClass( sortClass + (i<2 ? i+1 : 3) );\r\n                }\r\n            }\r\n\r\n            settings.aLastSort = sort;\r\n        }\r\n\r\n\r\n        // Get the data to sort a column, be it from cache, fresh (populating the\r\n        // cache), or from a sort formatter\r\n        function _fnSortData( settings, idx )\r\n        {\r\n            // Custom sorting function - provided by the sort data type\r\n            var column = settings.aoColumns[ idx ];\r\n            var customSort = DataTable.ext.order[ column.sSortDataType ];\r\n            var customData;\r\n\r\n            if ( customSort ) {\r\n                customData = customSort.call( settings.oInstance, settings, idx,\r\n                    _fnColumnIndexToVisible( settings, idx )\r\n                );\r\n            }\r\n\r\n            // Use / populate cache\r\n            var row, cellData;\r\n            var formatter = DataTable.ext.type.order[ column.sType+\"-pre\" ];\r\n\r\n            for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n                row = settings.aoData[i];\r\n\r\n                if ( ! row._aSortData ) {\r\n                    row._aSortData = [];\r\n                }\r\n\r\n                if ( ! row._aSortData[idx] || customSort ) {\r\n                    cellData = customSort ?\r\n                        customData[i] : // If there was a custom sort function, use data from there\r\n                        _fnGetCellData( settings, i, idx, 'sort' );\r\n\r\n                    row._aSortData[ idx ] = formatter ?\r\n                        formatter( cellData ) :\r\n                        cellData;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n        /**\r\n         * Save the state of a table\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSaveState ( settings )\r\n        {\r\n            if ( !settings.oFeatures.bStateSave || settings.bDestroying )\r\n            {\r\n                return;\r\n            }\r\n\r\n            /* Store the interesting variables */\r\n            var state = {\r\n                time:    +new Date(),\r\n                start:   settings._iDisplayStart,\r\n                length:  settings._iDisplayLength,\r\n                order:   $.extend( true, [], settings.aaSorting ),\r\n                search:  _fnSearchToCamel( settings.oPreviousSearch ),\r\n                columns: $.map( settings.aoColumns, function ( col, i ) {\r\n                    return {\r\n                        visible: col.bVisible,\r\n                        search: _fnSearchToCamel( settings.aoPreSearchCols[i] )\r\n                    };\r\n                } )\r\n            };\r\n\r\n            _fnCallbackFire( settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state] );\r\n\r\n            settings.oSavedState = state;\r\n            settings.fnStateSaveCallback.call( settings.oInstance, settings, state );\r\n        }\r\n\r\n\r\n        /**\r\n         * Attempt to load a saved table state\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {object} oInit DataTables init object so we can override settings\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnLoadState ( settings, oInit )\r\n        {\r\n            var i, ien;\r\n            var columns = settings.aoColumns;\r\n\r\n            if ( ! settings.oFeatures.bStateSave ) {\r\n                return;\r\n            }\r\n\r\n            var state = settings.fnStateLoadCallback.call( settings.oInstance, settings );\r\n            if ( ! state || ! state.time ) {\r\n                return;\r\n            }\r\n\r\n            /* Allow custom and plug-in manipulation functions to alter the saved data set and\r\n             * cancelling of loading by returning false\r\n             */\r\n            var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, state] );\r\n            if ( $.inArray( false, abStateLoad ) !== -1 ) {\r\n                return;\r\n            }\r\n\r\n            /* Reject old data */\r\n            var duration = settings.iStateDuration;\r\n            if ( duration > 0 && state.time < +new Date() - (duration*1000) ) {\r\n                return;\r\n            }\r\n\r\n            // Number of columns have changed - all bets are off, no restore of settings\r\n            if ( columns.length !== state.columns.length ) {\r\n                return;\r\n            }\r\n\r\n            // Store the saved state so it might be accessed at any time\r\n            settings.oLoadedState = $.extend( true, {}, state );\r\n\r\n            // Restore key features - todo - for 1.11 this needs to be done by\r\n            // subscribed events\r\n            settings._iDisplayStart    = state.start;\r\n            settings.iInitDisplayStart = state.start;\r\n            settings._iDisplayLength   = state.length;\r\n            settings.aaSorting = [];\r\n\r\n            // Order\r\n            $.each( state.order, function ( i, col ) {\r\n                settings.aaSorting.push( col[0] >= columns.length ?\r\n                        [ 0, col[1] ] :\r\n                        col\r\n                );\r\n            } );\r\n\r\n            // Search\r\n            $.extend( settings.oPreviousSearch, _fnSearchToHung( state.search ) );\r\n\r\n            // Columns\r\n            for ( i=0, ien=state.columns.length ; i<ien ; i++ ) {\r\n                var col = state.columns[i];\r\n\r\n                // Visibility\r\n                columns[i].bVisible = col.visible;\r\n\r\n                // Search\r\n                $.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );\r\n            }\r\n\r\n            _fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, state] );\r\n        }\r\n\r\n\r\n        /**\r\n         * Return the settings object for a particular table\r\n         *  @param {node} table table we are using as a dataTable\r\n         *  @returns {object} Settings object - or null if not found\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnSettingsFromNode ( table )\r\n        {\r\n            var settings = DataTable.settings;\r\n            var idx = $.inArray( table, _pluck( settings, 'nTable' ) );\r\n\r\n            return idx !== -1 ?\r\n                settings[ idx ] :\r\n                null;\r\n        }\r\n\r\n\r\n        /**\r\n         * Log an error message\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {int} level log error messages, or display them to the user\r\n         *  @param {string} msg error message\r\n         *  @param {int} tn Technical note id to get more information about the error.\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnLog( settings, level, msg, tn )\r\n        {\r\n            msg = 'DataTables warning: '+\r\n            (settings!==null ? 'table id='+settings.sTableId+' - ' : '')+msg;\r\n\r\n            if ( tn ) {\r\n                msg += '. For more information about this error, please see '+\r\n                'http://datatables.net/tn/'+tn;\r\n            }\r\n\r\n            if ( ! level  ) {\r\n                // Backwards compatibility pre 1.10\r\n                var ext = DataTable.ext;\r\n                var type = ext.sErrMode || ext.errMode;\r\n\r\n                if ( type == 'alert' ) {\r\n                    alert( msg );\r\n                }\r\n                else {\r\n                    throw new Error(msg);\r\n                }\r\n            }\r\n            else if ( window.console && console.log ) {\r\n                console.log( msg );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * See if a property is defined on one object, if so assign it to the other object\r\n         *  @param {object} ret target object\r\n         *  @param {object} src source object\r\n         *  @param {string} name property\r\n         *  @param {string} [mappedName] name to map too - optional, name used if not given\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnMap( ret, src, name, mappedName )\r\n        {\r\n            if ( $.isArray( name ) ) {\r\n                $.each( name, function (i, val) {\r\n                    if ( $.isArray( val ) ) {\r\n                        _fnMap( ret, src, val[0], val[1] );\r\n                    }\r\n                    else {\r\n                        _fnMap( ret, src, val );\r\n                    }\r\n                } );\r\n\r\n                return;\r\n            }\r\n\r\n            if ( mappedName === undefined ) {\r\n                mappedName = name;\r\n            }\r\n\r\n            if ( src[name] !== undefined ) {\r\n                ret[mappedName] = src[name];\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Extend objects - very similar to jQuery.extend, but deep copy objects, and\r\n         * shallow copy arrays. The reason we need to do this, is that we don't want to\r\n         * deep copy array init values (such as aaSorting) since the dev wouldn't be\r\n         * able to override them, but we do want to deep copy arrays.\r\n         *  @param {object} out Object to extend\r\n         *  @param {object} extender Object from which the properties will be applied to\r\n         *      out\r\n         *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\r\n         *      independent copy with the exception of the `data` or `aaData` parameters\r\n         *      if they are present. This is so you can pass in a collection to\r\n         *      DataTables and have that used as your data source without breaking the\r\n         *      references\r\n         *  @returns {object} out Reference, just for convenience - out === the return.\r\n         *  @memberof DataTable#oApi\r\n         *  @todo This doesn't take account of arrays inside the deep copied objects.\r\n         */\r\n        function _fnExtend( out, extender, breakRefs )\r\n        {\r\n            var val;\r\n\r\n            for ( var prop in extender ) {\r\n                if ( extender.hasOwnProperty(prop) ) {\r\n                    val = extender[prop];\r\n\r\n                    if ( $.isPlainObject( val ) ) {\r\n                        if ( ! $.isPlainObject( out[prop] ) ) {\r\n                            out[prop] = {};\r\n                        }\r\n                        $.extend( true, out[prop], val );\r\n                    }\r\n                    else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {\r\n                        out[prop] = val.slice();\r\n                    }\r\n                    else {\r\n                        out[prop] = val;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return out;\r\n        }\r\n\r\n\r\n        /**\r\n         * Bind an event handers to allow a click or return key to activate the callback.\r\n         * This is good for accessibility since a return on the keyboard will have the\r\n         * same effect as a click, if the element has focus.\r\n         *  @param {element} n Element to bind the action to\r\n         *  @param {object} oData Data object to pass to the triggered function\r\n         *  @param {function} fn Callback function for when the event is triggered\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnBindAction( n, oData, fn )\r\n        {\r\n            $(n)\r\n                .bind( 'click.DT', oData, function (e) {\r\n                    n.blur(); // Remove focus outline for mouse users\r\n                    fn(e);\r\n                } )\r\n                .bind( 'keypress.DT', oData, function (e){\r\n                    if ( e.which === 13 ) {\r\n                        e.preventDefault();\r\n                        fn(e);\r\n                    }\r\n                } )\r\n                .bind( 'selectstart.DT', function () {\r\n                    /* Take the brutal approach to cancelling text selection */\r\n                    return false;\r\n                } );\r\n        }\r\n\r\n\r\n        /**\r\n         * Register a callback function. Easily allows a callback function to be added to\r\n         * an array store of callback functions that can then all be called together.\r\n         *  @param {object} oSettings dataTables settings object\r\n         *  @param {string} sStore Name of the array storage for the callbacks in oSettings\r\n         *  @param {function} fn Function to be called back\r\n         *  @param {string} sName Identifying name for the callback (i.e. a label)\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnCallbackReg( oSettings, sStore, fn, sName )\r\n        {\r\n            if ( fn )\r\n            {\r\n                oSettings[sStore].push( {\r\n                    \"fn\": fn,\r\n                    \"sName\": sName\r\n                } );\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * Fire callback functions and trigger events. Note that the loop over the\r\n         * callback array store is done backwards! Further note that you do not want to\r\n         * fire off triggers in time sensitive applications (for example cell creation)\r\n         * as its slow.\r\n         *  @param {object} settings dataTables settings object\r\n         *  @param {string} callbackArr Name of the array storage for the callbacks in\r\n         *      oSettings\r\n         *  @param {string} event Name of the jQuery custom event to trigger. If null no\r\n         *      trigger is fired\r\n         *  @param {array} args Array of arguments to pass to the callback function /\r\n         *      trigger\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnCallbackFire( settings, callbackArr, e, args )\r\n        {\r\n            var ret = [];\r\n\r\n            if ( callbackArr ) {\r\n                ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {\r\n                    return val.fn.apply( settings.oInstance, args );\r\n                } );\r\n            }\r\n\r\n            if ( e !== null ) {\r\n                $(settings.nTable).trigger( e+'.dt', args );\r\n            }\r\n\r\n            return ret;\r\n        }\r\n\r\n\r\n        function _fnLengthOverflow ( settings )\r\n        {\r\n            var\r\n                start = settings._iDisplayStart,\r\n                end = settings.fnDisplayEnd(),\r\n                len = settings._iDisplayLength;\r\n\r\n            /* If we have space to show extra rows (backing up from the end point - then do so */\r\n            if ( end === settings.fnRecordsDisplay() )\r\n            {\r\n                start = end - len;\r\n            }\r\n\r\n            if ( len === -1 || start < 0 )\r\n            {\r\n                start = 0;\r\n            }\r\n\r\n            settings._iDisplayStart = start;\r\n        }\r\n\r\n\r\n        function _fnRenderer( settings, type )\r\n        {\r\n            var renderer = settings.renderer;\r\n            var host = DataTable.ext.renderer[type];\r\n\r\n            if ( $.isPlainObject( renderer ) && renderer[type] ) {\r\n                // Specific renderer for this type. If available use it, otherwise use\r\n                // the default.\r\n                return host[renderer[type]] || host._;\r\n            }\r\n            else if ( typeof renderer === 'string' ) {\r\n                // Common renderer - if there is one available for this type use it,\r\n                // otherwise use the default\r\n                return host[renderer] || host._;\r\n            }\r\n\r\n            // Use the default\r\n            return host._;\r\n        }\r\n\r\n\r\n        /**\r\n         * Detect the data source being used for the table. Used to simplify the code\r\n         * a little (ajax) and to make it compress a little smaller.\r\n         *\r\n         *  @param {object} settings dataTables settings object\r\n         *  @returns {string} Data source\r\n         *  @memberof DataTable#oApi\r\n         */\r\n        function _fnDataSource ( settings )\r\n        {\r\n            if ( settings.oFeatures.bServerSide ) {\r\n                return 'ssp';\r\n            }\r\n            else if ( settings.ajax || settings.sAjaxSource ) {\r\n                return 'ajax';\r\n            }\r\n            return 'dom';\r\n        }\r\n\r\n\r\n        DataTable = function( options )\r\n        {\r\n            /**\r\n             * Perform a jQuery selector action on the table's TR elements (from the tbody) and\r\n             * return the resulting jQuery object.\r\n             *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\r\n             *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\r\n             *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\r\n             *    criterion (\"applied\") or all TR elements (i.e. no filter).\r\n             *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\r\n             *    Can be either 'current', whereby the current sorting of the table is used, or\r\n             *    'original' whereby the original order the data was read into the table is used.\r\n             *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\r\n             *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\r\n             *    'current' and filter is 'applied', regardless of what they might be given as.\r\n             *  @returns {object} jQuery object, filtered by the given selector.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Highlight every second row\r\n\t\t *      oTable.$('tr:odd').css('backgroundColor', 'blue');\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Filter to rows with 'Webkit' in them, add a background colour and then\r\n\t\t *      // remove the filter, thus highlighting the 'Webkit' rows only.\r\n\t\t *      oTable.fnFilter('Webkit');\r\n\t\t *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\r\n\t\t *      oTable.fnFilter('');\r\n\t\t *    } );\r\n             */\r\n            this.$ = function ( sSelector, oOpts )\r\n            {\r\n                return this.api(true).$( sSelector, oOpts );\r\n            };\r\n\r\n\r\n            /**\r\n             * Almost identical to $ in operation, but in this case returns the data for the matched\r\n             * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\r\n             * rather than any descendants, so the data can be obtained for the row/cell. If matching\r\n             * rows are found, the data returned is the original data array/object that was used to\r\n             * create the row (or a generated array if from a DOM source).\r\n             *\r\n             * This method is often useful in-combination with $ where both functions are given the\r\n             * same parameters and the array indexes will match identically.\r\n             *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\r\n             *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\r\n             *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\r\n             *    criterion (\"applied\") or all elements (i.e. no filter).\r\n             *  @param {string} [oOpts.order=current] Order of the data in the processed array.\r\n             *    Can be either 'current', whereby the current sorting of the table is used, or\r\n             *    'original' whereby the original order the data was read into the table is used.\r\n             *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\r\n             *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\r\n             *    'current' and filter is 'applied', regardless of what they might be given as.\r\n             *  @returns {array} Data for the matched elements. If any elements, as a result of the\r\n             *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\r\n             *    entry in the array.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Get the data from the first row in the table\r\n\t\t *      var data = oTable._('tr:first');\r\n\t\t *\r\n\t\t *      // Do something useful with the data\r\n\t\t *      alert( \"First cell is: \"+data[0] );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Filter to 'Webkit' and get all data for\r\n\t\t *      oTable.fnFilter('Webkit');\r\n\t\t *      var data = oTable._('tr', {\"search\": \"applied\"});\r\n\t\t *\r\n\t\t *      // Do something with the data\r\n\t\t *      alert( data.length+\" rows matched the search\" );\r\n\t\t *    } );\r\n             */\r\n            this._ = function ( sSelector, oOpts )\r\n            {\r\n                return this.api(true).rows( sSelector, oOpts ).data();\r\n            };\r\n\r\n\r\n            /**\r\n             * Create a DataTables Api instance, with the currently selected tables for\r\n             * the Api's context.\r\n             * @param {boolean} [traditional=false] Set the API instance's context to be\r\n             *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\r\n             *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\r\n             *   or if all tables captured in the jQuery object should be used.\r\n             * @return {DataTables.Api}\r\n             */\r\n            this.api = function ( traditional )\r\n            {\r\n                return traditional ?\r\n                    new _Api(\r\n                        _fnSettingsFromNode( this[ _ext.iApiIndex ] )\r\n                    ) :\r\n                    new _Api( this );\r\n            };\r\n\r\n\r\n            /**\r\n             * Add a single new row or multiple rows of data to the table. Please note\r\n             * that this is suitable for client-side processing only - if you are using\r\n             * server-side processing (i.e. \"bServerSide\": true), then to add data, you\r\n             * must add it to the data source, i.e. the server-side, through an Ajax call.\r\n             *  @param {array|object} data The data to be added to the table. This can be:\r\n             *    <ul>\r\n             *      <li>1D array of data - add a single row with the data provided</li>\r\n             *      <li>2D array of arrays - add multiple rows in a single call</li>\r\n             *      <li>object - data object when using <i>mData</i></li>\r\n             *      <li>array of objects - multiple data objects when using <i>mData</i></li>\r\n             *    </ul>\r\n             *  @param {bool} [redraw=true] redraw the table or not\r\n             *  @returns {array} An array of integers, representing the list of indexes in\r\n             *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\r\n             *    the table.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    // Global var for counter\r\n             *    var giCount = 2;\r\n             *\r\n             *    $(document).ready(function() {\r\n\t\t *      $('#example').dataTable();\r\n\t\t *    } );\r\n             *\r\n             *    function fnClickAddRow() {\r\n\t\t *      $('#example').dataTable().fnAddData( [\r\n\t\t *        giCount+\".1\",\r\n\t\t *        giCount+\".2\",\r\n\t\t *        giCount+\".3\",\r\n\t\t *        giCount+\".4\" ]\r\n\t\t *      );\r\n\t\t *\r\n\t\t *      giCount++;\r\n\t\t *    }\r\n             */\r\n            this.fnAddData = function( data, redraw )\r\n            {\r\n                var api = this.api( true );\r\n\r\n                /* Check if we want to add multiple rows or not */\r\n                var rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?\r\n                    api.rows.add( data ) :\r\n                    api.row.add( data );\r\n\r\n                if ( redraw === undefined || redraw ) {\r\n                    api.draw();\r\n                }\r\n\r\n                return rows.flatten().toArray();\r\n            };\r\n\r\n\r\n            /**\r\n             * This function will make DataTables recalculate the column sizes, based on the data\r\n             * contained in the table and the sizes applied to the columns (in the DOM, CSS or\r\n             * through the sWidth parameter). This can be useful when the width of the table's\r\n             * parent element changes (for example a window resize).\r\n             *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable( {\r\n\t\t *        \"sScrollY\": \"200px\",\r\n\t\t *        \"bPaginate\": false\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      $(window).bind('resize', function () {\r\n\t\t *        oTable.fnAdjustColumnSizing();\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            this.fnAdjustColumnSizing = function ( bRedraw )\r\n            {\r\n                var api = this.api( true ).columns.adjust();\r\n                var settings = api.settings()[0];\r\n                var scroll = settings.oScroll;\r\n\r\n                if ( bRedraw === undefined || bRedraw ) {\r\n                    api.draw( false );\r\n                }\r\n                else if ( scroll.sX !== \"\" || scroll.sY !== \"\" ) {\r\n                    /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\r\n                    _fnScrollDraw( settings );\r\n                }\r\n            };\r\n\r\n\r\n            /**\r\n             * Quickly and simply clear a table\r\n             *  @param {bool} [bRedraw=true] redraw the table or not\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\r\n\t\t *      oTable.fnClearTable();\r\n\t\t *    } );\r\n             */\r\n            this.fnClearTable = function( bRedraw )\r\n            {\r\n                var api = this.api( true ).clear();\r\n\r\n                if ( bRedraw === undefined || bRedraw ) {\r\n                    api.draw();\r\n                }\r\n            };\r\n\r\n\r\n            /**\r\n             * The exact opposite of 'opening' a row, this function will close any rows which\r\n             * are currently 'open'.\r\n             *  @param {node} nTr the table row to 'close'\r\n             *  @returns {int} 0 on success, or 1 if failed (can't find the row)\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable;\r\n\t\t *\r\n\t\t *      // 'open' an information row when a row is clicked on\r\n\t\t *      $('#example tbody tr').click( function () {\r\n\t\t *        if ( oTable.fnIsOpen(this) ) {\r\n\t\t *          oTable.fnClose( this );\r\n\t\t *        } else {\r\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *    } );\r\n             */\r\n            this.fnClose = function( nTr )\r\n            {\r\n                this.api( true ).row( nTr ).child.hide();\r\n            };\r\n\r\n\r\n            /**\r\n             * Remove a row for the table\r\n             *  @param {mixed} target The index of the row from aoData to be deleted, or\r\n             *    the TR element you want to delete\r\n             *  @param {function|null} [callBack] Callback function\r\n             *  @param {bool} [redraw=true] Redraw the table or not\r\n             *  @returns {array} The row that was deleted\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Immediately remove the first row\r\n\t\t *      oTable.fnDeleteRow( 0 );\r\n\t\t *    } );\r\n             */\r\n            this.fnDeleteRow = function( target, callback, redraw )\r\n            {\r\n                var api = this.api( true );\r\n                var rows = api.rows( target );\r\n                var settings = rows.settings()[0];\r\n                var data = settings.aoData[ rows[0][0] ];\r\n\r\n                rows.remove();\r\n\r\n                if ( callback ) {\r\n                    callback.call( this, settings, data );\r\n                }\r\n\r\n                if ( redraw === undefined || redraw ) {\r\n                    api.draw();\r\n                }\r\n\r\n                return data;\r\n            };\r\n\r\n\r\n            /**\r\n             * Restore the table to it's original state in the DOM by removing all of DataTables\r\n             * enhancements, alterations to the DOM structure of the table and event listeners.\r\n             *  @param {boolean} [remove=false] Completely remove the table from the DOM\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      oTable.fnDestroy();\r\n\t\t *    } );\r\n             */\r\n            this.fnDestroy = function ( remove )\r\n            {\r\n                this.api( true ).destroy( remove );\r\n            };\r\n\r\n\r\n            /**\r\n             * Redraw the table\r\n             *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\r\n\t\t *      oTable.fnDraw();\r\n\t\t *    } );\r\n             */\r\n            this.fnDraw = function( complete )\r\n            {\r\n                // Note that this isn't an exact match to the old call to _fnDraw - it takes\r\n                // into account the new data, but can old position.\r\n                this.api( true ).draw( ! complete );\r\n            };\r\n\r\n\r\n            /**\r\n             * Filter the input based on data\r\n             *  @param {string} sInput String to filter the table on\r\n             *  @param {int|null} [iColumn] Column to limit filtering to\r\n             *  @param {bool} [bRegex=false] Treat as regular expression or not\r\n             *  @param {bool} [bSmart=true] Perform smart filtering or not\r\n             *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\r\n             *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Sometime later - filter...\r\n\t\t *      oTable.fnFilter( 'test string' );\r\n\t\t *    } );\r\n             */\r\n            this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )\r\n            {\r\n                var api = this.api( true );\r\n\r\n                if ( iColumn === null || iColumn === undefined ) {\r\n                    api.search( sInput, bRegex, bSmart, bCaseInsensitive );\r\n                }\r\n                else {\r\n                    api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );\r\n                }\r\n\r\n                api.draw();\r\n            };\r\n\r\n\r\n            /**\r\n             * Get the data for the whole table, an individual row or an individual cell based on the\r\n             * provided parameters.\r\n             *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\r\n             *    a TR node then the data source for the whole row will be returned. If given as a\r\n             *    TD/TH cell node then iCol will be automatically calculated and the data for the\r\n             *    cell returned. If given as an integer, then this is treated as the aoData internal\r\n             *    data index for the row (see fnGetPosition) and the data for that row used.\r\n             *  @param {int} [col] Optional column index that you want the data of.\r\n             *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\r\n             *    returned. If mRow is defined, just data for that row, and is iCol is\r\n             *    defined, only data for the designated cell is returned.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    // Row data\r\n             *    $(document).ready(function() {\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      oTable.$('tr').click( function () {\r\n\t\t *        var data = oTable.fnGetData( this );\r\n\t\t *        // ... do something with the array / object of data for the row\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Individual cell data\r\n             *    $(document).ready(function() {\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      oTable.$('td').click( function () {\r\n\t\t *        var sData = oTable.fnGetData( this );\r\n\t\t *        alert( 'The cell clicked on had the value of '+sData );\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            this.fnGetData = function( src, col )\r\n            {\r\n                var api = this.api( true );\r\n\r\n                if ( src !== undefined ) {\r\n                    var type = src.nodeName ? src.nodeName.toLowerCase() : '';\r\n\r\n                    return col !== undefined || type == 'td' || type == 'th' ?\r\n                        api.cell( src, col ).data() :\r\n                    api.row( src ).data() || null;\r\n                }\r\n\r\n                return api.data().toArray();\r\n            };\r\n\r\n\r\n            /**\r\n             * Get an array of the TR nodes that are used in the table's body. Note that you will\r\n             * typically want to use the '$' API method in preference to this as it is more\r\n             * flexible.\r\n             *  @param {int} [iRow] Optional row index for the TR element you want\r\n             *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\r\n             *    in the table's body, or iRow is defined, just the TR element requested.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Get the nodes from the table\r\n\t\t *      var nNodes = oTable.fnGetNodes( );\r\n\t\t *    } );\r\n             */\r\n            this.fnGetNodes = function( iRow )\r\n            {\r\n                var api = this.api( true );\r\n\r\n                return iRow !== undefined ?\r\n                    api.row( iRow ).node() :\r\n                    api.rows().nodes().flatten().toArray();\r\n            };\r\n\r\n\r\n            /**\r\n             * Get the array indexes of a particular cell from it's DOM element\r\n             * and column index including hidden columns\r\n             *  @param {node} node this can either be a TR, TD or TH in the table's body\r\n             *  @returns {int} If nNode is given as a TR, then a single index is returned, or\r\n             *    if given as a cell, an array of [row index, column index (visible),\r\n             *    column index (all)] is given.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      $('#example tbody td').click( function () {\r\n\t\t *        // Get the position of the current data from the node\r\n\t\t *        var aPos = oTable.fnGetPosition( this );\r\n\t\t *\r\n\t\t *        // Get the data array for this row\r\n\t\t *        var aData = oTable.fnGetData( aPos[0] );\r\n\t\t *\r\n\t\t *        // Update the data array and return the value\r\n\t\t *        aData[ aPos[1] ] = 'clicked';\r\n\t\t *        this.innerHTML = 'clicked';\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      // Init DataTables\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *    } );\r\n             */\r\n            this.fnGetPosition = function( node )\r\n            {\r\n                var api = this.api( true );\r\n                var nodeName = node.nodeName.toUpperCase();\r\n\r\n                if ( nodeName == 'TR' ) {\r\n                    return api.row( node ).index();\r\n                }\r\n                else if ( nodeName == 'TD' || nodeName == 'TH' ) {\r\n                    var cell = api.cell( node ).index();\r\n\r\n                    return [\r\n                        cell.row,\r\n                        cell.columnVisible,\r\n                        cell.column\r\n                    ];\r\n                }\r\n                return null;\r\n            };\r\n\r\n\r\n            /**\r\n             * Check to see if a row is 'open' or not.\r\n             *  @param {node} nTr the table row to check\r\n             *  @returns {boolean} true if the row is currently open, false otherwise\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable;\r\n\t\t *\r\n\t\t *      // 'open' an information row when a row is clicked on\r\n\t\t *      $('#example tbody tr').click( function () {\r\n\t\t *        if ( oTable.fnIsOpen(this) ) {\r\n\t\t *          oTable.fnClose( this );\r\n\t\t *        } else {\r\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *    } );\r\n             */\r\n            this.fnIsOpen = function( nTr )\r\n            {\r\n                return this.api( true ).row( nTr ).child.isShown();\r\n            };\r\n\r\n\r\n            /**\r\n             * This function will place a new row directly after a row which is currently\r\n             * on display on the page, with the HTML contents that is passed into the\r\n             * function. This can be used, for example, to ask for confirmation that a\r\n             * particular record should be deleted.\r\n             *  @param {node} nTr The table row to 'open'\r\n             *  @param {string|node|jQuery} mHtml The HTML to put into the row\r\n             *  @param {string} sClass Class to give the new TD cell\r\n             *  @returns {node} The row opened. Note that if the table row passed in as the\r\n             *    first parameter, is not found in the table, this method will silently\r\n             *    return.\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable;\r\n\t\t *\r\n\t\t *      // 'open' an information row when a row is clicked on\r\n\t\t *      $('#example tbody tr').click( function () {\r\n\t\t *        if ( oTable.fnIsOpen(this) ) {\r\n\t\t *          oTable.fnClose( this );\r\n\t\t *        } else {\r\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      oTable = $('#example').dataTable();\r\n\t\t *    } );\r\n             */\r\n            this.fnOpen = function( nTr, mHtml, sClass )\r\n            {\r\n                return this.api( true )\r\n                    .row( nTr )\r\n                    .child( mHtml, sClass )\r\n                    .show()\r\n                    .child()[0];\r\n            };\r\n\r\n\r\n            /**\r\n             * Change the pagination - provides the internal logic for pagination in a simple API\r\n             * function. With this function you can have a DataTables table go to the next,\r\n             * previous, first or last pages.\r\n             *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\r\n             *    or page number to jump to (integer), note that page 0 is the first page.\r\n             *  @param {bool} [bRedraw=true] Redraw the table or not\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      oTable.fnPageChange( 'next' );\r\n\t\t *    } );\r\n             */\r\n            this.fnPageChange = function ( mAction, bRedraw )\r\n            {\r\n                var api = this.api( true ).page( mAction );\r\n\r\n                if ( bRedraw === undefined || bRedraw ) {\r\n                    api.draw(false);\r\n                }\r\n            };\r\n\r\n\r\n            /**\r\n             * Show a particular column\r\n             *  @param {int} iCol The column whose display should be changed\r\n             *  @param {bool} bShow Show (true) or hide (false) the column\r\n             *  @param {bool} [bRedraw=true] Redraw the table or not\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Hide the second column after initialisation\r\n\t\t *      oTable.fnSetColumnVis( 1, false );\r\n\t\t *    } );\r\n             */\r\n            this.fnSetColumnVis = function ( iCol, bShow, bRedraw )\r\n            {\r\n                var api = this.api( true ).column( iCol ).visible( bShow );\r\n\r\n                if ( bRedraw === undefined || bRedraw ) {\r\n                    api.columns.adjust().draw();\r\n                }\r\n            };\r\n\r\n\r\n            /**\r\n             * Get the settings for a particular table for external manipulation\r\n             *  @returns {object} DataTables settings object. See\r\n             *    {@link DataTable.models.oSettings}\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      var oSettings = oTable.fnSettings();\r\n\t\t *\r\n\t\t *      // Show an example parameter from the settings\r\n\t\t *      alert( oSettings._iDisplayStart );\r\n\t\t *    } );\r\n             */\r\n            this.fnSettings = function()\r\n            {\r\n                return _fnSettingsFromNode( this[_ext.iApiIndex] );\r\n            };\r\n\r\n\r\n            /**\r\n             * Sort the table by a particular column\r\n             *  @param {int} iCol the data index to sort on. Note that this will not match the\r\n             *    'display index' if you have hidden data entries\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Sort immediately with columns 0 and 1\r\n\t\t *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\r\n\t\t *    } );\r\n             */\r\n            this.fnSort = function( aaSort )\r\n            {\r\n                this.api( true ).order( aaSort ).draw();\r\n            };\r\n\r\n\r\n            /**\r\n             * Attach a sort listener to an element for a given column\r\n             *  @param {node} nNode the element to attach the sort listener to\r\n             *  @param {int} iColumn the column that a click on this node will sort on\r\n             *  @param {function} [fnCallback] callback function when sort is run\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *\r\n\t\t *      // Sort on column 1, when 'sorter' is clicked on\r\n\t\t *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\r\n\t\t *    } );\r\n             */\r\n            this.fnSortListener = function( nNode, iColumn, fnCallback )\r\n            {\r\n                this.api( true ).order.listener( nNode, iColumn, fnCallback );\r\n            };\r\n\r\n\r\n            /**\r\n             * Update a table cell or row - this method will accept either a single value to\r\n             * update the cell with, an array of values with one element for each column or\r\n             * an object in the same format as the original data source. The function is\r\n             * self-referencing in order to make the multi column updates easier.\r\n             *  @param {object|array|string} mData Data to update the cell/row with\r\n             *  @param {node|int} mRow TR element you want to update or the aoData index\r\n             *  @param {int} [iColumn] The column to update, give as null or undefined to\r\n             *    update a whole row.\r\n             *  @param {bool} [bRedraw=true] Redraw the table or not\r\n             *  @param {bool} [bAction=true] Perform pre-draw actions or not\r\n             *  @returns {int} 0 on success, 1 on error\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\r\n\t\t *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\r\n\t\t *    } );\r\n             */\r\n            this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )\r\n            {\r\n                var api = this.api( true );\r\n\r\n                if ( iColumn === undefined || iColumn === null ) {\r\n                    api.row( mRow ).data( mData );\r\n                }\r\n                else {\r\n                    api.cell( mRow, iColumn ).data( mData );\r\n                }\r\n\r\n                if ( bAction === undefined || bAction ) {\r\n                    api.columns.adjust();\r\n                }\r\n\r\n                if ( bRedraw === undefined || bRedraw ) {\r\n                    api.draw();\r\n                }\r\n                return 0;\r\n            };\r\n\r\n\r\n            /**\r\n             * Provide a common method for plug-ins to check the version of DataTables being used, in order\r\n             * to ensure compatibility.\r\n             *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\r\n             *    formats \"X\" and \"X.Y\" are also acceptable.\r\n             *  @returns {boolean} true if this version of DataTables is greater or equal to the required\r\n             *    version, or false if this version of DataTales is not suitable\r\n             *  @method\r\n             *  @dtopt API\r\n             *  @deprecated Since v1.10\r\n             *\r\n             *  @example\r\n             *    $(document).ready(function() {\r\n\t\t *      var oTable = $('#example').dataTable();\r\n\t\t *      alert( oTable.fnVersionCheck( '1.9.0' ) );\r\n\t\t *    } );\r\n             */\r\n            this.fnVersionCheck = _ext.fnVersionCheck;\r\n\r\n\r\n            var _that = this;\r\n            var emptyInit = options === undefined;\r\n            var len = this.length;\r\n\r\n            if ( emptyInit ) {\r\n                options = {};\r\n            }\r\n\r\n            this.oApi = this.internal = _ext.internal;\r\n\r\n            // Extend with old style plug-in API methods\r\n            for ( var fn in DataTable.ext.internal ) {\r\n                if ( fn ) {\r\n                    this[fn] = _fnExternApiFunc(fn);\r\n                }\r\n            }\r\n\r\n            this.each(function() {\r\n                // For each initialisation we want to give it a clean initialisation\r\n                // object that can be bashed around\r\n                var o = {};\r\n                var oInit = len > 1 ? // optimisation for single table case\r\n                    _fnExtend( o, options, true ) :\r\n                    options;\r\n\r\n                /*global oInit,_that,emptyInit*/\r\n                var i=0, iLen, j, jLen, k, kLen;\r\n                var sId = this.getAttribute( 'id' );\r\n                var bInitHandedOff = false;\r\n                var defaults = DataTable.defaults;\r\n\r\n\r\n                /* Sanity check */\r\n                if ( this.nodeName.toLowerCase() != 'table' )\r\n                {\r\n                    _fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );\r\n                    return;\r\n                }\r\n\r\n                /* Backwards compatibility for the defaults */\r\n                _fnCompatOpts( defaults );\r\n                _fnCompatCols( defaults.column );\r\n\r\n                /* Convert the camel-case defaults to Hungarian */\r\n                _fnCamelToHungarian( defaults, defaults, true );\r\n                _fnCamelToHungarian( defaults.column, defaults.column, true );\r\n\r\n                /* Setting up the initialisation object */\r\n                _fnCamelToHungarian( defaults, oInit );\r\n\r\n                /* Check to see if we are re-initialising a table */\r\n                var allSettings = DataTable.settings;\r\n                for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )\r\n                {\r\n                    /* Base check on table node */\r\n                    if ( allSettings[i].nTable == this )\r\n                    {\r\n                        var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\r\n                        var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\r\n\r\n                        if ( emptyInit || bRetrieve )\r\n                        {\r\n                            return allSettings[i].oInstance;\r\n                        }\r\n                        else if ( bDestroy )\r\n                        {\r\n                            allSettings[i].oInstance.fnDestroy();\r\n                            break;\r\n                        }\r\n                        else\r\n                        {\r\n                            _fnLog( allSettings[i], 0, 'Cannot reinitialise DataTable', 3 );\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    /* If the element we are initialising has the same ID as a table which was previously\r\n                     * initialised, but the table nodes don't match (from before) then we destroy the old\r\n                     * instance by simply deleting it. This is under the assumption that the table has been\r\n                     * destroyed by other methods. Anyone using non-id selectors will need to do this manually\r\n                     */\r\n                    if ( allSettings[i].sTableId == this.id )\r\n                    {\r\n                        allSettings.splice( i, 1 );\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                /* Ensure the table has an ID - required for accessibility */\r\n                if ( sId === null || sId === \"\" )\r\n                {\r\n                    sId = \"DataTables_Table_\"+(DataTable.ext._unique++);\r\n                    this.id = sId;\r\n                }\r\n\r\n                /* Create the settings object for this table and set some of the default parameters */\r\n                var oSettings = $.extend( true, {}, DataTable.models.oSettings, {\r\n                    \"nTable\":        this,\r\n                    \"oApi\":          _that.internal,\r\n                    \"oInit\":         oInit,\r\n                    \"sDestroyWidth\": $(this)[0].style.width,\r\n                    \"sInstance\":     sId,\r\n                    \"sTableId\":      sId\r\n                } );\r\n                allSettings.push( oSettings );\r\n\r\n                // Need to add the instance after the instance after the settings object has been added\r\n                // to the settings array, so we can self reference the table instance if more than one\r\n                oSettings.oInstance = (_that.length===1) ? _that : $(this).dataTable();\r\n\r\n                // Backwards compatibility, before we apply all the defaults\r\n                _fnCompatOpts( oInit );\r\n\r\n                if ( oInit.oLanguage )\r\n                {\r\n                    _fnLanguageCompat( oInit.oLanguage );\r\n                }\r\n\r\n                // If the length menu is given, but the init display length is not, use the length menu\r\n                if ( oInit.aLengthMenu && ! oInit.iDisplayLength )\r\n                {\r\n                    oInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?\r\n                        oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\r\n                }\r\n\r\n                // Apply the defaults and init options to make a single init object will all\r\n                // options defined from defaults and instance options.\r\n                oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );\r\n\r\n\r\n                // Map the initialisation options onto the settings object\r\n                _fnMap( oSettings.oFeatures, oInit, [\r\n                    \"bPaginate\",\r\n                    \"bLengthChange\",\r\n                    \"bFilter\",\r\n                    \"bSort\",\r\n                    \"bSortMulti\",\r\n                    \"bInfo\",\r\n                    \"bProcessing\",\r\n                    \"bAutoWidth\",\r\n                    \"bSortClasses\",\r\n                    \"bServerSide\",\r\n                    \"bDeferRender\"\r\n                ] );\r\n                _fnMap( oSettings, oInit, [\r\n                    \"asStripeClasses\",\r\n                    \"ajax\",\r\n                    \"fnServerData\",\r\n                    \"fnFormatNumber\",\r\n                    \"sServerMethod\",\r\n                    \"aaSorting\",\r\n                    \"aaSortingFixed\",\r\n                    \"aLengthMenu\",\r\n                    \"sPaginationType\",\r\n                    \"sAjaxSource\",\r\n                    \"sAjaxDataProp\",\r\n                    \"iStateDuration\",\r\n                    \"sDom\",\r\n                    \"bSortCellsTop\",\r\n                    \"iTabIndex\",\r\n                    \"fnStateLoadCallback\",\r\n                    \"fnStateSaveCallback\",\r\n                    \"renderer\",\r\n                    [ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat\r\n                    [ \"oSearch\", \"oPreviousSearch\" ],\r\n                    [ \"aoSearchCols\", \"aoPreSearchCols\" ],\r\n                    [ \"iDisplayLength\", \"_iDisplayLength\" ],\r\n                    [ \"bJQueryUI\", \"bJUI\" ]\r\n                ] );\r\n                _fnMap( oSettings.oScroll, oInit, [\r\n                    [ \"sScrollX\", \"sX\" ],\r\n                    [ \"sScrollXInner\", \"sXInner\" ],\r\n                    [ \"sScrollY\", \"sY\" ],\r\n                    [ \"bScrollCollapse\", \"bCollapse\" ]\r\n                ] );\r\n                _fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );\r\n\r\n                /* Callback functions which are array driven */\r\n                _fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );\r\n                _fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );\r\n                _fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );\r\n                _fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );\r\n                _fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );\r\n                _fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );\r\n                _fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );\r\n                _fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );\r\n                _fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );\r\n                _fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );\r\n                _fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );\r\n\r\n                var oClasses = oSettings.oClasses;\r\n\r\n                // @todo Remove in 1.11\r\n                if ( oInit.bJQueryUI )\r\n                {\r\n                    /* Use the JUI classes object for display. You could clone the oStdClasses object if\r\n                     * you want to have multiple tables with multiple independent classes\r\n                     */\r\n                    $.extend( oClasses, DataTable.ext.oJUIClasses, oInit.oClasses );\r\n\r\n                    if ( oInit.sDom === defaults.sDom && defaults.sDom === \"lfrtip\" )\r\n                    {\r\n                        /* Set the DOM to use a layout suitable for jQuery UI's theming */\r\n                        oSettings.sDom = '<\"H\"lfr>t<\"F\"ip>';\r\n                    }\r\n\r\n                    if ( ! oSettings.renderer ) {\r\n                        oSettings.renderer = 'jqueryui';\r\n                    }\r\n                    else if ( $.isPlainObject( oSettings.renderer ) && ! oSettings.renderer.header ) {\r\n                        oSettings.renderer.header = 'jqueryui';\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    $.extend( oClasses, DataTable.ext.classes, oInit.oClasses );\r\n                }\r\n                $(this).addClass( oClasses.sTable );\r\n\r\n                /* Calculate the scroll bar width and cache it for use later on */\r\n                if ( oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\" )\r\n                {\r\n                    oSettings.oScroll.iBarWidth = _fnScrollBarWidth();\r\n                }\r\n                if ( oSettings.oScroll.sX === true ) { // Easy initialisation of x-scrolling\r\n                    oSettings.oScroll.sX = '100%';\r\n                }\r\n\r\n                if ( oSettings.iInitDisplayStart === undefined )\r\n                {\r\n                    /* Display start point, taking into account the save saving */\r\n                    oSettings.iInitDisplayStart = oInit.iDisplayStart;\r\n                    oSettings._iDisplayStart = oInit.iDisplayStart;\r\n                }\r\n\r\n                if ( oInit.iDeferLoading !== null )\r\n                {\r\n                    oSettings.bDeferLoading = true;\r\n                    var tmp = $.isArray( oInit.iDeferLoading );\r\n                    oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\r\n                    oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\r\n                }\r\n\r\n                /* Language definitions */\r\n                if ( oInit.oLanguage.sUrl !== \"\" )\r\n                {\r\n                    /* Get the language definitions from a file - because this Ajax call makes the language\r\n                     * get async to the remainder of this function we use bInitHandedOff to indicate that\r\n                     * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\r\n                     */\r\n                    oSettings.oLanguage.sUrl = oInit.oLanguage.sUrl;\r\n                    $.getJSON( oSettings.oLanguage.sUrl, null, function( json ) {\r\n                        _fnLanguageCompat( json );\r\n                        _fnCamelToHungarian( defaults.oLanguage, json );\r\n                        $.extend( true, oSettings.oLanguage, oInit.oLanguage, json );\r\n                        _fnInitialise( oSettings );\r\n                    } );\r\n                    bInitHandedOff = true;\r\n                }\r\n                else\r\n                {\r\n                    $.extend( true, oSettings.oLanguage, oInit.oLanguage );\r\n                }\r\n\r\n\r\n                /*\r\n                 * Stripes\r\n                 */\r\n                if ( oInit.asStripeClasses === null )\r\n                {\r\n                    oSettings.asStripeClasses =[\r\n                        oClasses.sStripeOdd,\r\n                        oClasses.sStripeEven\r\n                    ];\r\n                }\r\n\r\n                /* Remove row stripe classes if they are already on the table row */\r\n                var stripeClasses = oSettings.asStripeClasses;\r\n                var rowOne = $('tbody tr:eq(0)', this);\r\n                if ( $.inArray( true, $.map( stripeClasses, function(el, i) {\r\n                        return rowOne.hasClass(el);\r\n                    } ) ) !== -1 ) {\r\n                    $('tbody tr', this).removeClass( stripeClasses.join(' ') );\r\n                    oSettings.asDestroyStripes = stripeClasses.slice();\r\n                }\r\n\r\n                /*\r\n                 * Columns\r\n                 * See if we should load columns automatically or use defined ones\r\n                 */\r\n                var anThs = [];\r\n                var aoColumnsInit;\r\n                var nThead = this.getElementsByTagName('thead');\r\n                if ( nThead.length !== 0 )\r\n                {\r\n                    _fnDetectHeader( oSettings.aoHeader, nThead[0] );\r\n                    anThs = _fnGetUniqueThs( oSettings );\r\n                }\r\n\r\n                /* If not given a column array, generate one with nulls */\r\n                if ( oInit.aoColumns === null )\r\n                {\r\n                    aoColumnsInit = [];\r\n                    for ( i=0, iLen=anThs.length ; i<iLen ; i++ )\r\n                    {\r\n                        aoColumnsInit.push( null );\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    aoColumnsInit = oInit.aoColumns;\r\n                }\r\n\r\n                /* Add the columns */\r\n                for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )\r\n                {\r\n                    _fnAddColumn( oSettings, anThs ? anThs[i] : null );\r\n                }\r\n\r\n                /* Apply the column definitions */\r\n                _fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\r\n                    _fnColumnOptions( oSettings, iCol, oDef );\r\n                } );\r\n\r\n                /* HTML5 attribute detection - build an mData object automatically if the\r\n                 * attributes are found\r\n                 */\r\n                if ( rowOne.length ) {\r\n                    var a = function ( cell, name ) {\r\n                        return cell.getAttribute( 'data-'+name ) ? name : null;\r\n                    };\r\n\r\n                    $.each( _fnGetRowElements( oSettings, rowOne[0] ).cells, function (i, cell) {\r\n                        var col = oSettings.aoColumns[i];\r\n\r\n                        if ( col.mData === i ) {\r\n                            var sort = a( cell, 'sort' ) || a( cell, 'order' );\r\n                            var filter = a( cell, 'filter' ) || a( cell, 'search' );\r\n\r\n                            if ( sort !== null || filter !== null ) {\r\n                                col.mData = {\r\n                                    _:      i+'.display',\r\n                                    sort:   sort !== null   ? i+'.@data-'+sort   : undefined,\r\n                                    type:   sort !== null   ? i+'.@data-'+sort   : undefined,\r\n                                    filter: filter !== null ? i+'.@data-'+filter : undefined\r\n                                };\r\n\r\n                                _fnColumnOptions( oSettings, i );\r\n                            }\r\n                        }\r\n                    } );\r\n                }\r\n\r\n                var features = oSettings.oFeatures;\r\n\r\n                /* Must be done after everything which can be overridden by the state saving! */\r\n                if ( oInit.bStateSave )\r\n                {\r\n                    features.bStateSave = true;\r\n                    _fnLoadState( oSettings, oInit );\r\n                    _fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );\r\n                }\r\n\r\n\r\n                /*\r\n                 * Sorting\r\n                 * @todo For modularisation (1.11) this needs to do into a sort start up handler\r\n                 */\r\n\r\n                // If aaSorting is not defined, then we use the first indicator in asSorting\r\n                // in case that has been altered, so the default sort reflects that option\r\n                if ( oInit.aaSorting === undefined )\r\n                {\r\n                    var sorting = oSettings.aaSorting;\r\n                    for ( i=0, iLen=sorting.length ; i<iLen ; i++ )\r\n                    {\r\n                        sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];\r\n                    }\r\n                }\r\n\r\n                /* Do a first pass on the sorting classes (allows any size changes to be taken into\r\n                 * account, and also will apply sorting disabled classes if disabled\r\n                 */\r\n                _fnSortingClasses( oSettings );\r\n\r\n                if ( features.bSort )\r\n                {\r\n                    _fnCallbackReg( oSettings, 'aoDrawCallback', function () {\r\n                        if ( oSettings.bSorted ) {\r\n                            var aSort = _fnSortFlatten( oSettings );\r\n                            var sortedColumns = {};\r\n\r\n                            $.each( aSort, function (i, val) {\r\n                                sortedColumns[ val.src ] = val.dir;\r\n                            } );\r\n\r\n                            _fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );\r\n                            _fnSortAria( oSettings );\r\n                        }\r\n                    } );\r\n                }\r\n\r\n                _fnCallbackReg( oSettings, 'aoDrawCallback', function () {\r\n                    if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {\r\n                        _fnSortingClasses( oSettings );\r\n                    }\r\n                }, 'sc' );\r\n\r\n\r\n                /*\r\n                 * Final init\r\n                 * Cache the header, body and footer as required, creating them if needed\r\n                 */\r\n\r\n                /* Browser support detection */\r\n                _fnBrowserDetect( oSettings );\r\n\r\n                // Work around for Webkit bug 83867 - store the caption-side before removing from doc\r\n                var captions = $(this).children('caption').each( function () {\r\n                    this._captionSide = $(this).css('caption-side');\r\n                } );\r\n\r\n                var thead = $(this).children('thead');\r\n                if ( thead.length === 0 )\r\n                {\r\n                    thead = $('<thead/>').appendTo(this);\r\n                }\r\n                oSettings.nTHead = thead[0];\r\n\r\n                var tbody = $(this).children('tbody');\r\n                if ( tbody.length === 0 )\r\n                {\r\n                    tbody = $('<tbody/>').appendTo(this);\r\n                }\r\n                oSettings.nTBody = tbody[0];\r\n\r\n                var tfoot = $(this).children('tfoot');\r\n                if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") )\r\n                {\r\n                    // If we are a scrolling table, and no footer has been given, then we need to create\r\n                    // a tfoot element for the caption element to be appended to\r\n                    tfoot = $('<tfoot/>').appendTo(this);\r\n                }\r\n\r\n                if ( tfoot.length === 0 || tfoot.children().length === 0 ) {\r\n                    $(this).addClass( oClasses.sNoFooter );\r\n                }\r\n                else if ( tfoot.length > 0 ) {\r\n                    oSettings.nTFoot = tfoot[0];\r\n                    _fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );\r\n                }\r\n\r\n                /* Check if there is data passing into the constructor */\r\n                if ( oInit.aaData )\r\n                {\r\n                    for ( i=0 ; i<oInit.aaData.length ; i++ )\r\n                    {\r\n                        _fnAddData( oSettings, oInit.aaData[ i ] );\r\n                    }\r\n                }\r\n                else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' )\r\n                {\r\n                    /* Grab the data from the page - only do this when deferred loading or no Ajax\r\n                     * source since there is no point in reading the DOM data if we are then going\r\n                     * to replace it with Ajax data\r\n                     */\r\n                    _fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );\r\n                }\r\n\r\n                /* Copy the data index array */\r\n                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\r\n\r\n                /* Initialisation complete - table can be drawn */\r\n                oSettings.bInitialised = true;\r\n\r\n                /* Check if we need to initialise the table (it might not have been handed off to the\r\n                 * language processor)\r\n                 */\r\n                if ( bInitHandedOff === false )\r\n                {\r\n                    _fnInitialise( oSettings );\r\n                }\r\n            } );\r\n            _that = null;\r\n            return this;\r\n        };\r\n\r\n\r\n\r\n        /**\r\n         * Computed structure of the DataTables API, defined by the options passed to\r\n         * `DataTable.Api.register()` when building the API.\r\n         *\r\n         * The structure is built in order to speed creation and extension of the Api\r\n         * objects since the extensions are effectively pre-parsed.\r\n         *\r\n         * The array is an array of objects with the following structure, where this\r\n         * base array represents the Api prototype base:\r\n         *\r\n         *     [\r\n         *       {\r\n\t *         name:      'data'                -- string   - Property name\r\n\t *         val:       function () {},       -- function - Api method (or undefined if just an object\r\n\t *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\r\n\t *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\r\n\t *       },\r\n         *       {\r\n\t *         name:     'row'\r\n\t *         val:       {},\r\n\t *         methodExt: [ ... ],\r\n\t *         propExt:   [\r\n\t *           {\r\n\t *             name:      'data'\r\n\t *             val:       function () {},\r\n\t *             methodExt: [ ... ],\r\n\t *             propExt:   [ ... ]\r\n\t *           },\r\n\t *           ...\r\n\t *         ]\r\n\t *       }\r\n         *     ]\r\n         *\r\n         * @type {Array}\r\n         * @ignore\r\n         */\r\n        var __apiStruct = [];\r\n\r\n\r\n        /**\r\n         * `Array.prototype` reference.\r\n         *\r\n         * @type object\r\n         * @ignore\r\n         */\r\n        var __arrayProto = Array.prototype;\r\n\r\n\r\n        /**\r\n         * Abstraction for `context` parameter of the `Api` constructor to allow it to\r\n         * take several different forms for ease of use.\r\n         *\r\n         * Each of the input parameter types will be converted to a DataTables settings\r\n         * object where possible.\r\n         *\r\n         * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\r\n         *   of:\r\n         *\r\n         *   * `string` - jQuery selector. Any DataTables' matching the given selector\r\n         *     with be found and used.\r\n         *   * `node` - `TABLE` node which has already been formed into a DataTable.\r\n         *   * `jQuery` - A jQuery object of `TABLE` nodes.\r\n         *   * `object` - DataTables settings object\r\n         *   * `DataTables.Api` - API instance\r\n         * @return {array|null} Matching DataTables settings objects. `null` or\r\n         *   `undefined` is returned if no matching DataTable is found.\r\n         * @ignore\r\n         */\r\n        var _toSettings = function ( mixed )\r\n        {\r\n            var idx, jq;\r\n            var settings = DataTable.settings;\r\n            var tables = $.map( settings, function (el, i) {\r\n                return el.nTable;\r\n            } );\r\n\r\n            if ( ! mixed ) {\r\n                return [];\r\n            }\r\n            else if ( mixed.nTable && mixed.oApi ) {\r\n                // DataTables settings object\r\n                return [ mixed ];\r\n            }\r\n            else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {\r\n                // Table node\r\n                idx = $.inArray( mixed, tables );\r\n                return idx !== -1 ? [ settings[idx] ] : null;\r\n            }\r\n            else if ( mixed && typeof mixed.settings === 'function' ) {\r\n                return mixed.settings().toArray();\r\n            }\r\n            else if ( typeof mixed === 'string' ) {\r\n                // jQuery selector\r\n                jq = $(mixed);\r\n            }\r\n            else if ( mixed instanceof $ ) {\r\n                // jQuery object (also DataTables instance)\r\n                jq = mixed;\r\n            }\r\n\r\n            if ( jq ) {\r\n                return jq.map( function(i) {\r\n                    idx = $.inArray( this, tables );\r\n                    return idx !== -1 ? settings[idx] : null;\r\n                } ).toArray();\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * DataTables API class - used to control and interface with  one or more\r\n         * DataTables enhanced tables.\r\n         *\r\n         * The API class is heavily based on jQuery, presenting a chainable interface\r\n         * that you can use to interact with tables. Each instance of the API class has\r\n         * a \"context\" - i.e. the tables that it will operate on. This could be a single\r\n         * table, all tables on a page or a sub-set thereof.\r\n         *\r\n         * Additionally the API is designed to allow you to easily work with the data in\r\n         * the tables, retrieving and manipulating it as required. This is done by\r\n         * presenting the API class as an array like interface. The contents of the\r\n         * array depend upon the actions requested by each method (for example\r\n         * `rows().nodes()` will return an array of nodes, while `rows().data()` will\r\n         * return an array of objects or arrays depending upon your table's\r\n         * configuration). The API object has a number of array like methods (`push`,\r\n         * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\r\n         * `unique` etc) to assist your working with the data held in a table.\r\n         *\r\n         * Most methods (those which return an Api instance) are chainable, which means\r\n         * the return from a method call also has all of the methods available that the\r\n         * top level object had. For example, these two calls are equivalent:\r\n         *\r\n         *     // Not chained\r\n         *     api.row.add( {...} );\r\n         *     api.draw();\r\n         *\r\n         *     // Chained\r\n         *     api.row.add( {...} ).draw();\r\n         *\r\n         * @class DataTable.Api\r\n         * @param {array|object|string|jQuery} context DataTable identifier. This is\r\n         *   used to define which DataTables enhanced tables this API will operate on.\r\n         *   Can be one of:\r\n         *\r\n         *   * `string` - jQuery selector. Any DataTables' matching the given selector\r\n         *     with be found and used.\r\n         *   * `node` - `TABLE` node which has already been formed into a DataTable.\r\n         *   * `jQuery` - A jQuery object of `TABLE` nodes.\r\n         *   * `object` - DataTables settings object\r\n         * @param {array} [data] Data to initialise the Api instance with.\r\n         *\r\n         * @example\r\n         *   // Direct initialisation during DataTables construction\r\n         *   var api = $('#example').DataTable();\r\n         *\r\n         * @example\r\n         *   // Initialisation using a DataTables jQuery object\r\n         *   var api = $('#example').dataTable().api();\r\n         *\r\n         * @example\r\n         *   // Initialisation as a constructor\r\n         *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\r\n         */\r\n        _Api = function ( context, data )\r\n        {\r\n            if ( ! this instanceof _Api ) {\r\n                throw 'DT API must be constructed as a new object';\r\n                // or should it do the 'new' for the caller?\r\n                // return new _Api.apply( this, arguments );\r\n            }\r\n\r\n            var settings = [];\r\n            var ctxSettings = function ( o ) {\r\n                var a = _toSettings( o );\r\n                if ( a ) {\r\n                    settings.push.apply( settings, a );\r\n                }\r\n            };\r\n\r\n            if ( $.isArray( context ) ) {\r\n                for ( var i=0, ien=context.length ; i<ien ; i++ ) {\r\n                    ctxSettings( context[i] );\r\n                }\r\n            }\r\n            else {\r\n                ctxSettings( context );\r\n            }\r\n\r\n            // Remove duplicates\r\n            this.context = _unique( settings );\r\n\r\n            // Initial data\r\n            if ( data ) {\r\n                this.push.apply( this, data.toArray ? data.toArray() : data );\r\n            }\r\n\r\n            // selector\r\n            this.selector = {\r\n                rows: null,\r\n                cols: null,\r\n                opts: null\r\n            };\r\n\r\n            _Api.extend( this, this, __apiStruct );\r\n        };\r\n\r\n        DataTable.Api = _Api;\r\n\r\n        _Api.prototype = /** @lends DataTables.Api */{\r\n            /**\r\n             * Return a new Api instance, comprised of the data held in the current\r\n             * instance, join with the other array(s) and/or value(s).\r\n             *\r\n             * An alias for `Array.prototype.concat`.\r\n             *\r\n             * @type method\r\n             * @param {*} value1 Arrays and/or values to concatenate.\r\n             * @param {*} [...] Additional arrays and/or values to concatenate.\r\n             * @returns {DataTables.Api} New API instance, comprising of the combined\r\n             *   array.\r\n             */\r\n            concat:  __arrayProto.concat,\r\n\r\n\r\n            context: [], // array of table settings objects\r\n\r\n\r\n            each: function ( fn )\r\n            {\r\n                for ( var i=0, ien=this.length ; i<ien; i++ ) {\r\n                    fn.call( this, this[i], i, this );\r\n                }\r\n\r\n                return this;\r\n            },\r\n\r\n\r\n            eq: function ( idx )\r\n            {\r\n                var ctx = this.context;\r\n\r\n                return ctx.length > idx ?\r\n                    new _Api( ctx[idx], this[idx] ) :\r\n                    null;\r\n            },\r\n\r\n\r\n            filter: function ( fn )\r\n            {\r\n                var a = [];\r\n\r\n                if ( __arrayProto.filter ) {\r\n                    a = __arrayProto.filter.call( this, fn, this );\r\n                }\r\n                else {\r\n                    // Compatibility for browsers without EMCA-252-5 (JS 1.6)\r\n                    for ( var i=0, ien=this.length ; i<ien ; i++ ) {\r\n                        if ( fn.call( this, this[i], i, this ) ) {\r\n                            a.push( this[i] );\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return new _Api( this.context, a );\r\n            },\r\n\r\n\r\n            flatten: function ()\r\n            {\r\n                var a = [];\r\n                return new _Api( this.context, a.concat.apply( a, this.toArray() ) );\r\n            },\r\n\r\n\r\n            join:    __arrayProto.join,\r\n\r\n\r\n            indexOf: __arrayProto.indexOf || function (obj, start)\r\n            {\r\n                for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {\r\n                    if ( this[i] === obj ) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return -1;\r\n            },\r\n\r\n            // Internal only at the moment - relax?\r\n            iterator: function ( flatten, type, fn ) {\r\n                var\r\n                    a = [], ret,\r\n                    i, ien, j, jen,\r\n                    context = this.context,\r\n                    rows, items, item,\r\n                    selector = this.selector;\r\n\r\n                // Argument shifting\r\n                if ( typeof flatten === 'string' ) {\r\n                    fn = type;\r\n                    type = flatten;\r\n                    flatten = false;\r\n                }\r\n\r\n                for ( i=0, ien=context.length ; i<ien ; i++ ) {\r\n                    if ( type === 'table' ) {\r\n                        ret = fn( context[i], i );\r\n\r\n                        if ( ret !== undefined ) {\r\n                            a.push( ret );\r\n                        }\r\n                    }\r\n                    else if ( type === 'columns' || type === 'rows' ) {\r\n                        // this has same length as context - one entry for each table\r\n                        ret = fn( context[i], this[i], i );\r\n\r\n                        if ( ret !== undefined ) {\r\n                            a.push( ret );\r\n                        }\r\n                    }\r\n                    else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {\r\n                        // columns and rows share the same structure.\r\n                        // 'this' is an array of column indexes for each context\r\n                        items = this[i];\r\n\r\n                        if ( type === 'column-rows' ) {\r\n                            rows = _selector_row_indexes( context[i], selector.opts );\r\n                        }\r\n\r\n                        for ( j=0, jen=items.length ; j<jen ; j++ ) {\r\n                            item = items[j];\r\n\r\n                            if ( type === 'cell' ) {\r\n                                ret = fn( context[i], item.row, item.column, i, j );\r\n                            }\r\n                            else {\r\n                                ret = fn( context[i], item, i, j, rows );\r\n                            }\r\n\r\n                            if ( ret !== undefined ) {\r\n                                a.push( ret );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if ( a.length ) {\r\n                    var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );\r\n                    var apiSelector = api.selector;\r\n                    apiSelector.rows = selector.rows;\r\n                    apiSelector.cols = selector.cols;\r\n                    apiSelector.opts = selector.opts;\r\n                    return api;\r\n                }\r\n                return this;\r\n            },\r\n\r\n\r\n            lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)\r\n            {\r\n                // Bit cheeky...\r\n                return this.indexOf.apply( this.toArray.reverse(), arguments );\r\n            },\r\n\r\n\r\n            length:  0,\r\n\r\n\r\n            map: function ( fn )\r\n            {\r\n                var a = [];\r\n\r\n                if ( __arrayProto.map ) {\r\n                    a = __arrayProto.map.call( this, fn, this );\r\n                }\r\n                else {\r\n                    // Compatibility for browsers without EMCA-252-5 (JS 1.6)\r\n                    for ( var i=0, ien=this.length ; i<ien ; i++ ) {\r\n                        a.push( fn.call( this, this[i], i ) );\r\n                    }\r\n                }\r\n\r\n                return new _Api( this.context, a );\r\n            },\r\n\r\n\r\n            pluck: function ( prop )\r\n            {\r\n                return this.map( function ( el ) {\r\n                    return el[ prop ];\r\n                } );\r\n            },\r\n\r\n            pop:     __arrayProto.pop,\r\n\r\n\r\n            push:    __arrayProto.push,\r\n\r\n\r\n            // Does not return an API instance\r\n            reduce: __arrayProto.reduce || function ( fn, init )\r\n            {\r\n                return _fnReduce( this, fn, init, 0, this.length, 1 );\r\n            },\r\n\r\n\r\n            reduceRight: __arrayProto.reduceRight || function ( fn, init )\r\n            {\r\n                return _fnReduce( this, fn, init, this.length-1, -1, -1 );\r\n            },\r\n\r\n\r\n            reverse: __arrayProto.reverse,\r\n\r\n\r\n            // Object with rows, columns and opts\r\n            selector: null,\r\n\r\n\r\n            shift:   __arrayProto.shift,\r\n\r\n\r\n            sort:    __arrayProto.sort, // ? name - order?\r\n\r\n\r\n            splice:  __arrayProto.splice,\r\n\r\n\r\n            toArray: function ()\r\n            {\r\n                return __arrayProto.slice.call( this );\r\n            },\r\n\r\n\r\n            to$: function ()\r\n            {\r\n                return $( this );\r\n            },\r\n\r\n\r\n            toJQuery: function ()\r\n            {\r\n                return $( this );\r\n            },\r\n\r\n\r\n            unique: function ()\r\n            {\r\n                return new _Api( this.context, _unique(this) );\r\n            },\r\n\r\n\r\n            unshift: __arrayProto.unshift\r\n        };\r\n\r\n\r\n        _Api.extend = function ( scope, obj, ext )\r\n        {\r\n            // Only extend API instances and static properties of the API\r\n            if ( ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {\r\n                return;\r\n            }\r\n\r\n            var\r\n                i, ien,\r\n                j, jen,\r\n                struct, inner,\r\n                methodScoping = function ( scope, fn, struc ) {\r\n                    return function () {\r\n                        var ret = fn.apply( scope, arguments );\r\n\r\n                        // Method extension\r\n                        _Api.extend( ret, ret, struc.methodExt );\r\n                        return ret;\r\n                    };\r\n                };\r\n\r\n            for ( i=0, ien=ext.length ; i<ien ; i++ ) {\r\n                struct = ext[i];\r\n\r\n                // Value\r\n                obj[ struct.name ] = typeof struct.val === 'function' ?\r\n                    methodScoping( scope, struct.val, struct ) :\r\n                    $.isPlainObject( struct.val ) ?\r\n                    {} :\r\n                        struct.val;\r\n\r\n                obj[ struct.name ].__dt_wrapper = true;\r\n\r\n                // Property extension\r\n                _Api.extend( scope, obj[ struct.name ], struct.propExt );\r\n            }\r\n        };\r\n\r\n\r\n        // @todo - Is there need for an augment function?\r\n        // _Api.augment = function ( inst, name )\r\n        // {\r\n        // \t// Find src object in the structure from the name\r\n        // \tvar parts = name.split('.');\r\n\r\n        // \t_Api.extend( inst, obj );\r\n        // };\r\n\r\n\r\n        //     [\r\n        //       {\r\n        //         name:      'data'                -- string   - Property name\r\n        //         val:       function () {},       -- function - Api method (or undefined if just an object\r\n        //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\r\n        //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\r\n        //       },\r\n        //       {\r\n        //         name:     'row'\r\n        //         val:       {},\r\n        //         methodExt: [ ... ],\r\n        //         propExt:   [\r\n        //           {\r\n        //             name:      'data'\r\n        //             val:       function () {},\r\n        //             methodExt: [ ... ],\r\n        //             propExt:   [ ... ]\r\n        //           },\r\n        //           ...\r\n        //         ]\r\n        //       }\r\n        //     ]\r\n\r\n        _Api.register = _api_register = function ( name, val )\r\n        {\r\n            if ( $.isArray( name ) ) {\r\n                for ( var j=0, jen=name.length ; j<jen ; j++ ) {\r\n                    _Api.register( name[j], val );\r\n                }\r\n                return;\r\n            }\r\n\r\n            var\r\n                i, ien,\r\n                heir = name.split('.'),\r\n                struct = __apiStruct,\r\n                key, method;\r\n\r\n            var find = function ( src, name ) {\r\n                for ( var i=0, ien=src.length ; i<ien ; i++ ) {\r\n                    if ( src[i].name === name ) {\r\n                        return src[i];\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n\r\n            for ( i=0, ien=heir.length ; i<ien ; i++ ) {\r\n                method = heir[i].indexOf('()') !== -1;\r\n                key = method ?\r\n                    heir[i].replace('()', '') :\r\n                    heir[i];\r\n\r\n                var src = find( struct, key );\r\n                if ( ! src ) {\r\n                    src = {\r\n                        name:      key,\r\n                        val:       {},\r\n                        methodExt: [],\r\n                        propExt:   []\r\n                    };\r\n                    struct.push( src );\r\n                }\r\n\r\n                if ( i === ien-1 ) {\r\n                    src.val = val;\r\n                }\r\n                else {\r\n                    struct = method ?\r\n                        src.methodExt :\r\n                        src.propExt;\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        _Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {\r\n            _Api.register( pluralName, val );\r\n\r\n            _Api.register( singularName, function () {\r\n                var ret = val.apply( this, arguments );\r\n\r\n                if ( ret === this ) {\r\n                    // Returned item is the API instance that was passed in, return it\r\n                    return this;\r\n                }\r\n                else if ( ret instanceof _Api ) {\r\n                    // New API instance returned, want the value from the first item\r\n                    // in the returned array for the singular result.\r\n                    return ret.length ?\r\n                        $.isArray( ret[0] ) ?\r\n                            new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'\r\n                            ret[0] :\r\n                        undefined;\r\n                }\r\n\r\n                // Non-API return - just fire it back\r\n                return ret;\r\n            } );\r\n        };\r\n\r\n\r\n        /**\r\n         * Selector for HTML tables. Apply the given selector to the give array of\r\n         * DataTables settings objects.\r\n         *\r\n         * @param {string|integer} [selector] jQuery selector string or integer\r\n         * @param  {array} Array of DataTables settings objects to be filtered\r\n         * @return {array}\r\n         * @ignore\r\n         */\r\n        var __table_selector = function ( selector, a )\r\n        {\r\n            // Integer is used to pick out a table by index\r\n            if ( typeof selector === 'number' ) {\r\n                return [ a[ selector ] ];\r\n            }\r\n\r\n            // Perform a jQuery selector on the table nodes\r\n            var nodes = $.map( a, function (el, i) {\r\n                return el.nTable;\r\n            } );\r\n\r\n            return $(nodes)\r\n                .filter( selector )\r\n                .map( function (i) {\r\n                    // Need to translate back from the table node to the settings\r\n                    var idx = $.inArray( this, nodes );\r\n                    return a[ idx ];\r\n                } )\r\n                .toArray();\r\n        };\r\n\r\n\r\n\r\n        /**\r\n         * Context selector for the API's context (i.e. the tables the API instance\r\n         * refers to.\r\n         *\r\n         * @name    DataTable.Api#tables\r\n         * @param {string|integer} [selector] Selector to pick which tables the iterator\r\n         *   should operate on. If not given, all tables in the current context are\r\n         *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\r\n         *   select multiple tables or as an integer to select a single table.\r\n         * @returns {DataTable.Api} Returns a new API instance if a selector is given.\r\n         */\r\n        _api_register( 'tables()', function ( selector ) {\r\n            // A new instance is created if there was a selector specified\r\n            return selector ?\r\n                new _Api( __table_selector( selector, this.context ) ) :\r\n                this;\r\n        } );\r\n\r\n\r\n        _api_register( 'table()', function ( selector ) {\r\n            var tables = this.tables( selector );\r\n            var ctx = tables.context;\r\n\r\n            // Truncate to the first matched table\r\n            return ctx.length ?\r\n                new _Api( ctx[0] ) :\r\n                tables;\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'tables().nodes()', 'table().node()' , function () {\r\n            return this.iterator( 'table', function ( ctx ) {\r\n                return ctx.nTable;\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'tables().body()', 'table().body()' , function () {\r\n            return this.iterator( 'table', function ( ctx ) {\r\n                return ctx.nTBody;\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'tables().header()', 'table().header()' , function () {\r\n            return this.iterator( 'table', function ( ctx ) {\r\n                return ctx.nTHead;\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'tables().footer()', 'table().footer()' , function () {\r\n            return this.iterator( 'table', function ( ctx ) {\r\n                return ctx.nTFoot;\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'tables().containers()', 'table().container()' , function () {\r\n            return this.iterator( 'table', function ( ctx ) {\r\n                return ctx.nTableWrapper;\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        /**\r\n         * Redraw the tables in the current context.\r\n         *\r\n         * @param {boolean} [reset=true] Reset (default) or hold the current paging\r\n         *   position. A full re-sort and re-filter is performed when this method is\r\n         *   called, which is why the pagination reset is the default action.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'draw()', function ( resetPaging ) {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnReDraw( settings, resetPaging===false );\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        /**\r\n         * Get the current page index.\r\n         *\r\n         * @return {integer} Current page index (zero based)\r\n         *//**\r\n         * Set the current page.\r\n         *\r\n         * Note that if you attempt to show a page which does not exist, DataTables will\r\n         * not throw an error, but rather reset the paging.\r\n         *\r\n         * @param {integer|string} action The paging action to take. This can be one of:\r\n         *  * `integer` - The page index to jump to\r\n         *  * `string` - An action to take:\r\n         *    * `first` - Jump to first page.\r\n         *    * `next` - Jump to the next page\r\n         *    * `previous` - Jump to previous page\r\n         *    * `last` - Jump to the last page.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'page()', function ( action ) {\r\n            if ( action === undefined ) {\r\n                return this.page.info().page; // not an expensive call\r\n            }\r\n\r\n            // else, have an action to take on all tables\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnPageChange( settings, action );\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         * Paging information for the first table in the current context.\r\n         *\r\n         * If you require paging information for another table, use the `table()` method\r\n         * with a suitable selector.\r\n         *\r\n         * @return {object} Object with the following properties set:\r\n         *  * `page` - Current page index (zero based - i.e. the first page is `0`)\r\n         *  * `pages` - Total number of pages\r\n         *  * `start` - Display index for the first record shown on the current page\r\n         *  * `end` - Display index for the last record shown on the current page\r\n         *  * `length` - Display length (number of records). Note that generally `start\r\n         *    + length = end`, but this is not always true, for example if there are\r\n         *    only 2 records to show on the final page, with a length of 10.\r\n         *  * `recordsTotal` - Full data set length\r\n         *  * `recordsDisplay` - Data set length once the current filtering criterion\r\n         *    are applied.\r\n         */\r\n        _api_register( 'page.info()', function ( action ) {\r\n            if ( this.context.length === 0 ) {\r\n                return undefined;\r\n            }\r\n\r\n            var\r\n                settings   = this.context[0],\r\n                start      = settings._iDisplayStart,\r\n                len        = settings._iDisplayLength,\r\n                visRecords = settings.fnRecordsDisplay(),\r\n                all        = len === -1;\r\n\r\n            return {\r\n                \"page\":           all ? 0 : Math.floor( start / len ),\r\n                \"pages\":          all ? 1 : Math.ceil( visRecords / len ),\r\n                \"start\":          start,\r\n                \"end\":            settings.fnDisplayEnd(),\r\n                \"length\":         len,\r\n                \"recordsTotal\":   settings.fnRecordsTotal(),\r\n                \"recordsDisplay\": visRecords\r\n            };\r\n        } );\r\n\r\n\r\n        /**\r\n         * Get the current page length.\r\n         *\r\n         * @return {integer} Current page length. Note `-1` indicates that all records\r\n         *   are to be shown.\r\n         *//**\r\n         * Set the current page length.\r\n         *\r\n         * @param {integer} Page length to set. Use `-1` to show all records.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'page.len()', function ( len ) {\r\n            // Note that we can't call this function 'length()' because `length`\r\n            // is a Javascript property of functions which defines how many arguments\r\n            // the function expects.\r\n            if ( len === undefined ) {\r\n                return this.context.length !== 0 ?\r\n                    this.context[0]._iDisplayLength :\r\n                    undefined;\r\n            }\r\n\r\n            // else, set the page length\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnLengthChange( settings, len );\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        var __reload = function ( settings, holdPosition, callback ) {\r\n            if ( _fnDataSource( settings ) == 'ssp' ) {\r\n                _fnReDraw( settings, holdPosition );\r\n            }\r\n            else {\r\n                // Trigger xhr\r\n                _fnProcessingDisplay( settings, true );\r\n\r\n                _fnBuildAjax( settings, [], function( json ) {\r\n                    _fnClearTable( settings );\r\n\r\n                    var data = _fnAjaxDataSrc( settings, json );\r\n                    for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                        _fnAddData( settings, data[i] );\r\n                    }\r\n\r\n                    _fnReDraw( settings, holdPosition );\r\n                    _fnProcessingDisplay( settings, false );\r\n                } );\r\n            }\r\n\r\n            // Use the draw event to trigger a callback, regardless of if it is an async\r\n            // or sync draw\r\n            if ( callback ) {\r\n                var api = new _Api( settings );\r\n\r\n                api.one( 'draw', function () {\r\n                    callback( api.ajax.json() );\r\n                } );\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * Get the JSON response from the last Ajax request that DataTables made to the\r\n         * server. Note that this returns the JSON from the first table in the current\r\n         * context.\r\n         *\r\n         * @return {object} JSON received from the server.\r\n         */\r\n        _api_register( 'ajax.json()', function () {\r\n            var ctx = this.context;\r\n\r\n            if ( ctx.length > 0 ) {\r\n                return ctx[0].json;\r\n            }\r\n\r\n            // else return undefined;\r\n        } );\r\n\r\n\r\n        /**\r\n         * Get the data submitted in the last Ajax request\r\n         */\r\n        _api_register( 'ajax.params()', function () {\r\n            var ctx = this.context;\r\n\r\n            if ( ctx.length > 0 ) {\r\n                return ctx[0].oAjaxData;\r\n            }\r\n\r\n            // else return undefined;\r\n        } );\r\n\r\n\r\n        /**\r\n         * Reload tables from the Ajax data source. Note that this function will\r\n         * automatically re-draw the table when the remote data has been loaded.\r\n         *\r\n         * @param {boolean} [reset=true] Reset (default) or hold the current paging\r\n         *   position. A full re-sort and re-filter is performed when this method is\r\n         *   called, which is why the pagination reset is the default action.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'ajax.reload()', function ( callback, resetPaging ) {\r\n            return this.iterator( 'table', function (settings) {\r\n                __reload( settings, resetPaging===false, callback );\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         * Get the current Ajax URL. Note that this returns the URL from the first\r\n         * table in the current context.\r\n         *\r\n         * @return {string} Current Ajax source URL\r\n         *//**\r\n         * Set the Ajax URL. Note that this will set the URL for all tables in the\r\n         * current context.\r\n         *\r\n         * @param {string} url URL to set.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'ajax.url()', function ( url ) {\r\n            var ctx = this.context;\r\n\r\n            if ( url === undefined ) {\r\n                // get\r\n                if ( ctx.length === 0 ) {\r\n                    return undefined;\r\n                }\r\n                ctx = ctx[0];\r\n\r\n                return ctx.ajax ?\r\n                    $.isPlainObject( ctx.ajax ) ?\r\n                        ctx.ajax.url :\r\n                        ctx.ajax :\r\n                    ctx.sAjaxSource;\r\n            }\r\n\r\n            // set\r\n            return this.iterator( 'table', function ( settings ) {\r\n                if ( $.isPlainObject( settings.ajax ) ) {\r\n                    settings.ajax.url = url;\r\n                }\r\n                else {\r\n                    settings.ajax = url;\r\n                }\r\n                // No need to consider sAjaxSource here since DataTables gives priority\r\n                // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\r\n                // value of `sAjaxSource` redundant.\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         * Load data from the newly set Ajax URL. Note that this method is only\r\n         * available when `ajax.url()` is used to set a URL. Additionally, this method\r\n         * has the same effect as calling `ajax.reload()` but is provided for\r\n         * convenience when setting a new URL. Like `ajax.reload()` it will\r\n         * automatically redraw the table once the remote data has been loaded.\r\n         *\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'ajax.url().load()', function ( callback, resetPaging ) {\r\n            // Same as a reload, but makes sense to present it for easy access after a\r\n            // url change\r\n            return this.iterator( 'table', function ( ctx ) {\r\n                __reload( ctx, resetPaging===false, callback );\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n\r\n        var _selector_run = function ( selector, select )\r\n        {\r\n            var\r\n                out = [], res,\r\n                a, i, ien, j, jen;\r\n\r\n            // Can't just check for isArray here, as an API or jQuery instance might be\r\n            // given with their array like look\r\n            if ( ! selector || typeof selector === 'string' || selector.length === undefined ) {\r\n                selector = [ selector ];\r\n            }\r\n\r\n            for ( i=0, ien=selector.length ; i<ien ; i++ ) {\r\n                a = selector[i] && selector[i].split ?\r\n                    selector[i].split(',') :\r\n                    [ selector[i] ];\r\n\r\n                for ( j=0, jen=a.length ; j<jen ; j++ ) {\r\n                    res = select( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );\r\n\r\n                    if ( res && res.length ) {\r\n                        out.push.apply( out, res );\r\n                    }\r\n                }\r\n            }\r\n\r\n            return out;\r\n        };\r\n\r\n\r\n        var _selector_opts = function ( opts )\r\n        {\r\n            if ( ! opts ) {\r\n                opts = {};\r\n            }\r\n\r\n            // Backwards compatibility for 1.9- which used the terminology filter rather\r\n            // than search\r\n            if ( opts.filter && ! opts.search ) {\r\n                opts.search = opts.filter;\r\n            }\r\n\r\n            return {\r\n                search: opts.search || 'none',\r\n                order:  opts.order  || 'current',\r\n                page:   opts.page   || 'all'\r\n            };\r\n        };\r\n\r\n\r\n        var _selector_first = function ( inst )\r\n        {\r\n            // Reduce the API instance to the first item found\r\n            for ( var i=0, ien=inst.length ; i<ien ; i++ ) {\r\n                if ( inst[i].length > 0 ) {\r\n                    // Assign the first element to the first item in the instance\r\n                    // and truncate the instance and context\r\n                    inst[0] = inst[i];\r\n                    inst.length = 1;\r\n                    inst.context = [ inst.context[i] ];\r\n\r\n                    return inst;\r\n                }\r\n            }\r\n\r\n            // Not found - return an empty instance\r\n            inst.length = 0;\r\n            return inst;\r\n        };\r\n\r\n\r\n        var _selector_row_indexes = function ( settings, opts )\r\n        {\r\n            var\r\n                i, ien, tmp, a=[],\r\n                displayFiltered = settings.aiDisplay,\r\n                displayMaster = settings.aiDisplayMaster;\r\n\r\n            var\r\n                search = opts.search,  // none, applied, removed\r\n                order  = opts.order,   // applied, current, index (original - compatibility with 1.9)\r\n                page   = opts.page;    // all, current\r\n\r\n            if ( _fnDataSource( settings ) == 'ssp' ) {\r\n                // In server-side processing mode, most options are irrelevant since\r\n                // rows not shown don't exist and the index order is the applied order\r\n                // Removed is a special case - for consistency just return an empty\r\n                // array\r\n                return search === 'removed' ?\r\n                    [] :\r\n                    _range( 0, displayMaster.length );\r\n            }\r\n            else if ( page == 'current' ) {\r\n                // Current page implies that order=current and fitler=applied, since it is\r\n                // fairly senseless otherwise, regardless of what order and search actually\r\n                // are\r\n                for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {\r\n                    a.push( displayFiltered[i] );\r\n                }\r\n            }\r\n            else if ( order == 'current' || order == 'applied' ) {\r\n                a = search == 'none' ?\r\n                    displayMaster.slice() :                      // no search\r\n                    search == 'applied' ?\r\n                        displayFiltered.slice() :                // applied search\r\n                        $.map( displayMaster, function (el, i) { // removed search\r\n                            return $.inArray( el, displayFiltered ) === -1 ? el : null;\r\n                        } );\r\n            }\r\n            else if ( order == 'index' || order == 'original' ) {\r\n                for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\r\n                    if ( search == 'none' ) {\r\n                        a.push( i );\r\n                    }\r\n                    else { // applied | removed\r\n                        tmp = $.inArray( i, displayFiltered );\r\n\r\n                        if ((tmp === -1 && search == 'removed') ||\r\n                            (tmp >= 0   && search == 'applied') )\r\n                        {\r\n                            a.push( i );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return a;\r\n        };\r\n\r\n\r\n        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n         * Rows\r\n         *\r\n         * {}          - no selector - use all available rows\r\n         * {integer}   - row aoData index\r\n         * {node}      - TR node\r\n         * {string}    - jQuery selector to apply to the TR elements\r\n         * {array}     - jQuery array of nodes, or simply an array of TR nodes\r\n         *\r\n         */\r\n\r\n\r\n        var __row_selector = function ( settings, selector, opts )\r\n        {\r\n            return _selector_run( selector, function ( sel ) {\r\n                var selInt = _intVal( sel );\r\n\r\n                // Short cut - selector is a number and no options provided (default is\r\n                // all records, so no need to check if the index is in there, since it\r\n                // must be - dev error if the index doesn't exist).\r\n                if ( selInt !== null && ! opts ) {\r\n                    return [ selInt ];\r\n                }\r\n\r\n                var rows = _selector_row_indexes( settings, opts );\r\n\r\n                if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {\r\n                    // Selector - integer\r\n                    return [ selInt ];\r\n                }\r\n                else if ( ! sel ) {\r\n                    // Selector - none\r\n                    return rows;\r\n                }\r\n\r\n                // Get nodes in the order from the `rows` array (can't use `pluck`) @todo - use pluck_order\r\n                var nodes = [];\r\n                for ( var i=0, ien=rows.length ; i<ien ; i++ ) {\r\n                    nodes.push( settings.aoData[ rows[i] ].nTr );\r\n                }\r\n\r\n                if ( sel.nodeName ) {\r\n                    // Selector - node\r\n                    if ( $.inArray( sel, nodes ) !== -1 ) {\r\n                        return [ sel._DT_RowIndex ];// sel is a TR node that is in the table\r\n                        // and DataTables adds a prop for fast lookup\r\n                    }\r\n                }\r\n\r\n                // Selector - jQuery selector string, array of nodes or jQuery object/\r\n                // As jQuery's .filter() allows jQuery objects to be passed in filter,\r\n                // it also allows arrays, so this will cope with all three options\r\n                return $(nodes)\r\n                    .filter( sel )\r\n                    .map( function () {\r\n                        return this._DT_RowIndex;\r\n                    } )\r\n                    .toArray();\r\n            } );\r\n        };\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_register( 'rows()', function ( selector, opts ) {\r\n            // argument shifting\r\n            if ( selector === undefined ) {\r\n                selector = '';\r\n            }\r\n            else if ( $.isPlainObject( selector ) ) {\r\n                opts = selector;\r\n                selector = '';\r\n            }\r\n\r\n            opts = _selector_opts( opts );\r\n\r\n            var inst = this.iterator( 'table', function ( settings ) {\r\n                return __row_selector( settings, selector, opts );\r\n            } );\r\n\r\n            // Want argument shifting here and in __row_selector?\r\n            inst.selector.rows = selector;\r\n            inst.selector.opts = opts;\r\n\r\n            return inst;\r\n        } );\r\n\r\n\r\n        _api_register( 'rows().nodes()', function () {\r\n            return this.iterator( 'row', function ( settings, row ) {\r\n                return settings.aoData[ row ].nTr || undefined;\r\n            } );\r\n        } );\r\n\r\n        _api_register( 'rows().data()', function () {\r\n            return this.iterator( true, 'rows', function ( settings, rows ) {\r\n                return _pluck_order( settings.aoData, rows, '_aData' );\r\n            } );\r\n        } );\r\n\r\n        _api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {\r\n            return this.iterator( 'row', function ( settings, row ) {\r\n                var r = settings.aoData[ row ];\r\n                return type === 'search' ? r._aFilterData : r._aSortData;\r\n            } );\r\n        } );\r\n\r\n        _api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {\r\n            return this.iterator( 'row', function ( settings, row ) {\r\n                _fnInvalidateRow( settings, row, src );\r\n            } );\r\n        } );\r\n\r\n        _api_registerPlural( 'rows().indexes()', 'row().index()', function () {\r\n            return this.iterator( 'row', function ( settings, row ) {\r\n                return row;\r\n            } );\r\n        } );\r\n\r\n        _api_registerPlural( 'rows().remove()', 'row().remove()', function () {\r\n            var that = this;\r\n\r\n            return this.iterator( 'row', function ( settings, row, thatIdx ) {\r\n                var data = settings.aoData;\r\n\r\n                data.splice( row, 1 );\r\n\r\n                // Update the _DT_RowIndex parameter on all rows in the table\r\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                    if ( data[i].nTr !== null ) {\r\n                        data[i].nTr._DT_RowIndex = i;\r\n                    }\r\n                }\r\n\r\n                // Remove the target row from the search array\r\n                var displayIndex = $.inArray( row, settings.aiDisplay );\r\n\r\n                // Delete from the display arrays\r\n                _fnDeleteIndex( settings.aiDisplayMaster, row );\r\n                _fnDeleteIndex( settings.aiDisplay, row );\r\n                _fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes\r\n\r\n                // Check for an 'overflow' they case for displaying the table\r\n                _fnLengthOverflow( settings );\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( 'rows.add()', function ( rows ) {\r\n            var newRows = this.iterator( 'table', function ( settings ) {\r\n                var row, i, ien;\r\n                var out = [];\r\n\r\n                for ( i=0, ien=rows.length ; i<ien ; i++ ) {\r\n                    row = rows[i];\r\n\r\n                    if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\r\n                        out.push( _fnAddTr( settings, row )[0] );\r\n                    }\r\n                    else {\r\n                        out.push( _fnAddData( settings, row ) );\r\n                    }\r\n                }\r\n\r\n                return out;\r\n            } );\r\n\r\n            // Return an Api.rows() extended instance, so rows().nodes() etc can be used\r\n            var modRows = this.rows( -1 );\r\n            modRows.pop();\r\n            modRows.push.apply( modRows, newRows.toArray() );\r\n\r\n            return modRows;\r\n        } );\r\n\r\n\r\n\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_register( 'row()', function ( selector, opts ) {\r\n            return _selector_first( this.rows( selector, opts ) );\r\n        } );\r\n\r\n\r\n        _api_register( 'row().data()', function ( data ) {\r\n            var ctx = this.context;\r\n\r\n            if ( data === undefined ) {\r\n                // Get\r\n                return ctx.length && this.length ?\r\n                    ctx[0].aoData[ this[0] ]._aData :\r\n                    undefined;\r\n            }\r\n\r\n            // Set\r\n            ctx[0].aoData[ this[0] ]._aData = data;\r\n\r\n            // Automatically invalidate\r\n            _fnInvalidateRow( ctx[0], this[0], 'data' );\r\n\r\n            return this;\r\n        } );\r\n\r\n\r\n        _api_register( 'row().node()', function () {\r\n            var ctx = this.context;\r\n\r\n            return ctx.length && this.length ?\r\n            ctx[0].aoData[ this[0] ].nTr || null :\r\n                null;\r\n        } );\r\n\r\n\r\n        _api_register( 'row.add()', function ( row ) {\r\n            // Allow a jQuery object to be passed in - only a single row is added from\r\n            // it though - the first element in the set\r\n            if ( row instanceof $ && row.length ) {\r\n                row = row[0];\r\n            }\r\n\r\n            var rows = this.iterator( 'table', function ( settings ) {\r\n                if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\r\n                    return _fnAddTr( settings, row )[0];\r\n                }\r\n                return _fnAddData( settings, row );\r\n            } );\r\n\r\n            // Return an Api.rows() extended instance, with the newly added row selected\r\n            return this.row( rows[0] );\r\n        } );\r\n\r\n\r\n\r\n        var __details_add = function ( ctx, row, data, klass )\r\n        {\r\n            // Convert to array of TR elements\r\n            var rows = [];\r\n            var addRow = function ( r, k ) {\r\n                // If we get a TR element, then just add it directly - up to the dev\r\n                // to add the correct number of columns etc\r\n                if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {\r\n                    rows.push( r );\r\n                }\r\n                else {\r\n                    // Otherwise create a row with a wrapper\r\n                    var created = $('<tr><td/></tr>').addClass( k );\r\n                    $('td', created)\r\n                        .addClass( k )\r\n                        .html( r )\r\n                        [0].colSpan = _fnVisbleColumns( ctx );\r\n\r\n                    rows.push( created[0] );\r\n                }\r\n            };\r\n\r\n            if ( $.isArray( data ) || data instanceof $ ) {\r\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                    addRow( data[i], klass );\r\n                }\r\n            }\r\n            else {\r\n                addRow( data, klass );\r\n            }\r\n\r\n            if ( row._details ) {\r\n                row._details.remove();\r\n            }\r\n\r\n            row._details = $(rows);\r\n\r\n            // If the children were already shown, that state should be retained\r\n            if ( row._detailsShow ) {\r\n                row._details.insertAfter( row.nTr );\r\n            }\r\n        };\r\n\r\n\r\n        var __details_remove = function ( api )\r\n        {\r\n            var ctx = api.context;\r\n\r\n            if ( ctx.length && api.length ) {\r\n                var row = ctx[0].aoData[ api[0] ];\r\n\r\n                if ( row._details ) {\r\n                    row._details.remove();\r\n\r\n                    row._detailsShow = undefined;\r\n                    row._details = undefined;\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        var __details_display = function ( api, show ) {\r\n            var ctx = api.context;\r\n\r\n            if ( ctx.length && api.length ) {\r\n                var row = ctx[0].aoData[ api[0] ];\r\n\r\n                if ( row._details ) {\r\n                    row._detailsShow = show;\r\n\r\n                    if ( show ) {\r\n                        row._details.insertAfter( row.nTr );\r\n                    }\r\n                    else {\r\n                        row._details.detach();\r\n                    }\r\n\r\n                    __details_events( ctx[0] );\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        var __details_events = function ( settings )\r\n        {\r\n            var api = new _Api( settings );\r\n            var namespace = '.dt.DT_details';\r\n            var drawEvent = 'draw'+namespace;\r\n            var colvisEvent = 'column-visibility'+namespace;\r\n            var destroyEvent = 'destroy'+namespace;\r\n            var data = settings.aoData;\r\n\r\n            api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );\r\n\r\n            if ( _pluck( data, '_details' ).length > 0 ) {\r\n                // On each draw, insert the required elements into the document\r\n                api.on( drawEvent, function ( e, ctx ) {\r\n                    if ( settings !== ctx ) {\r\n                        return;\r\n                    }\r\n\r\n                    api.rows( {page:'current'} ).eq(0).each( function (idx) {\r\n                        // Internal data grab\r\n                        var row = data[ idx ];\r\n\r\n                        if ( row._detailsShow ) {\r\n                            row._details.insertAfter( row.nTr );\r\n                        }\r\n                    } );\r\n                } );\r\n\r\n                // Column visibility change - update the colspan\r\n                api.on( colvisEvent, function ( e, ctx, idx, vis ) {\r\n                    if ( settings !== ctx ) {\r\n                        return;\r\n                    }\r\n\r\n                    // Update the colspan for the details rows (note, only if it already has\r\n                    // a colspan)\r\n                    var row, visible = _fnVisbleColumns( ctx );\r\n\r\n                    for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                        row = data[i];\r\n\r\n                        if ( row._details ) {\r\n                            row._details.children('td[colspan]').attr('colspan', visible );\r\n                        }\r\n                    }\r\n                } );\r\n\r\n                // Table destroyed - nuke any child rows\r\n                api.on( destroyEvent, function ( e, ctx ) {\r\n                    if ( settings !== ctx ) {\r\n                        return;\r\n                    }\r\n\r\n                    for ( var i=0, ien=data.length ; i<ien ; i++ ) {\r\n                        if ( data[i]._details ) {\r\n                            __details_remove( data[i] );\r\n                        }\r\n                    }\r\n                } );\r\n            }\r\n        };\r\n\r\n        // Strings for the method names to help minification\r\n        var _emp = '';\r\n        var _child_obj = _emp+'row().child';\r\n        var _child_mth = _child_obj+'()';\r\n\r\n        // data can be:\r\n        //  tr\r\n        //  string\r\n        //  jQuery or array of any of the above\r\n        _api_register( _child_mth, function ( data, klass ) {\r\n            var ctx = this.context;\r\n\r\n            if ( data === undefined ) {\r\n                // get\r\n                return ctx.length && this.length ?\r\n                    ctx[0].aoData[ this[0] ]._details :\r\n                    undefined;\r\n            }\r\n            else if ( data === true ) {\r\n                // show\r\n                this.child.show();\r\n            }\r\n            else if ( data === false ) {\r\n                // remove\r\n                __details_remove( this );\r\n            }\r\n            else if ( ctx.length && this.length ) {\r\n                // set\r\n                __details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );\r\n            }\r\n\r\n            return this;\r\n        } );\r\n\r\n\r\n        _api_register( [\r\n            _child_obj+'.show()',\r\n            _child_mth+'.show()' // only when `child()` was called with parameters (without\r\n        ], function ( show ) {   // it returns an object and this method is not executed)\r\n            __details_display( this, true );\r\n            return this;\r\n        } );\r\n\r\n\r\n        _api_register( [\r\n            _child_obj+'.hide()',\r\n            _child_mth+'.hide()' // only when `child()` was called with parameters (without\r\n        ], function () {         // it returns an object and this method is not executed)\r\n            __details_display( this, false );\r\n            return this;\r\n        } );\r\n\r\n\r\n        _api_register( [\r\n            _child_obj+'.remove()',\r\n            _child_mth+'.remove()' // only when `child()` was called with parameters (without\r\n        ], function () {           // it returns an object and this method is not executed)\r\n            __details_remove( this );\r\n            return this;\r\n        } );\r\n\r\n\r\n        _api_register( _child_obj+'.isShown()', function () {\r\n            var ctx = this.context;\r\n\r\n            if ( ctx.length && this.length ) {\r\n                // _detailsShown as false or undefined will fall through to return false\r\n                return ctx[0].aoData[ this[0] ]._detailsShow || false;\r\n            }\r\n            return false;\r\n        } );\r\n\r\n\r\n\r\n        /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n         * Columns\r\n         *\r\n         * {integer}           - column index (>=0 count from left, <0 count from right)\r\n         * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\r\n         * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\r\n         * \"{string}:name\"     - column name\r\n         * \"{string}\"          - jQuery selector on column header nodes\r\n         *\r\n         */\r\n\r\n        // can be an array of these items, comma separated list, or an array of comma\r\n        // separated lists\r\n\r\n        var __re_column_selector = /^(.+):(name|visIdx|visible)$/;\r\n\r\n        var __column_selector = function ( settings, selector, opts )\r\n        {\r\n            var\r\n                columns = settings.aoColumns,\r\n                names = _pluck( columns, 'sName' ),\r\n                nodes = _pluck( columns, 'nTh' );\r\n\r\n            return _selector_run( selector, function ( s ) {\r\n                var selInt = _intVal( s );\r\n\r\n                if ( s === '' ) {\r\n                    // All columns\r\n                    return _range( columns.length );\r\n                }\r\n                else if ( selInt !== null ) {\r\n                    // Integer selector\r\n                    return [ selInt >= 0 ?\r\n                        selInt : // Count from left\r\n                    columns.length + selInt // Count from right (+ because its a negative value)\r\n                    ];\r\n                }\r\n                else {\r\n                    var match = typeof s === 'string' ?\r\n                        s.match( __re_column_selector ) :\r\n                        '';\r\n\r\n                    if ( match ) {\r\n                        switch( match[2] ) {\r\n                            case 'visIdx':\r\n                            case 'visible':\r\n                                var idx = parseInt( match[1], 10 );\r\n                                // Visible index given, convert to column index\r\n                                if ( idx < 0 ) {\r\n                                    // Counting from the right\r\n                                    var visColumns = $.map( columns, function (col,i) {\r\n                                        return col.bVisible ? i : null;\r\n                                    } );\r\n                                    return [ visColumns[ visColumns.length + idx ] ];\r\n                                }\r\n                                // Counting from the left\r\n                                return [ _fnVisibleToColumnIndex( settings, idx ) ];\r\n\r\n                            case 'name':\r\n                                // match by name. `names` is column index complete and in order\r\n                                return $.map( names, function (name, i) {\r\n                                    return name === match[1] ? i : null;\r\n                                } );\r\n                        }\r\n                    }\r\n                    else {\r\n                        // jQuery selector on the TH elements for the columns\r\n                        return $( nodes )\r\n                            .filter( s )\r\n                            .map( function () {\r\n                                return $.inArray( this, nodes ); // `nodes` is column index complete and in order\r\n                            } )\r\n                            .toArray();\r\n                    }\r\n                }\r\n            } );\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n        var __setColumnVis = function ( settings, column, vis, recalc ) {\r\n            var\r\n                cols = settings.aoColumns,\r\n                col  = cols[ column ],\r\n                data = settings.aoData,\r\n                row, cells, i, ien, tr;\r\n\r\n            // Get\r\n            if ( vis === undefined ) {\r\n                return col.bVisible;\r\n            }\r\n\r\n            // Set\r\n            // No change\r\n            if ( col.bVisible === vis ) {\r\n                return;\r\n            }\r\n\r\n            if ( vis ) {\r\n                // Insert column\r\n                // Need to decide if we should use appendChild or insertBefore\r\n                var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );\r\n\r\n                for ( i=0, ien=data.length ; i<ien ; i++ ) {\r\n                    tr = data[i].nTr;\r\n                    cells = data[i].anCells;\r\n\r\n                    if ( tr ) {\r\n                        // insertBefore can act like appendChild if 2nd arg is null\r\n                        tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Remove column\r\n                $( _pluck( settings.aoData, 'anCells', column ) ).detach();\r\n            }\r\n\r\n            // Common actions\r\n            col.bVisible = vis;\r\n            _fnDrawHead( settings, settings.aoHeader );\r\n            _fnDrawHead( settings, settings.aoFooter );\r\n\r\n            if ( recalc === undefined || recalc ) {\r\n                // Automatically adjust column sizing\r\n                _fnAdjustColumnSizing( settings );\r\n\r\n                // Realign columns for scrolling\r\n                if ( settings.oScroll.sX || settings.oScroll.sY ) {\r\n                    _fnScrollDraw( settings );\r\n                }\r\n            }\r\n\r\n            _fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis] );\r\n\r\n            _fnSaveState( settings );\r\n        };\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_register( 'columns()', function ( selector, opts ) {\r\n            // argument shifting\r\n            if ( selector === undefined ) {\r\n                selector = '';\r\n            }\r\n            else if ( $.isPlainObject( selector ) ) {\r\n                opts = selector;\r\n                selector = '';\r\n            }\r\n\r\n            opts = _selector_opts( opts );\r\n\r\n            var inst = this.iterator( 'table', function ( settings ) {\r\n                return __column_selector( settings, selector, opts );\r\n            } );\r\n\r\n            // Want argument shifting here and in _row_selector?\r\n            inst.selector.cols = selector;\r\n            inst.selector.opts = opts;\r\n\r\n            return inst;\r\n        } );\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {\r\n            return this.iterator( 'column', function ( settings, column ) {\r\n                return settings.aoColumns[column].nTh;\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {\r\n            return this.iterator( 'column', function ( settings, column ) {\r\n                return settings.aoColumns[column].nTf;\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_registerPlural( 'columns().data()', 'column().data()', function () {\r\n            return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\r\n                var a = [];\r\n                for ( var row=0, ien=rows.length ; row<ien ; row++ ) {\r\n                    a.push( _fnGetCellData( settings, rows[row], column, '' ) );\r\n                }\r\n                return a;\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {\r\n            return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\r\n                return _pluck_order( settings.aoData, rows,\r\n                    type === 'search' ? '_aFilterData' : '_aSortData', column\r\n                );\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {\r\n            return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\r\n                return _pluck_order( settings.aoData, rows, 'anCells', column ) ;\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        _api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {\r\n            return this.iterator( 'column', function ( settings, column ) {\r\n                return vis === undefined ?\r\n                    settings.aoColumns[ column ].bVisible :\r\n                    __setColumnVis( settings, column, vis, calc );\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        _api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {\r\n            return this.iterator( 'column', function ( settings, column ) {\r\n                return type === 'visible' ?\r\n                    _fnColumnIndexToVisible( settings, column ) :\r\n                    column;\r\n            } );\r\n        } );\r\n\r\n\r\n        // _api_register( 'columns().show()', function () {\r\n        // \tvar selector = this.selector;\r\n        // \treturn this.columns( selector.cols, selector.opts ).visible( true );\r\n        // } );\r\n\r\n\r\n        // _api_register( 'columns().hide()', function () {\r\n        // \tvar selector = this.selector;\r\n        // \treturn this.columns( selector.cols, selector.opts ).visible( false );\r\n        // } );\r\n\r\n\r\n\r\n        _api_register( 'columns.adjust()', function () {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnAdjustColumnSizing( settings );\r\n            } );\r\n        } );\r\n\r\n\r\n        // Convert from one column index type, to another type\r\n        _api_register( 'column.index()', function ( type, idx ) {\r\n            if ( this.context.length !== 0 ) {\r\n                var ctx = this.context[0];\r\n\r\n                if ( type === 'fromVisible' || type === 'toData' ) {\r\n                    return _fnVisibleToColumnIndex( ctx, idx );\r\n                }\r\n                else if ( type === 'fromData' || type === 'toVisible' ) {\r\n                    return _fnColumnIndexToVisible( ctx, idx );\r\n                }\r\n            }\r\n        } );\r\n\r\n\r\n        _api_register( 'column()', function ( selector, opts ) {\r\n            return _selector_first( this.columns( selector, opts ) );\r\n        } );\r\n\r\n\r\n\r\n\r\n        var __cell_selector = function ( settings, selector, opts )\r\n        {\r\n            var data = settings.aoData;\r\n            var rows = _selector_row_indexes( settings, opts );\r\n            var cells = _pluck_order( data, rows, 'anCells' );\r\n            var allCells = $( [].concat.apply([], cells) );\r\n            var row;\r\n            var columns = settings.aoColumns.length;\r\n            var a, i, ien, j;\r\n\r\n            return _selector_run( selector, function ( s ) {\r\n                if ( s === null || s === undefined ) {\r\n                    // All cells\r\n                    a = [];\r\n\r\n                    for ( i=0, ien=rows.length ; i<ien ; i++ ) {\r\n                        row = rows[i];\r\n\r\n                        for ( j=0 ; j<columns ; j++ ) {\r\n                            a.push( {\r\n                                row: row,\r\n                                column: j\r\n                            } );\r\n                        }\r\n                    }\r\n\r\n                    return a;\r\n                }\r\n                else if ( $.isPlainObject( s ) ) {\r\n                    return [s];\r\n                }\r\n\r\n                // jQuery filtered cells\r\n                return allCells\r\n                    .filter( s )\r\n                    .map( function (i, el) {\r\n                        row = el.parentNode._DT_RowIndex;\r\n\r\n                        return {\r\n                            row: row,\r\n                            column: $.inArray( el, data[ row ].anCells )\r\n                        };\r\n                    } )\r\n                    .toArray();\r\n            } );\r\n        };\r\n\r\n\r\n\r\n\r\n        _api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {\r\n            // Argument shifting\r\n            if ( $.isPlainObject( rowSelector ) ) {\r\n                // Indexes\r\n                if ( typeof rowSelector.row !== undefined ) {\r\n                    opts = columnSelector;\r\n                    columnSelector = null;\r\n                }\r\n                else {\r\n                    opts = rowSelector;\r\n                    rowSelector = null;\r\n                }\r\n            }\r\n            if ( $.isPlainObject( columnSelector ) ) {\r\n                opts = columnSelector;\r\n                columnSelector = null;\r\n            }\r\n\r\n            // Cell selector\r\n            if ( columnSelector === null || columnSelector === undefined ) {\r\n                return this.iterator( 'table', function ( settings ) {\r\n                    return __cell_selector( settings, rowSelector, _selector_opts( opts ) );\r\n                } );\r\n            }\r\n\r\n            // Row + column selector\r\n            var columns = this.columns( columnSelector, opts );\r\n            var rows = this.rows( rowSelector, opts );\r\n            var a, i, ien, j, jen;\r\n\r\n            var cells = this.iterator( 'table', function ( settings, idx ) {\r\n                a = [];\r\n\r\n                for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {\r\n                    for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {\r\n                        a.push( {\r\n                            row:    rows[idx][i],\r\n                            column: columns[idx][j]\r\n                        } );\r\n                    }\r\n                }\r\n\r\n                return a;\r\n            } );\r\n\r\n            $.extend( cells.selector, {\r\n                cols: columnSelector,\r\n                rows: rowSelector,\r\n                opts: opts\r\n            } );\r\n\r\n            return cells;\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'cells().nodes()', 'cell().node()', function () {\r\n            return this.iterator( 'cell', function ( settings, row, column ) {\r\n                return settings.aoData[ row ].anCells[ column ];\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( 'cells().data()', function () {\r\n            return this.iterator( 'cell', function ( settings, row, column ) {\r\n                return _fnGetCellData( settings, row, column );\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {\r\n            type = type === 'search' ? '_aFilterData' : '_aSortData';\r\n\r\n            return this.iterator( 'cell', function ( settings, row, column ) {\r\n                return settings.aoData[ row ][ type ][ column ];\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural( 'cells().indexes()', 'cell().index()', function () {\r\n            return this.iterator( 'cell', function ( settings, row, column ) {\r\n                return {\r\n                    row: row,\r\n                    column: column,\r\n                    columnVisible: _fnColumnIndexToVisible( settings, column )\r\n                };\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( [\r\n            'cells().invalidate()',\r\n            'cell().invalidate()'\r\n        ], function ( src ) {\r\n            var selector = this.selector;\r\n\r\n            // Use the rows method of the instance to perform the invalidation, rather\r\n            // than doing it here. This avoids needing to handle duplicate rows from\r\n            // the cells.\r\n            this.rows( selector.rows, selector.opts ).invalidate( src );\r\n\r\n            return this;\r\n        } );\r\n\r\n\r\n\r\n\r\n        _api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {\r\n            return _selector_first( this.cells( rowSelector, columnSelector, opts ) );\r\n        } );\r\n\r\n\r\n\r\n        _api_register( 'cell().data()', function ( data ) {\r\n            var ctx = this.context;\r\n            var cell = this[0];\r\n\r\n            if ( data === undefined ) {\r\n                // Get\r\n                return ctx.length && cell.length ?\r\n                    _fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :\r\n                    undefined;\r\n            }\r\n\r\n            // Set\r\n            _fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );\r\n            _fnInvalidateRow( ctx[0], cell[0].row, 'data', cell[0].column );\r\n\r\n            return this;\r\n        } );\r\n\r\n\r\n\r\n        /**\r\n         * Get current ordering (sorting) that has been applied to the table.\r\n         *\r\n         * @returns {array} 2D array containing the sorting information for the first\r\n         *   table in the current context. Each element in the parent array represents\r\n         *   a column being sorted upon (i.e. multi-sorting with two columns would have\r\n         *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\r\n         *   the column index that the sorting condition applies to, the second is the\r\n         *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\r\n         *   index of the sorting order from the `column.sorting` initialisation array.\r\n         *//**\r\n         * Set the ordering for the table.\r\n         *\r\n         * @param {integer} order Column index to sort upon.\r\n         * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\r\n         * @returns {DataTables.Api} this\r\n         *//**\r\n         * Set the ordering for the table.\r\n         *\r\n         * @param {array} order 1D array of sorting information to be applied.\r\n         * @param {array} [...] Optional additional sorting conditions\r\n         * @returns {DataTables.Api} this\r\n         *//**\r\n         * Set the ordering for the table.\r\n         *\r\n         * @param {array} order 2D array of sorting information to be applied.\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'order()', function ( order, dir ) {\r\n            var ctx = this.context;\r\n\r\n            if ( order === undefined ) {\r\n                // get\r\n                return ctx.length !== 0 ?\r\n                    ctx[0].aaSorting :\r\n                    undefined;\r\n            }\r\n\r\n            // set\r\n            if ( typeof order === 'number' ) {\r\n                // Simple column / direction passed in\r\n                order = [ [ order, dir ] ];\r\n            }\r\n            else if ( ! $.isArray( order[0] ) ) {\r\n                // Arguments passed in (list of 1D arrays)\r\n                order = Array.prototype.slice.call( arguments );\r\n            }\r\n            // otherwise a 2D array was passed in\r\n\r\n            return this.iterator( 'table', function ( settings ) {\r\n                settings.aaSorting = order.slice();\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         * Attach a sort listener to an element for a given column\r\n         *\r\n         * @param {node|jQuery|string} node Identifier for the element(s) to attach the\r\n         *   listener to. This can take the form of a single DOM node, a jQuery\r\n         *   collection of nodes or a jQuery selector which will identify the node(s).\r\n         * @param {integer} column the column that a click on this node will sort on\r\n         * @param {function} [callback] callback function when sort is run\r\n         * @returns {DataTables.Api} this\r\n         */\r\n        _api_register( 'order.listener()', function ( node, column, callback ) {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnSortAttachListener( settings, node, column, callback );\r\n            } );\r\n        } );\r\n\r\n\r\n        // Order by the selected column(s)\r\n        _api_register( [\r\n            'columns().order()',\r\n            'column().order()'\r\n        ], function ( dir ) {\r\n            var that = this;\r\n\r\n            return this.iterator( 'table', function ( settings, i ) {\r\n                var sort = [];\r\n\r\n                $.each( that[i], function (j, col) {\r\n                    sort.push( [ col, dir ] );\r\n                } );\r\n\r\n                settings.aaSorting = sort;\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        _api_register( 'search()', function ( input, regex, smart, caseInsen ) {\r\n            var ctx = this.context;\r\n\r\n            if ( input === undefined ) {\r\n                // get\r\n                return ctx.length !== 0 ?\r\n                    ctx[0].oPreviousSearch.sSearch :\r\n                    undefined;\r\n            }\r\n\r\n            // set\r\n            return this.iterator( 'table', function ( settings ) {\r\n                if ( ! settings.oFeatures.bFilter ) {\r\n                    return;\r\n                }\r\n\r\n                _fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {\r\n                    \"sSearch\": input+\"\",\r\n                    \"bRegex\":  regex === null ? false : regex,\r\n                    \"bSmart\":  smart === null ? true  : smart,\r\n                    \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\r\n                } ), 1 );\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_registerPlural(\r\n            'columns().search()',\r\n            'column().search()',\r\n            function ( input, regex, smart, caseInsen ) {\r\n                return this.iterator( 'column', function ( settings, column ) {\r\n                    var preSearch = settings.aoPreSearchCols;\r\n\r\n                    if ( input === undefined ) {\r\n                        // get\r\n                        return preSearch[ column ].sSearch;\r\n                    }\r\n\r\n                    // set\r\n                    if ( ! settings.oFeatures.bFilter ) {\r\n                        return;\r\n                    }\r\n\r\n                    $.extend( preSearch[ column ], {\r\n                        \"sSearch\": input+\"\",\r\n                        \"bRegex\":  regex === null ? false : regex,\r\n                        \"bSmart\":  smart === null ? true  : smart,\r\n                        \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\r\n                    } );\r\n\r\n                    _fnFilterComplete( settings, settings.oPreviousSearch, 1 );\r\n                } );\r\n            }\r\n        );\r\n\r\n        /*\r\n         * State API methods\r\n         */\r\n\r\n        _api_register( 'state()', function () {\r\n            return this.context.length ?\r\n                this.context[0].oSavedState :\r\n                null;\r\n        } );\r\n\r\n\r\n        _api_register( 'state.clear()', function () {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                // Save an empty object\r\n                settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( 'state.loaded()', function () {\r\n            return this.context.length ?\r\n                this.context[0].oLoadedState :\r\n                null;\r\n        } );\r\n\r\n\r\n        _api_register( 'state.save()', function () {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnSaveState( settings );\r\n            } );\r\n        } );\r\n\r\n\r\n\r\n        /**\r\n         * Provide a common method for plug-ins to check the version of DataTables being\r\n         * used, in order to ensure compatibility.\r\n         *\r\n         *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\r\n         *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\r\n         *  @returns {boolean} true if this version of DataTables is greater or equal to\r\n         *    the required version, or false if this version of DataTales is not\r\n         *    suitable\r\n         *  @static\r\n         *  @dtopt API-Static\r\n         *\r\n         *  @example\r\n         *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\r\n         */\r\n        DataTable.versionCheck = DataTable.fnVersionCheck = function( version )\r\n        {\r\n            var aThis = DataTable.version.split('.');\r\n            var aThat = version.split('.');\r\n            var iThis, iThat;\r\n\r\n            for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {\r\n                iThis = parseInt( aThis[i], 10 ) || 0;\r\n                iThat = parseInt( aThat[i], 10 ) || 0;\r\n\r\n                // Parts are the same, keep comparing\r\n                if (iThis === iThat) {\r\n                    continue;\r\n                }\r\n\r\n                // Parts are different, return immediately\r\n                return iThis > iThat;\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n\r\n        /**\r\n         * Check if a `<table>` node is a DataTable table already or not.\r\n         *\r\n         *  @param {node|jquery|string} table Table node, jQuery object or jQuery\r\n         *      selector for the table to test. Note that if more than more than one\r\n         *      table is passed on, only the first will be checked\r\n         *  @returns {boolean} true the table given is a DataTable, or false otherwise\r\n         *  @static\r\n         *  @dtopt API-Static\r\n         *\r\n         *  @example\r\n         *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\r\n\t *      $('#example').dataTable();\r\n\t *    }\r\n         */\r\n        DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )\r\n        {\r\n            var t = $(table).get(0);\r\n            var is = false;\r\n\r\n            $.each( DataTable.settings, function (i, o) {\r\n                if ( o.nTable === t || o.nScrollHead === t || o.nScrollFoot === t ) {\r\n                    is = true;\r\n                }\r\n            } );\r\n\r\n            return is;\r\n        };\r\n\r\n\r\n        /**\r\n         * Get all DataTable tables that have been initialised - optionally you can\r\n         * select to get only currently visible tables.\r\n         *\r\n         *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\r\n         *    or visible tables only.\r\n         *  @returns {array} Array of `table` nodes (not DataTable instances) which are\r\n         *    DataTables\r\n         *  @static\r\n         *  @dtopt API-Static\r\n         *\r\n         *  @example\r\n         *    $.each( $.fn.dataTable.tables(true), function () {\r\n\t *      $(table).DataTable().columns.adjust();\r\n\t *    } );\r\n         */\r\n        DataTable.tables = DataTable.fnTables = function ( visible )\r\n        {\r\n            return jQuery.map( DataTable.settings, function (o) {\r\n                if ( !visible || (visible && $(o.nTable).is(':visible')) ) {\r\n                    return o.nTable;\r\n                }\r\n            } );\r\n        };\r\n\r\n\r\n        /**\r\n         * Convert from camel case parameters to Hungarian notation. This is made public\r\n         * for the extensions to provide the same ability as DataTables core to accept\r\n         * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\r\n         * parameters.\r\n         *\r\n         *  @param {object} src The model object which holds all parameters that can be\r\n         *    mapped.\r\n         *  @param {object} user The object to convert from camel case to Hungarian.\r\n         *  @param {boolean} force When set to `true`, properties which already have a\r\n         *    Hungarian value in the `user` object will be overwritten. Otherwise they\r\n         *    won't be.\r\n         */\r\n        DataTable.camelToHungarian = _fnCamelToHungarian;\r\n\r\n\r\n\r\n        /**\r\n         *\r\n         */\r\n        _api_register( '$()', function ( selector, opts ) {\r\n            var\r\n                rows   = this.rows( opts ).nodes(), // Get all rows\r\n                jqRows = $(rows);\r\n\r\n            return $( [].concat(\r\n                jqRows.filter( selector ).toArray(),\r\n                jqRows.find( selector ).toArray()\r\n            ) );\r\n        } );\r\n\r\n\r\n        // jQuery functions to operate on the tables\r\n        $.each( [ 'on', 'one', 'off' ], function (i, key) {\r\n            _api_register( key+'()', function ( /* event, handler */ ) {\r\n                var args = Array.prototype.slice.call(arguments);\r\n\r\n                // Add the `dt` namespace automatically if it isn't already present\r\n                if ( ! args[0].match(/\\.dt\\b/) ) {\r\n                    args[0] += '.dt';\r\n                }\r\n\r\n                var inst = $( this.tables().nodes() );\r\n                inst[key].apply( inst, args );\r\n                return this;\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( 'clear()', function () {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                _fnClearTable( settings );\r\n            } );\r\n        } );\r\n\r\n\r\n        _api_register( 'settings()', function () {\r\n            return new _Api( this.context, this.context );\r\n        } );\r\n\r\n\r\n        _api_register( 'data()', function () {\r\n            return this.iterator( 'table', function ( settings ) {\r\n                return _pluck( settings.aoData, '_aData' );\r\n            } ).flatten();\r\n        } );\r\n\r\n\r\n        _api_register( 'destroy()', function ( remove ) {\r\n            remove = remove || false;\r\n\r\n            return this.iterator( 'table', function ( settings ) {\r\n                var orig      = settings.nTableWrapper.parentNode;\r\n                var classes   = settings.oClasses;\r\n                var table     = settings.nTable;\r\n                var tbody     = settings.nTBody;\r\n                var thead     = settings.nTHead;\r\n                var tfoot     = settings.nTFoot;\r\n                var jqTable   = $(table);\r\n                var jqTbody   = $(tbody);\r\n                var jqWrapper = $(settings.nTableWrapper);\r\n                var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );\r\n                var i, ien;\r\n\r\n                // Flag to note that the table is currently being destroyed - no action\r\n                // should be taken\r\n                settings.bDestroying = true;\r\n\r\n                // Fire off the destroy callbacks for plug-ins etc\r\n                _fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings] );\r\n\r\n                // If not being removed from the document, make all columns visible\r\n                if ( ! remove ) {\r\n                    new _Api( settings ).columns().visible( true );\r\n                }\r\n\r\n                // Blitz all `DT` namespaced events (these are internal events, the\r\n                // lowercase, `dt` events are user subscribed and they are responsible\r\n                // for removing them\r\n                jqWrapper.unbind('.DT').find(':not(tbody *)').unbind('.DT');\r\n                $(window).unbind('.DT-'+settings.sInstance);\r\n\r\n                // When scrolling we had to break the table up - restore it\r\n                if ( table != thead.parentNode ) {\r\n                    jqTable.children('thead').detach();\r\n                    jqTable.append( thead );\r\n                }\r\n\r\n                if ( tfoot && table != tfoot.parentNode ) {\r\n                    jqTable.children('tfoot').detach();\r\n                    jqTable.append( tfoot );\r\n                }\r\n\r\n                // Remove the DataTables generated nodes, events and classes\r\n                jqTable.detach();\r\n                jqWrapper.detach();\r\n\r\n                settings.aaSorting = [];\r\n                settings.aaSortingFixed = [];\r\n                _fnSortingClasses( settings );\r\n\r\n                $( rows ).removeClass( settings.asStripeClasses.join(' ') );\r\n\r\n                $('th, td', thead).removeClass( classes.sSortable+' '+\r\n                    classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone\r\n                );\r\n\r\n                if ( settings.bJUI ) {\r\n                    $('th span.'+classes.sSortIcon+ ', td span.'+classes.sSortIcon, thead).detach();\r\n                    $('th, td', thead).each( function () {\r\n                        var wrapper = $('div.'+classes.sSortJUIWrapper, this);\r\n                        $(this).append( wrapper.contents() );\r\n                        wrapper.detach();\r\n                    } );\r\n                }\r\n\r\n                if ( ! remove && orig ) {\r\n                    // insertBefore acts like appendChild if !arg[1]\r\n                    orig.insertBefore( table, settings.nTableReinsertBefore );\r\n                }\r\n\r\n                // Add the TR elements back into the table in their original order\r\n                jqTbody.children().detach();\r\n                jqTbody.append( rows );\r\n\r\n                // Restore the width of the original table - was read from the style property,\r\n                // so we can restore directly to that\r\n                jqTable\r\n                    .css( 'width', settings.sDestroyWidth )\r\n                    .removeClass( classes.sTable );\r\n\r\n                // If the were originally stripe classes - then we add them back here.\r\n                // Note this is not fool proof (for example if not all rows had stripe\r\n                // classes - but it's a good effort without getting carried away\r\n                ien = settings.asDestroyStripes.length;\r\n\r\n                if ( ien ) {\r\n                    jqTbody.children().each( function (i) {\r\n                        $(this).addClass( settings.asDestroyStripes[i % ien] );\r\n                    } );\r\n                }\r\n\r\n                /* Remove the settings object from the settings array */\r\n                var idx = $.inArray( settings, DataTable.settings );\r\n                if ( idx !== -1 ) {\r\n                    DataTable.settings.splice( idx, 1 );\r\n                }\r\n            } );\r\n        } );\r\n\r\n\r\n        /**\r\n         * Version string for plug-ins to check compatibility. Allowed format is\r\n         * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\r\n         * only for non-release builds. See http://semver.org/ for more information.\r\n         *  @member\r\n         *  @type string\r\n         *  @default Version number\r\n         */\r\n        DataTable.version = \"1.10.2\";\r\n\r\n        /**\r\n         * Private data store, containing all of the settings objects that are\r\n         * created for the tables on a given page.\r\n         *\r\n         * Note that the `DataTable.settings` object is aliased to\r\n         * `jQuery.fn.dataTableExt` through which it may be accessed and\r\n         * manipulated, or `jQuery.fn.dataTable.settings`.\r\n         *  @member\r\n         *  @type array\r\n         *  @default []\r\n         *  @private\r\n         */\r\n        DataTable.settings = [];\r\n\r\n        /**\r\n         * Object models container, for the various models that DataTables has\r\n         * available to it. These models define the objects that are used to hold\r\n         * the active state and configuration of the table.\r\n         *  @namespace\r\n         */\r\n        DataTable.models = {};\r\n\r\n\r\n\r\n        /**\r\n         * Template object for the way in which DataTables holds information about\r\n         * search information for the global filter and individual column filters.\r\n         *  @namespace\r\n         */\r\n        DataTable.models.oSearch = {\r\n            /**\r\n             * Flag to indicate if the filtering should be case insensitive or not\r\n             *  @type boolean\r\n             *  @default true\r\n             */\r\n            \"bCaseInsensitive\": true,\r\n\r\n            /**\r\n             * Applied search term\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             */\r\n            \"sSearch\": \"\",\r\n\r\n            /**\r\n             * Flag to indicate if the search term should be interpreted as a\r\n             * regular expression (true) or not (false) and therefore and special\r\n             * regex characters escaped.\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bRegex\": false,\r\n\r\n            /**\r\n             * Flag to indicate if DataTables is to use its smart filtering or not.\r\n             *  @type boolean\r\n             *  @default true\r\n             */\r\n            \"bSmart\": true\r\n        };\r\n\r\n\r\n\r\n\r\n        /**\r\n         * Template object for the way in which DataTables holds information about\r\n         * each individual row. This is the object format used for the settings\r\n         * aoData array.\r\n         *  @namespace\r\n         */\r\n        DataTable.models.oRow = {\r\n            /**\r\n             * TR element for the row\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTr\": null,\r\n\r\n            /**\r\n             * Array of TD elements for each row. This is null until the row has been\r\n             * created.\r\n             *  @type array nodes\r\n             *  @default []\r\n             */\r\n            \"anCells\": null,\r\n\r\n            /**\r\n             * Data object from the original data source for the row. This is either\r\n             * an array if using the traditional form of DataTables, or an object if\r\n             * using mData options. The exact type will depend on the passed in\r\n             * data from the data source, or will be an array if using DOM a data\r\n             * source.\r\n             *  @type array|object\r\n             *  @default []\r\n             */\r\n            \"_aData\": [],\r\n\r\n            /**\r\n             * Sorting data cache - this array is ostensibly the same length as the\r\n             * number of columns (although each index is generated only as it is\r\n             * needed), and holds the data that is used for sorting each column in the\r\n             * row. We do this cache generation at the start of the sort in order that\r\n             * the formatting of the sort data need be done only once for each cell\r\n             * per sort. This array should not be read from or written to by anything\r\n             * other than the master sorting methods.\r\n             *  @type array\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"_aSortData\": null,\r\n\r\n            /**\r\n             * Per cell filtering data cache. As per the sort data cache, used to\r\n             * increase the performance of the filtering in DataTables\r\n             *  @type array\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"_aFilterData\": null,\r\n\r\n            /**\r\n             * Filtering data cache. This is the same as the cell filtering cache, but\r\n             * in this case a string rather than an array. This is easily computed with\r\n             * a join on `_aFilterData`, but is provided as a cache so the join isn't\r\n             * needed on every search (memory traded for performance)\r\n             *  @type array\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"_sFilterRow\": null,\r\n\r\n            /**\r\n             * Cache of the class name that DataTables has applied to the row, so we\r\n             * can quickly look at this variable rather than needing to do a DOM check\r\n             * on className for the nTr property.\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             *  @private\r\n             */\r\n            \"_sRowStripe\": \"\",\r\n\r\n            /**\r\n             * Denote if the original data source was from the DOM, or the data source\r\n             * object. This is used for invalidating data, so DataTables can\r\n             * automatically read data from the original source, unless uninstructed\r\n             * otherwise.\r\n             *  @type string\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"src\": null\r\n        };\r\n\r\n\r\n        /**\r\n         * Template object for the column information object in DataTables. This object\r\n         * is held in the settings aoColumns array and contains all the information that\r\n         * DataTables needs about each individual column.\r\n         *\r\n         * Note that this object is related to {@link DataTable.defaults.column}\r\n         * but this one is the internal data store for DataTables's cache of columns.\r\n         * It should NOT be manipulated outside of DataTables. Any configuration should\r\n         * be done through the initialisation options.\r\n         *  @namespace\r\n         */\r\n        DataTable.models.oColumn = {\r\n            /**\r\n             * Column index. This could be worked out on-the-fly with $.inArray, but it\r\n             * is faster to just hold it as a variable\r\n             *  @type integer\r\n             *  @default null\r\n             */\r\n            \"idx\": null,\r\n\r\n            /**\r\n             * A list of the columns that sorting should occur on when this column\r\n             * is sorted. That this property is an array allows multi-column sorting\r\n             * to be defined for a column (for example first name / last name columns\r\n             * would benefit from this). The values are integers pointing to the\r\n             * columns to be sorted on (typically it will be a single integer pointing\r\n             * at itself, but that doesn't need to be the case).\r\n             *  @type array\r\n             */\r\n            \"aDataSort\": null,\r\n\r\n            /**\r\n             * Define the sorting directions that are applied to the column, in sequence\r\n             * as the column is repeatedly sorted upon - i.e. the first value is used\r\n             * as the sorting direction when the column if first sorted (clicked on).\r\n             * Sort it again (click again) and it will move on to the next index.\r\n             * Repeat until loop.\r\n             *  @type array\r\n             */\r\n            \"asSorting\": null,\r\n\r\n            /**\r\n             * Flag to indicate if the column is searchable, and thus should be included\r\n             * in the filtering or not.\r\n             *  @type boolean\r\n             */\r\n            \"bSearchable\": null,\r\n\r\n            /**\r\n             * Flag to indicate if the column is sortable or not.\r\n             *  @type boolean\r\n             */\r\n            \"bSortable\": null,\r\n\r\n            /**\r\n             * Flag to indicate if the column is currently visible in the table or not\r\n             *  @type boolean\r\n             */\r\n            \"bVisible\": null,\r\n\r\n            /**\r\n             * Store for manual type assignment using the `column.type` option. This\r\n             * is held in store so we can manipulate the column's `sType` property.\r\n             *  @type string\r\n             *  @default null\r\n             *  @private\r\n             */\r\n            \"_sManualType\": null,\r\n\r\n            /**\r\n             * Flag to indicate if HTML5 data attributes should be used as the data\r\n             * source for filtering or sorting. True is either are.\r\n             *  @type boolean\r\n             *  @default false\r\n             *  @private\r\n             */\r\n            \"_bAttrSrc\": false,\r\n\r\n            /**\r\n             * Developer definable function that is called whenever a cell is created (Ajax source,\r\n             * etc) or processed for input (DOM source). This can be used as a compliment to mRender\r\n             * allowing you to modify the DOM element (add background colour for example) when the\r\n             * element is available.\r\n             *  @type function\r\n             *  @param {element} nTd The TD node that has been created\r\n             *  @param {*} sData The Data for the cell\r\n             *  @param {array|object} oData The data for the whole row\r\n             *  @param {int} iRow The row index for the aoData data store\r\n             *  @default null\r\n             */\r\n            \"fnCreatedCell\": null,\r\n\r\n            /**\r\n             * Function to get data from a cell in a column. You should <b>never</b>\r\n             * access data directly through _aData internally in DataTables - always use\r\n             * the method attached to this property. It allows mData to function as\r\n             * required. This function is automatically assigned by the column\r\n             * initialisation method\r\n             *  @type function\r\n             *  @param {array|object} oData The data array/object for the array\r\n             *    (i.e. aoData[]._aData)\r\n             *  @param {string} sSpecific The specific data type you want to get -\r\n             *    'display', 'type' 'filter' 'sort'\r\n             *  @returns {*} The data for the cell from the given row's data\r\n             *  @default null\r\n             */\r\n            \"fnGetData\": null,\r\n\r\n            /**\r\n             * Function to set data for a cell in the column. You should <b>never</b>\r\n             * set the data directly to _aData internally in DataTables - always use\r\n             * this method. It allows mData to function as required. This function\r\n             * is automatically assigned by the column initialisation method\r\n             *  @type function\r\n             *  @param {array|object} oData The data array/object for the array\r\n             *    (i.e. aoData[]._aData)\r\n             *  @param {*} sValue Value to set\r\n             *  @default null\r\n             */\r\n            \"fnSetData\": null,\r\n\r\n            /**\r\n             * Property to read the value for the cells in the column from the data\r\n             * source array / object. If null, then the default content is used, if a\r\n             * function is given then the return from the function is used.\r\n             *  @type function|int|string|null\r\n             *  @default null\r\n             */\r\n            \"mData\": null,\r\n\r\n            /**\r\n             * Partner property to mData which is used (only when defined) to get\r\n             * the data - i.e. it is basically the same as mData, but without the\r\n             * 'set' option, and also the data fed to it is the result from mData.\r\n             * This is the rendering method to match the data method of mData.\r\n             *  @type function|int|string|null\r\n             *  @default null\r\n             */\r\n            \"mRender\": null,\r\n\r\n            /**\r\n             * Unique header TH/TD element for this column - this is what the sorting\r\n             * listener is attached to (if sorting is enabled.)\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTh\": null,\r\n\r\n            /**\r\n             * Unique footer TH/TD element for this column (if there is one). Not used\r\n             * in DataTables as such, but can be used for plug-ins to reference the\r\n             * footer for each column.\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTf\": null,\r\n\r\n            /**\r\n             * The class to apply to all TD elements in the table's TBODY for the column\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sClass\": null,\r\n\r\n            /**\r\n             * When DataTables calculates the column widths to assign to each column,\r\n             * it finds the longest string in each column and then constructs a\r\n             * temporary table and reads the widths from that. The problem with this\r\n             * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\r\n             * string - thus the calculation can go wrong (doing it properly and putting\r\n             * it into an DOM object and measuring that is horribly(!) slow). Thus as\r\n             * a \"work around\" we provide this option. It will append its value to the\r\n             * text that is found to be the longest string for the column - i.e. padding.\r\n             *  @type string\r\n             */\r\n            \"sContentPadding\": null,\r\n\r\n            /**\r\n             * Allows a default value to be given for a column's data, and will be used\r\n             * whenever a null data source is encountered (this can be because mData\r\n             * is set to null, or because the data source itself is null).\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sDefaultContent\": null,\r\n\r\n            /**\r\n             * Name for the column, allowing reference to the column by name as well as\r\n             * by index (needs a lookup to work by name).\r\n             *  @type string\r\n             */\r\n            \"sName\": null,\r\n\r\n            /**\r\n             * Custom sorting data type - defines which of the available plug-ins in\r\n             * afnSortData the custom sorting will use - if any is defined.\r\n             *  @type string\r\n             *  @default std\r\n             */\r\n            \"sSortDataType\": 'std',\r\n\r\n            /**\r\n             * Class to be applied to the header element when sorting on this column\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sSortingClass\": null,\r\n\r\n            /**\r\n             * Class to be applied to the header element when sorting on this column -\r\n             * when jQuery UI theming is used.\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sSortingClassJUI\": null,\r\n\r\n            /**\r\n             * Title of the column - what is seen in the TH element (nTh).\r\n             *  @type string\r\n             */\r\n            \"sTitle\": null,\r\n\r\n            /**\r\n             * Column sorting and filtering type\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sType\": null,\r\n\r\n            /**\r\n             * Width of the column\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sWidth\": null,\r\n\r\n            /**\r\n             * Width of the column when it was first \"encountered\"\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sWidthOrig\": null\r\n        };\r\n\r\n\r\n        /*\r\n         * Developer note: The properties of the object below are given in Hungarian\r\n         * notation, that was used as the interface for DataTables prior to v1.10, however\r\n         * from v1.10 onwards the primary interface is camel case. In order to avoid\r\n         * breaking backwards compatibility utterly with this change, the Hungarian\r\n         * version is still, internally the primary interface, but is is not documented\r\n         * - hence the @name tags in each doc comment. This allows a Javascript function\r\n         * to create a map from Hungarian notation to camel case (going the other direction\r\n         * would require each property to be listed, which would at around 3K to the size\r\n         * of DataTables, while this method is about a 0.5K hit.\r\n         *\r\n         * Ultimately this does pave the way for Hungarian notation to be dropped\r\n         * completely, but that is a massive amount of work and will break current\r\n         * installs (therefore is on-hold until v2).\r\n         */\r\n\r\n        /**\r\n         * Initialisation options that can be given to DataTables at initialisation\r\n         * time.\r\n         *  @namespace\r\n         */\r\n        DataTable.defaults = {\r\n            /**\r\n             * An array of data to use for the table, passed in at initialisation which\r\n             * will be used in preference to any data which is already in the DOM. This is\r\n             * particularly useful for constructing tables purely in Javascript, for\r\n             * example with a custom Ajax call.\r\n             *  @type array\r\n             *  @default null\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.data\r\n             *\r\n             *  @example\r\n             *    // Using a 2D array data source\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"data\": [\r\n\t\t *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\r\n\t\t *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\r\n\t\t *        ],\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"title\": \"Engine\" },\r\n\t\t *          { \"title\": \"Browser\" },\r\n\t\t *          { \"title\": \"Platform\" },\r\n\t\t *          { \"title\": \"Version\" },\r\n\t\t *          { \"title\": \"Grade\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using an array of objects as a data source (`data`)\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"data\": [\r\n\t\t *          {\r\n\t\t *            \"engine\":   \"Trident\",\r\n\t\t *            \"browser\":  \"Internet Explorer 4.0\",\r\n\t\t *            \"platform\": \"Win 95+\",\r\n\t\t *            \"version\":  4,\r\n\t\t *            \"grade\":    \"X\"\r\n\t\t *          },\r\n\t\t *          {\r\n\t\t *            \"engine\":   \"Trident\",\r\n\t\t *            \"browser\":  \"Internet Explorer 5.0\",\r\n\t\t *            \"platform\": \"Win 95+\",\r\n\t\t *            \"version\":  5,\r\n\t\t *            \"grade\":    \"C\"\r\n\t\t *          }\r\n\t\t *        ],\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"title\": \"Engine\",   \"data\": \"engine\" },\r\n\t\t *          { \"title\": \"Browser\",  \"data\": \"browser\" },\r\n\t\t *          { \"title\": \"Platform\", \"data\": \"platform\" },\r\n\t\t *          { \"title\": \"Version\",  \"data\": \"version\" },\r\n\t\t *          { \"title\": \"Grade\",    \"data\": \"grade\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"aaData\": null,\r\n\r\n\r\n            /**\r\n             * If ordering is enabled, then DataTables will perform a first pass sort on\r\n             * initialisation. You can define which column(s) the sort is performed\r\n             * upon, and the sorting direction, with this variable. The `sorting` array\r\n             * should contain an array for each column to be sorted initially containing\r\n             * the column's index and a direction string ('asc' or 'desc').\r\n             *  @type array\r\n             *  @default [[0,'asc']]\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.order\r\n             *\r\n             *  @example\r\n             *    // Sort by 3rd column first, and then 4th column\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"order\": [[2,'asc'], [3,'desc']]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *    // No initial sorting\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"order\": []\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"aaSorting\": [[0,'asc']],\r\n\r\n\r\n            /**\r\n             * This parameter is basically identical to the `sorting` parameter, but\r\n             * cannot be overridden by user interaction with the table. What this means\r\n             * is that you could have a column (visible or hidden) which the sorting\r\n             * will always be forced on first - any sorting after that (from the user)\r\n             * will then be performed as required. This can be useful for grouping rows\r\n             * together.\r\n             *  @type array\r\n             *  @default null\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.orderFixed\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"orderFixed\": [[0,'asc']]\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"aaSortingFixed\": [],\r\n\r\n\r\n            /**\r\n             * DataTables can be instructed to load data to display in the table from a\r\n             * Ajax source. This option defines how that Ajax call is made and where to.\r\n             *\r\n             * The `ajax` property has three different modes of operation, depending on\r\n             * how it is defined. These are:\r\n             *\r\n             * * `string` - Set the URL from where the data should be loaded from.\r\n             * * `object` - Define properties for `jQuery.ajax`.\r\n             * * `function` - Custom data get function\r\n             *\r\n             * `string`\r\n             * --------\r\n             *\r\n             * As a string, the `ajax` property simply defines the URL from which\r\n             * DataTables will load data.\r\n             *\r\n             * `object`\r\n             * --------\r\n             *\r\n             * As an object, the parameters in the object are passed to\r\n             * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\r\n             * of the Ajax request. DataTables has a number of default parameters which\r\n             * you can override using this option. Please refer to the jQuery\r\n             * documentation for a full description of the options available, although\r\n             * the following parameters provide additional options in DataTables or\r\n             * require special consideration:\r\n             *\r\n             * * `data` - As with jQuery, `data` can be provided as an object, but it\r\n             *   can also be used as a function to manipulate the data DataTables sends\r\n             *   to the server. The function takes a single parameter, an object of\r\n             *   parameters with the values that DataTables has readied for sending. An\r\n             *   object may be returned which will be merged into the DataTables\r\n             *   defaults, or you can add the items to the object that was passed in and\r\n             *   not return anything from the function. This supersedes `fnServerParams`\r\n             *   from DataTables 1.9-.\r\n             *\r\n             * * `dataSrc` - By default DataTables will look for the property `data` (or\r\n             *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\r\n             *   from an Ajax source or for server-side processing - this parameter\r\n             *   allows that property to be changed. You can use Javascript dotted\r\n             *   object notation to get a data source for multiple levels of nesting, or\r\n             *   it my be used as a function. As a function it takes a single parameter,\r\n             *   the JSON returned from the server, which can be manipulated as\r\n             *   required, with the returned value being that used by DataTables as the\r\n             *   data source for the table. This supersedes `sAjaxDataProp` from\r\n             *   DataTables 1.9-.\r\n             *\r\n             * * `success` - Should not be overridden it is used internally in\r\n             *   DataTables. To manipulate / transform the data returned by the server\r\n             *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\r\n             *\r\n             * `function`\r\n             * ----------\r\n             *\r\n             * As a function, making the Ajax call is left up to yourself allowing\r\n             * complete control of the Ajax request. Indeed, if desired, a method other\r\n             * than Ajax could be used to obtain the required data, such as Web storage\r\n             * or an AIR database.\r\n             *\r\n             * The function is given four parameters and no return is required. The\r\n             * parameters are:\r\n             *\r\n             * 1. _object_ - Data to send to the server\r\n             * 2. _function_ - Callback function that must be executed when the required\r\n             *    data has been obtained. That data should be passed into the callback\r\n             *    as the only parameter\r\n             * 3. _object_ - DataTables settings object for the table\r\n             *\r\n             * Note that this supersedes `fnServerData` from DataTables 1.9-.\r\n             *\r\n             *  @type string|object|function\r\n             *  @default null\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.ajax\r\n             *  @since 1.10.0\r\n             *\r\n             * @example\r\n             *   // Get JSON data from a file via Ajax.\r\n             *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": \"data.json\"\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Get JSON data from a file via Ajax, using `dataSrc` to change\r\n             *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": {\r\n\t\t *       \"url\": \"data.json\",\r\n\t\t *       \"dataSrc\": \"tableData\"\r\n\t\t *     }\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\r\n             *   // from a plain array rather than an array in an object\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": {\r\n\t\t *       \"url\": \"data.json\",\r\n\t\t *       \"dataSrc\": \"\"\r\n\t\t *     }\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Manipulate the data returned from the server - add a link to data\r\n             *   // (note this can, should, be done using `render` for the column - this\r\n             *   // is just a simple example of how the data can be manipulated).\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": {\r\n\t\t *       \"url\": \"data.json\",\r\n\t\t *       \"dataSrc\": function ( json ) {\r\n\t\t *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\r\n\t\t *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\r\n\t\t *         }\r\n\t\t *         return json;\r\n\t\t *       }\r\n\t\t *     }\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Add data to the request\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": {\r\n\t\t *       \"url\": \"data.json\",\r\n\t\t *       \"data\": function ( d ) {\r\n\t\t *         return {\r\n\t\t *           \"extra_search\": $('#extra').val()\r\n\t\t *         };\r\n\t\t *       }\r\n\t\t *     }\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Send request as POST\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": {\r\n\t\t *       \"url\": \"data.json\",\r\n\t\t *       \"type\": \"POST\"\r\n\t\t *     }\r\n\t\t *   } );\r\n             *\r\n             * @example\r\n             *   // Get the data from localStorage (could interface with a form for\r\n             *   // adding, editing and removing rows).\r\n             *   $('#example').dataTable( {\r\n\t\t *     \"ajax\": function (data, callback, settings) {\r\n\t\t *       callback(\r\n\t\t *         JSON.parse( localStorage.getItem('dataTablesData') )\r\n\t\t *       );\r\n\t\t *     }\r\n\t\t *   } );\r\n             */\r\n            \"ajax\": null,\r\n\r\n\r\n            /**\r\n             * This parameter allows you to readily specify the entries in the length drop\r\n             * down menu that DataTables shows when pagination is enabled. It can be\r\n             * either a 1D array of options which will be used for both the displayed\r\n             * option and the value, or a 2D array which will use the array in the first\r\n             * position as the value, and the array in the second position as the\r\n             * displayed options (useful for language strings such as 'All').\r\n             *\r\n             * Note that the `pageLength` property will be automatically set to the\r\n             * first value given in this array, unless `pageLength` is also provided.\r\n             *  @type array\r\n             *  @default [ 10, 25, 50, 100 ]\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.lengthMenu\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"aLengthMenu\": [ 10, 25, 50, 100 ],\r\n\r\n\r\n            /**\r\n             * The `columns` option in the initialisation parameter allows you to define\r\n             * details about the way individual columns behave. For a full list of\r\n             * column options that can be set, please see\r\n             * {@link DataTable.defaults.column}. Note that if you use `columns` to\r\n             * define your columns, you must have an entry in the array for every single\r\n             * column that you have in your table (these can be null if you don't which\r\n             * to specify any options).\r\n             *  @member\r\n             *\r\n             *  @name DataTable.defaults.column\r\n             */\r\n            \"aoColumns\": null,\r\n\r\n            /**\r\n             * Very similar to `columns`, `columnDefs` allows you to target a specific\r\n             * column, multiple columns, or all columns, using the `targets` property of\r\n             * each object in the array. This allows great flexibility when creating\r\n             * tables, as the `columnDefs` arrays can be of any length, targeting the\r\n             * columns you specifically want. `columnDefs` may use any of the column\r\n             * options available: {@link DataTable.defaults.column}, but it _must_\r\n             * have `targets` defined in each object in the array. Values in the `targets`\r\n             * array may be:\r\n             *   <ul>\r\n             *     <li>a string - class name will be matched on the TH for the column</li>\r\n             *     <li>0 or a positive integer - column index counting from the left</li>\r\n             *     <li>a negative integer - column index counting from the right</li>\r\n             *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\r\n             *   </ul>\r\n             *  @member\r\n             *\r\n             *  @name DataTable.defaults.columnDefs\r\n             */\r\n            \"aoColumnDefs\": null,\r\n\r\n\r\n            /**\r\n             * Basically the same as `search`, this parameter defines the individual column\r\n             * filtering state at initialisation time. The array must be of the same size\r\n             * as the number of columns, and each element be an object with the parameters\r\n             * `search` and `escapeRegex` (the latter is optional). 'null' is also\r\n             * accepted and the default will be used.\r\n             *  @type array\r\n             *  @default []\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.searchCols\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"searchCols\": [\r\n\t\t *          null,\r\n\t\t *          { \"search\": \"My filter\" },\r\n\t\t *          null,\r\n\t\t *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"aoSearchCols\": [],\r\n\r\n\r\n            /**\r\n             * An array of CSS classes that should be applied to displayed rows. This\r\n             * array may be of any length, and DataTables will apply each class\r\n             * sequentially, looping when required.\r\n             *  @type array\r\n             *  @default null <i>Will take the values determined by the `oClasses.stripe*`\r\n             *    options</i>\r\n             *\r\n             *  @dtopt Option\r\n             *  @name DataTable.defaults.stripeClasses\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"asStripeClasses\": null,\r\n\r\n\r\n            /**\r\n             * Enable or disable automatic column width calculation. This can be disabled\r\n             * as an optimisation (it takes some time to calculate the widths) if the\r\n             * tables widths are passed in using `columns`.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.autoWidth\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"autoWidth\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bAutoWidth\": true,\r\n\r\n\r\n            /**\r\n             * Deferred rendering can provide DataTables with a huge speed boost when you\r\n             * are using an Ajax or JS data source for the table. This option, when set to\r\n             * true, will cause DataTables to defer the creation of the table elements for\r\n             * each row until they are needed for a draw - saving a significant amount of\r\n             * time.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.deferRender\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"ajax\": \"sources/arrays.txt\",\r\n\t\t *        \"deferRender\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bDeferRender\": false,\r\n\r\n\r\n            /**\r\n             * Replace a DataTable which matches the given selector and replace it with\r\n             * one which has the properties of the new initialisation object passed. If no\r\n             * table matches the selector, then the new DataTable will be constructed as\r\n             * per normal.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.destroy\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"srollY\": \"200px\",\r\n\t\t *        \"paginate\": false\r\n\t\t *      } );\r\n\t\t *\r\n\t\t *      // Some time later....\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"filter\": false,\r\n\t\t *        \"destroy\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bDestroy\": false,\r\n\r\n\r\n            /**\r\n             * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\r\n             * that it allows the end user to input multiple words (space separated) and\r\n             * will match a row containing those words, even if not in the order that was\r\n             * specified (this allow matching across multiple columns). Note that if you\r\n             * wish to use filtering in DataTables this must remain 'true' - to remove the\r\n             * default filtering input box and retain filtering abilities, please use\r\n             * {@link DataTable.defaults.dom}.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.searching\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"searching\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bFilter\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable the table information display. This shows information\r\n             * about the data that is currently visible on the page, including information\r\n             * about filtered data if that action is being performed.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.info\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"info\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bInfo\": true,\r\n\r\n\r\n            /**\r\n             * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some\r\n             * slightly different and additional mark-up from what DataTables has\r\n             * traditionally used).\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.jQueryUI\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"jQueryUI\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bJQueryUI\": false,\r\n\r\n\r\n            /**\r\n             * Allows the end user to select the size of a formatted page from a select\r\n             * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.lengthChange\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"lengthChange\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bLengthChange\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable pagination.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.paging\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"paging\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bPaginate\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable the display of a 'processing' indicator when the table is\r\n             * being processed (e.g. a sort). This is particularly useful for tables with\r\n             * large amounts of data where it can take a noticeable amount of time to sort\r\n             * the entries.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.processing\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"processing\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bProcessing\": false,\r\n\r\n\r\n            /**\r\n             * Retrieve the DataTables object for the given selector. Note that if the\r\n             * table has already been initialised, this parameter will cause DataTables\r\n             * to simply return the object that has already been set up - it will not take\r\n             * account of any changes you might have made to the initialisation object\r\n             * passed to DataTables (setting this parameter to true is an acknowledgement\r\n             * that you understand this). `destroy` can be used to reinitialise a table if\r\n             * you need.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.retrieve\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      initTable();\r\n\t\t *      tableActions();\r\n\t\t *    } );\r\n             *\r\n             *    function initTable ()\r\n             *    {\r\n\t\t *      return $('#example').dataTable( {\r\n\t\t *        \"scrollY\": \"200px\",\r\n\t\t *        \"paginate\": false,\r\n\t\t *        \"retrieve\": true\r\n\t\t *      } );\r\n\t\t *    }\r\n             *\r\n             *    function tableActions ()\r\n             *    {\r\n\t\t *      var table = initTable();\r\n\t\t *      // perform API operations with oTable\r\n\t\t *    }\r\n             */\r\n            \"bRetrieve\": false,\r\n\r\n\r\n            /**\r\n             * When vertical (y) scrolling is enabled, DataTables will force the height of\r\n             * the table's viewport to the given height at all times (useful for layout).\r\n             * However, this can look odd when filtering data down to a small data set,\r\n             * and the footer is left \"floating\" further down. This parameter (when\r\n             * enabled) will cause DataTables to collapse the table's viewport down when\r\n             * the result set will fit within the given Y height.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.scrollCollapse\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"scrollY\": \"200\",\r\n\t\t *        \"scrollCollapse\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bScrollCollapse\": false,\r\n\r\n\r\n            /**\r\n             * Configure DataTables to use server-side processing. Note that the\r\n             * `ajax` parameter must also be given in order to give DataTables a\r\n             * source to obtain the required data for each draw.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.serverSide\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"serverSide\": true,\r\n\t\t *        \"ajax\": \"xhr.php\"\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bServerSide\": false,\r\n\r\n\r\n            /**\r\n             * Enable or disable sorting of columns. Sorting of individual columns can be\r\n             * disabled by the `sortable` option for each column.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.ordering\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"ordering\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bSort\": true,\r\n\r\n\r\n            /**\r\n             * Enable or display DataTables' ability to sort multiple columns at the\r\n             * same time (activated by shift-click by the user).\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.orderMulti\r\n             *\r\n             *  @example\r\n             *    // Disable multiple column sorting ability\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"orderMulti\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bSortMulti\": true,\r\n\r\n\r\n            /**\r\n             * Allows control over whether DataTables should use the top (true) unique\r\n             * cell that is found for a single column, or the bottom (false - default).\r\n             * This is useful when using complex headers.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.orderCellsTop\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"orderCellsTop\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bSortCellsTop\": false,\r\n\r\n\r\n            /**\r\n             * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\r\n             * `sorting\\_3` to the columns which are currently being sorted on. This is\r\n             * presented as a feature switch as it can increase processing time (while\r\n             * classes are removed and added) so for large data sets you might want to\r\n             * turn this off.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.orderClasses\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"orderClasses\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bSortClasses\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable state saving. When enabled HTML5 `localStorage` will be\r\n             * used to save table display information such as pagination information,\r\n             * display length, filtering and sorting. As such when the end user reloads\r\n             * the page the display display will match what thy had previously set up.\r\n             *\r\n             * Due to the use of `localStorage` the default state saving is not supported\r\n             * in IE6 or 7. If state saving is required in those browsers, use\r\n             * `stateSaveCallback` to provide a storage solution such as cookies.\r\n             *  @type boolean\r\n             *  @default false\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.stateSave\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function () {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"bStateSave\": false,\r\n\r\n\r\n            /**\r\n             * This function is called when a TR element is created (and all TD child\r\n             * elements have been inserted), or registered if using a DOM source, allowing\r\n             * manipulation of the TR element (adding classes etc).\r\n             *  @type function\r\n             *  @param {node} row \"TR\" element for the current row\r\n             *  @param {array} data Raw data array for this row\r\n             *  @param {int} dataIndex The index of this row in the internal aoData array\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.createdRow\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"createdRow\": function( row, data, dataIndex ) {\r\n\t\t *          // Bold the grade for all 'A' grade browsers\r\n\t\t *          if ( data[4] == \"A\" )\r\n\t\t *          {\r\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\r\n\t\t *          }\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnCreatedRow\": null,\r\n\r\n\r\n            /**\r\n             * This function is called on every 'draw' event, and allows you to\r\n             * dynamically modify any aspect you want about the created DOM.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.drawCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"drawCallback\": function( settings ) {\r\n\t\t *          alert( 'DataTables has redrawn the table' );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnDrawCallback\": null,\r\n\r\n\r\n            /**\r\n             * Identical to fnHeaderCallback() but for the table footer this function\r\n             * allows you to modify the table footer on every 'draw' event.\r\n             *  @type function\r\n             *  @param {node} foot \"TR\" element for the footer\r\n             *  @param {array} data Full table data (as derived from the original HTML)\r\n             *  @param {int} start Index for the current display starting point in the\r\n             *    display array\r\n             *  @param {int} end Index for the current display ending point in the\r\n             *    display array\r\n             *  @param {array int} display Index array to translate the visual position\r\n             *    to the full data array\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.footerCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"footerCallback\": function( tfoot, data, start, end, display ) {\r\n\t\t *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"fnFooterCallback\": null,\r\n\r\n\r\n            /**\r\n             * When rendering large numbers in the information element for the table\r\n             * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\r\n             * to have a comma separator for the 'thousands' units (e.g. 1 million is\r\n             * rendered as \"1,000,000\") to help readability for the end user. This\r\n             * function will override the default method DataTables uses.\r\n             *  @type function\r\n             *  @member\r\n             *  @param {int} toFormat number to be formatted\r\n             *  @returns {string} formatted string for DataTables to show the number\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.formatNumber\r\n             *\r\n             *  @example\r\n             *    // Format a number using a single quote for the separator (note that\r\n             *    // this can also be done with the language.thousands option)\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"formatNumber\": function ( toFormat ) {\r\n\t\t *          return toFormat.toString().replace(\r\n\t\t *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\r\n\t\t *          );\r\n\t\t *        };\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnFormatNumber\": function ( toFormat ) {\r\n                return toFormat.toString().replace(\r\n                    /\\B(?=(\\d{3})+(?!\\d))/g,\r\n                    this.oLanguage.sThousands\r\n                );\r\n            },\r\n\r\n\r\n            /**\r\n             * This function is called on every 'draw' event, and allows you to\r\n             * dynamically modify the header row. This can be used to calculate and\r\n             * display useful information about the table.\r\n             *  @type function\r\n             *  @param {node} head \"TR\" element for the header\r\n             *  @param {array} data Full table data (as derived from the original HTML)\r\n             *  @param {int} start Index for the current display starting point in the\r\n             *    display array\r\n             *  @param {int} end Index for the current display ending point in the\r\n             *    display array\r\n             *  @param {array int} display Index array to translate the visual position\r\n             *    to the full data array\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.headerCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"fheaderCallback\": function( head, data, start, end, display ) {\r\n\t\t *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"fnHeaderCallback\": null,\r\n\r\n\r\n            /**\r\n             * The information element can be used to convey information about the current\r\n             * state of the table. Although the internationalisation options presented by\r\n             * DataTables are quite capable of dealing with most customisations, there may\r\n             * be times where you wish to customise the string further. This callback\r\n             * allows you to do exactly that.\r\n             *  @type function\r\n             *  @param {object} oSettings DataTables settings object\r\n             *  @param {int} start Starting position in data for the draw\r\n             *  @param {int} end End position in data for the draw\r\n             *  @param {int} max Total number of rows in the table (regardless of\r\n             *    filtering)\r\n             *  @param {int} total Total number of rows in the data set, after filtering\r\n             *  @param {string} pre The string that DataTables has formatted using it's\r\n             *    own rules\r\n             *  @returns {string} The string to be displayed in the information element.\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.infoCallback\r\n             *\r\n             *  @example\r\n             *    $('#example').dataTable( {\r\n\t\t *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\r\n\t\t *        return start +\" to \"+ end;\r\n\t\t *      }\r\n\t\t *    } );\r\n             */\r\n            \"fnInfoCallback\": null,\r\n\r\n\r\n            /**\r\n             * Called when the table has been initialised. Normally DataTables will\r\n             * initialise sequentially and there will be no need for this function,\r\n             * however, this does not hold true when using external language information\r\n             * since that is obtained using an async XHR call.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} json The JSON object request from the server - only\r\n             *    present if client-side Ajax sourced data is used\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.initComplete\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"initComplete\": function(settings, json) {\r\n\t\t *          alert( 'DataTables has finished its initialisation.' );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"fnInitComplete\": null,\r\n\r\n\r\n            /**\r\n             * Called at the very start of each table draw and can be used to cancel the\r\n             * draw by returning false, any other return (including undefined) results in\r\n             * the full draw occurring).\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @returns {boolean} False will cancel the draw, anything else (including no\r\n             *    return) will allow it to complete.\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.preDrawCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"preDrawCallback\": function( settings ) {\r\n\t\t *          if ( $('#test').val() == 1 ) {\r\n\t\t *            return false;\r\n\t\t *          }\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnPreDrawCallback\": null,\r\n\r\n\r\n            /**\r\n             * This function allows you to 'post process' each row after it have been\r\n             * generated for each table draw, but before it is rendered on screen. This\r\n             * function might be used for setting the row class name etc.\r\n             *  @type function\r\n             *  @param {node} row \"TR\" element for the current row\r\n             *  @param {array} data Raw data array for this row\r\n             *  @param {int} displayIndex The display index for the current table draw\r\n             *  @param {int} displayIndexFull The index of the data in the full list of\r\n             *    rows (after filtering)\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.rowCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\r\n\t\t *          // Bold the grade for all 'A' grade browsers\r\n\t\t *          if ( data[4] == \"A\" ) {\r\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\r\n\t\t *          }\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnRowCallback\": null,\r\n\r\n\r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             * This parameter allows you to override the default function which obtains\r\n             * the data from the server so something more suitable for your application.\r\n             * For example you could use POST data, or pull information from a Gears or\r\n             * AIR database.\r\n             *  @type function\r\n             *  @member\r\n             *  @param {string} source HTTP source to obtain the data from (`ajax`)\r\n             *  @param {array} data A key/value pair object containing the data to send\r\n             *    to the server\r\n             *  @param {function} callback to be called on completion of the data get\r\n             *    process that will draw the data on the page.\r\n             *  @param {object} settings DataTables settings object\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.serverData\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"fnServerData\": null,\r\n\r\n\r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             *  It is often useful to send extra data to the server when making an Ajax\r\n             * request - for example custom filtering information, and this callback\r\n             * function makes it trivial to send extra information to the server. The\r\n             * passed in parameter is the data set that has been constructed by\r\n             * DataTables, and you can add to this or modify it as you require.\r\n             *  @type function\r\n             *  @param {array} data Data array (array of objects which are name/value\r\n             *    pairs) that has been constructed by DataTables and will be sent to the\r\n             *    server. In the case of Ajax sourced data with server-side processing\r\n             *    this will be an empty array, for server-side processing there will be a\r\n             *    significant number of parameters!\r\n             *  @returns {undefined} Ensure that you modify the data array passed in,\r\n             *    as this is passed by reference.\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.serverParams\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"fnServerParams\": null,\r\n\r\n\r\n            /**\r\n             * Load the table state. With this function you can define from where, and how, the\r\n             * state of a table is loaded. By default DataTables will load from `localStorage`\r\n             * but you might wish to use a server-side database or cookies.\r\n             *  @type function\r\n             *  @member\r\n             *  @param {object} settings DataTables settings object\r\n             *  @return {object} The DataTables state object to be loaded\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateLoadCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateLoadCallback\": function (settings) {\r\n\t\t *          var o;\r\n\t\t *\r\n\t\t *          // Send an Ajax request to the server to get the data. Note that\r\n\t\t *          // this is a synchronous request.\r\n\t\t *          $.ajax( {\r\n\t\t *            \"url\": \"/state_load\",\r\n\t\t *            \"async\": false,\r\n\t\t *            \"dataType\": \"json\",\r\n\t\t *            \"success\": function (json) {\r\n\t\t *              o = json;\r\n\t\t *            }\r\n\t\t *          } );\r\n\t\t *\r\n\t\t *          return o;\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnStateLoadCallback\": function ( settings ) {\r\n                try {\r\n                    return JSON.parse(\r\n                        (settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(\r\n                            'DataTables_'+settings.sInstance+'_'+location.pathname\r\n                        )\r\n                    );\r\n                } catch (e) {}\r\n            },\r\n\r\n\r\n            /**\r\n             * Callback which allows modification of the saved state prior to loading that state.\r\n             * This callback is called when the table is loading state from the stored data, but\r\n             * prior to the settings object being modified by the saved state. Note that for\r\n             * plug-in authors, you should use the `stateLoadParams` event to load parameters for\r\n             * a plug-in.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} data The state object that is to be loaded\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateLoadParams\r\n             *\r\n             *  @example\r\n             *    // Remove a saved filter, so filtering is never loaded\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateLoadParams\": function (settings, data) {\r\n\t\t *          data.oSearch.sSearch = \"\";\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Disallow state loading by returning false\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateLoadParams\": function (settings, data) {\r\n\t\t *          return false;\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnStateLoadParams\": null,\r\n\r\n\r\n            /**\r\n             * Callback that is called when the state has been loaded from the state saving method\r\n             * and the DataTables settings object has been modified as a result of the loaded state.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} data The state object that was loaded\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateLoaded\r\n             *\r\n             *  @example\r\n             *    // Show an alert with the filtering value that was saved\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateLoaded\": function (settings, data) {\r\n\t\t *          alert( 'Saved filter was: '+data.oSearch.sSearch );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnStateLoaded\": null,\r\n\r\n\r\n            /**\r\n             * Save the table state. This function allows you to define where and how the state\r\n             * information for the table is stored By default DataTables will use `localStorage`\r\n             * but you might wish to use a server-side database or cookies.\r\n             *  @type function\r\n             *  @member\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} data The state object to be saved\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateSaveCallback\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateSaveCallback\": function (settings, data) {\r\n\t\t *          // Send an Ajax request to the server with the state object\r\n\t\t *          $.ajax( {\r\n\t\t *            \"url\": \"/state_save\",\r\n\t\t *            \"data\": data,\r\n\t\t *            \"dataType\": \"json\",\r\n\t\t *            \"method\": \"POST\"\r\n\t\t *            \"success\": function () {}\r\n\t\t *          } );\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnStateSaveCallback\": function ( settings, data ) {\r\n                try {\r\n                    (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(\r\n                        'DataTables_'+settings.sInstance+'_'+location.pathname,\r\n                        JSON.stringify( data )\r\n                    );\r\n                } catch (e) {}\r\n            },\r\n\r\n\r\n            /**\r\n             * Callback which allows modification of the state to be saved. Called when the table\r\n             * has changed state a new state save is required. This method allows modification of\r\n             * the state saving object prior to actually doing the save, including addition or\r\n             * other state properties or modification. Note that for plug-in authors, you should\r\n             * use the `stateSaveParams` event to save parameters for a plug-in.\r\n             *  @type function\r\n             *  @param {object} settings DataTables settings object\r\n             *  @param {object} data The state object to be saved\r\n             *\r\n             *  @dtopt Callbacks\r\n             *  @name DataTable.defaults.stateSaveParams\r\n             *\r\n             *  @example\r\n             *    // Remove a saved filter, so filtering is never saved\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateSave\": true,\r\n\t\t *        \"stateSaveParams\": function (settings, data) {\r\n\t\t *          data.oSearch.sSearch = \"\";\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"fnStateSaveParams\": null,\r\n\r\n\r\n            /**\r\n             * Duration for which the saved state information is considered valid. After this period\r\n             * has elapsed the state will be returned to the default.\r\n             * Value is given in seconds.\r\n             *  @type int\r\n             *  @default 7200 <i>(2 hours)</i>\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.stateDuration\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"stateDuration\": 60*60*24; // 1 day\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"iStateDuration\": 7200,\r\n\r\n\r\n            /**\r\n             * When enabled DataTables will not make a request to the server for the first\r\n             * page draw - rather it will use the data already on the page (no sorting etc\r\n             * will be applied to it), thus saving on an XHR at load time. `deferLoading`\r\n             * is used to indicate that deferred loading is required, but it is also used\r\n             * to tell DataTables how many records there are in the full table (allowing\r\n             * the information element and pagination to be displayed correctly). In the case\r\n             * where a filtering is applied to the table on initial load, this can be\r\n             * indicated by giving the parameter as an array, where the first element is\r\n             * the number of records available after filtering and the second element is the\r\n             * number of records without filtering (allowing the table information element\r\n             * to be shown correctly).\r\n             *  @type int | array\r\n             *  @default null\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.deferLoading\r\n             *\r\n             *  @example\r\n             *    // 57 records available in the table, no filtering applied\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"serverSide\": true,\r\n\t\t *        \"ajax\": \"scripts/server_processing.php\",\r\n\t\t *        \"deferLoading\": 57\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // 57 records after filtering, 100 without filtering (an initial filter applied)\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"serverSide\": true,\r\n\t\t *        \"ajax\": \"scripts/server_processing.php\",\r\n\t\t *        \"deferLoading\": [ 57, 100 ],\r\n\t\t *        \"search\": {\r\n\t\t *          \"search\": \"my_filter\"\r\n\t\t *        }\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"iDeferLoading\": null,\r\n\r\n\r\n            /**\r\n             * Number of rows to display on a single page when using pagination. If\r\n             * feature enabled (`lengthChange`) then the end user will be able to override\r\n             * this to a custom setting using a pop-up menu.\r\n             *  @type int\r\n             *  @default 10\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.pageLength\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"pageLength\": 50\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"iDisplayLength\": 10,\r\n\r\n\r\n            /**\r\n             * Define the starting point for data display when using DataTables with\r\n             * pagination. Note that this parameter is the number of records, rather than\r\n             * the page number, so if you have 10 records per page and want to start on\r\n             * the third page, it should be \"20\".\r\n             *  @type int\r\n             *  @default 0\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.displayStart\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"displayStart\": 20\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"iDisplayStart\": 0,\r\n\r\n\r\n            /**\r\n             * By default DataTables allows keyboard navigation of the table (sorting, paging,\r\n             * and filtering) by adding a `tabindex` attribute to the required elements. This\r\n             * allows you to tab through the controls and press the enter key to activate them.\r\n             * The tabindex is default 0, meaning that the tab follows the flow of the document.\r\n             * You can overrule this using this parameter if you wish. Use a value of -1 to\r\n             * disable built-in keyboard navigation.\r\n             *  @type int\r\n             *  @default 0\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.tabIndex\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"tabIndex\": 1\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"iTabIndex\": 0,\r\n\r\n\r\n            /**\r\n             * Classes that DataTables assigns to the various components and features\r\n             * that it adds to the HTML table. This allows classes to be configured\r\n             * during initialisation in addition to through the static\r\n             * {@link DataTable.ext.oStdClasses} object).\r\n             *  @namespace\r\n             *  @name DataTable.defaults.classes\r\n             */\r\n            \"oClasses\": {},\r\n\r\n\r\n            /**\r\n             * All strings that DataTables uses in the user interface that it creates\r\n             * are defined in this object, allowing you to modified them individually or\r\n             * completely replace them all as required.\r\n             *  @namespace\r\n             *  @name DataTable.defaults.language\r\n             */\r\n            \"oLanguage\": {\r\n                /**\r\n                 * Strings that are used for WAI-ARIA labels and controls only (these are not\r\n                 * actually visible on the page, but will be read by screenreaders, and thus\r\n                 * must be internationalised as well).\r\n                 *  @namespace\r\n                 *  @name DataTable.defaults.language.aria\r\n                 */\r\n                \"oAria\": {\r\n                    /**\r\n                     * ARIA label that is added to the table headers when the column may be\r\n                     * sorted ascending by activing the column (click or return when focused).\r\n                     * Note that the column header is prefixed to this string.\r\n                     *  @type string\r\n                     *  @default : activate to sort column ascending\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.aria.sortAscending\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"aria\": {\r\n\t\t\t\t *            \"sortAscending\": \" - click/return to sort ascending\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sSortAscending\": \": activate to sort column ascending\",\r\n\r\n                    /**\r\n                     * ARIA label that is added to the table headers when the column may be\r\n                     * sorted descending by activing the column (click or return when focused).\r\n                     * Note that the column header is prefixed to this string.\r\n                     *  @type string\r\n                     *  @default : activate to sort column ascending\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.aria.sortDescending\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"aria\": {\r\n\t\t\t\t *            \"sortDescending\": \" - click/return to sort descending\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sSortDescending\": \": activate to sort column descending\"\r\n                },\r\n\r\n                /**\r\n                 * Pagination string used by DataTables for the built-in pagination\r\n                 * control types.\r\n                 *  @namespace\r\n                 *  @name DataTable.defaults.language.paginate\r\n                 */\r\n                \"oPaginate\": {\r\n                    /**\r\n                     * Text to use when using the 'full_numbers' type of pagination for the\r\n                     * button to take the user to the first page.\r\n                     *  @type string\r\n                     *  @default First\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.paginate.first\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"paginate\": {\r\n\t\t\t\t *            \"first\": \"First page\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sFirst\": \"First\",\r\n\r\n\r\n                    /**\r\n                     * Text to use when using the 'full_numbers' type of pagination for the\r\n                     * button to take the user to the last page.\r\n                     *  @type string\r\n                     *  @default Last\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.paginate.last\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"paginate\": {\r\n\t\t\t\t *            \"last\": \"Last page\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sLast\": \"Last\",\r\n\r\n\r\n                    /**\r\n                     * Text to use for the 'next' pagination button (to take the user to the\r\n                     * next page).\r\n                     *  @type string\r\n                     *  @default Next\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.paginate.next\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"paginate\": {\r\n\t\t\t\t *            \"next\": \"Next page\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sNext\": \"Next\",\r\n\r\n\r\n                    /**\r\n                     * Text to use for the 'previous' pagination button (to take the user to\r\n                     * the previous page).\r\n                     *  @type string\r\n                     *  @default Previous\r\n                     *\r\n                     *  @dtopt Language\r\n                     *  @name DataTable.defaults.language.paginate.previous\r\n                     *\r\n                     *  @example\r\n                     *    $(document).ready( function() {\r\n\t\t\t\t *      $('#example').dataTable( {\r\n\t\t\t\t *        \"language\": {\r\n\t\t\t\t *          \"paginate\": {\r\n\t\t\t\t *            \"previous\": \"Previous page\"\r\n\t\t\t\t *          }\r\n\t\t\t\t *        }\r\n\t\t\t\t *      } );\r\n\t\t\t\t *    } );\r\n                     */\r\n                    \"sPrevious\": \"Previous\"\r\n                },\r\n\r\n                /**\r\n                 * This string is shown in preference to `zeroRecords` when the table is\r\n                 * empty of data (regardless of filtering). Note that this is an optional\r\n                 * parameter - if it is not given, the value of `zeroRecords` will be used\r\n                 * instead (either the default or given value).\r\n                 *  @type string\r\n                 *  @default No data available in table\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.emptyTable\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"emptyTable\": \"No data available in table\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sEmptyTable\": \"No data available in table\",\r\n\r\n\r\n                /**\r\n                 * This string gives information to the end user about the information\r\n                 * that is current on display on the page. The following tokens can be\r\n                 * used in the string and will be dynamically replaced as the table\r\n                 * display updates. This tokens can be placed anywhere in the string, or\r\n                 * removed as needed by the language requires:\r\n                 *\r\n                 * * `\\_START\\_` - Display index of the first record on the current page\r\n                 * * `\\_END\\_` - Display index of the last record on the current page\r\n                 * * `\\_TOTAL\\_` - Number of records in the table after filtering\r\n                 * * `\\_MAX\\_` - Number of records in the table without filtering\r\n                 * * `\\_PAGE\\_` - Current page number\r\n                 * * `\\_PAGES\\_` - Total number of pages of data in the table\r\n                 *\r\n                 *  @type string\r\n                 *  @default Showing _START_ to _END_ of _TOTAL_ entries\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.info\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\r\n\r\n\r\n                /**\r\n                 * Display information string for when the table is empty. Typically the\r\n                 * format of this string should match `info`.\r\n                 *  @type string\r\n                 *  @default Showing 0 to 0 of 0 entries\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.infoEmpty\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"infoEmpty\": \"No entries to show\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\r\n\r\n\r\n                /**\r\n                 * When a user filters the information in a table, this string is appended\r\n                 * to the information (`info`) to give an idea of how strong the filtering\r\n                 * is. The variable _MAX_ is dynamically updated.\r\n                 *  @type string\r\n                 *  @default (filtered from _MAX_ total entries)\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.infoFiltered\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"infoFiltered\": \" - filtering from _MAX_ records\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\r\n\r\n\r\n                /**\r\n                 * If can be useful to append extra information to the info string at times,\r\n                 * and this variable does exactly that. This information will be appended to\r\n                 * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\r\n                 * being used) at all times.\r\n                 *  @type string\r\n                 *  @default <i>Empty string</i>\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.infoPostFix\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"infoPostFix\": \"All records shown are derived from real information.\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sInfoPostFix\": \"\",\r\n\r\n\r\n                /**\r\n                 * This decimal place operator is a little different from the other\r\n                 * language options since DataTables doesn't output floating point\r\n                 * numbers, so it won't ever use this for display of a number. Rather,\r\n                 * what this parameter does is modify the sort methods of the table so\r\n                 * that numbers which are in a format which has a character other than\r\n                 * a period (`.`) as a decimal place will be sorted numerically.\r\n                 *\r\n                 * Note that numbers with different decimal places cannot be shown in\r\n                 * the same table and still be sortable, the table must be consistent.\r\n                 * However, multiple different tables on the page can use different\r\n                 * decimal place characters.\r\n                 *  @type string\r\n                 *  @default\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.decimal\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"decimal\": \",\"\r\n\t\t\t *          \"thousands\": \".\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sDecimal\": \"\",\r\n\r\n\r\n                /**\r\n                 * DataTables has a build in number formatter (`formatNumber`) which is\r\n                 * used to format large numbers that are used in the table information.\r\n                 * By default a comma is used, but this can be trivially changed to any\r\n                 * character you wish with this parameter.\r\n                 *  @type string\r\n                 *  @default ,\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.thousands\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"thousands\": \"'\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sThousands\": \",\",\r\n\r\n\r\n                /**\r\n                 * Detail the action that will be taken when the drop down menu for the\r\n                 * pagination length option is changed. The '_MENU_' variable is replaced\r\n                 * with a default select list of 10, 25, 50 and 100, and can be replaced\r\n                 * with a custom select box if required.\r\n                 *  @type string\r\n                 *  @default Show _MENU_ entries\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.lengthMenu\r\n                 *\r\n                 *  @example\r\n                 *    // Language change only\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"lengthMenu\": \"Display _MENU_ records\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 *\r\n                 *  @example\r\n                 *    // Language and options change\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"lengthMenu\": 'Display <select>'+\r\n\t\t\t *            '<option value=\"10\">10</option>'+\r\n\t\t\t *            '<option value=\"20\">20</option>'+\r\n\t\t\t *            '<option value=\"30\">30</option>'+\r\n\t\t\t *            '<option value=\"40\">40</option>'+\r\n\t\t\t *            '<option value=\"50\">50</option>'+\r\n\t\t\t *            '<option value=\"-1\">All</option>'+\r\n\t\t\t *            '</select> records'\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sLengthMenu\": \"Show _MENU_ entries\",\r\n\r\n\r\n                /**\r\n                 * When using Ajax sourced data and during the first draw when DataTables is\r\n                 * gathering the data, this message is shown in an empty row in the table to\r\n                 * indicate to the end user the the data is being loaded. Note that this\r\n                 * parameter is not used when loading data by server-side processing, just\r\n                 * Ajax sourced data with client-side processing.\r\n                 *  @type string\r\n                 *  @default Loading...\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.loadingRecords\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"loadingRecords\": \"Please wait - loading...\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sLoadingRecords\": \"Loading...\",\r\n\r\n\r\n                /**\r\n                 * Text which is displayed when the table is processing a user action\r\n                 * (usually a sort command or similar).\r\n                 *  @type string\r\n                 *  @default Processing...\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.processing\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"processing\": \"DataTables is currently busy\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sProcessing\": \"Processing...\",\r\n\r\n\r\n                /**\r\n                 * Details the actions that will be taken when the user types into the\r\n                 * filtering input text box. The variable \"_INPUT_\", if used in the string,\r\n                 * is replaced with the HTML text box for the filtering input allowing\r\n                 * control over where it appears in the string. If \"_INPUT_\" is not given\r\n                 * then the input box is appended to the string automatically.\r\n                 *  @type string\r\n                 *  @default Search:\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.search\r\n                 *\r\n                 *  @example\r\n                 *    // Input text box will be appended at the end automatically\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"search\": \"Filter records:\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 *\r\n                 *  @example\r\n                 *    // Specify where the filter should appear\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"search\": \"Apply filter _INPUT_ to table\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sSearch\": \"Search:\",\r\n\r\n\r\n                /**\r\n                 * Assign a `placeholder` attribute to the search `input` element\r\n                 *  @type string\r\n                 *  @default\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.searchPlaceholder\r\n                 */\r\n                \"sSearchPlaceholder\": \"\",\r\n\r\n\r\n                /**\r\n                 * All of the language information can be stored in a file on the\r\n                 * server-side, which DataTables will look up if this parameter is passed.\r\n                 * It must store the URL of the language file, which is in a JSON format,\r\n                 * and the object has the same properties as the oLanguage object in the\r\n                 * initialiser object (i.e. the above parameters). Please refer to one of\r\n                 * the example language files to see how this works in action.\r\n                 *  @type string\r\n                 *  @default <i>Empty string - i.e. disabled</i>\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.url\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sUrl\": \"\",\r\n\r\n\r\n                /**\r\n                 * Text shown inside the table records when the is no information to be\r\n                 * displayed after filtering. `emptyTable` is shown when there is simply no\r\n                 * information in the table at all (regardless of filtering).\r\n                 *  @type string\r\n                 *  @default No matching records found\r\n                 *\r\n                 *  @dtopt Language\r\n                 *  @name DataTable.defaults.language.zeroRecords\r\n                 *\r\n                 *  @example\r\n                 *    $(document).ready( function() {\r\n\t\t\t *      $('#example').dataTable( {\r\n\t\t\t *        \"language\": {\r\n\t\t\t *          \"zeroRecords\": \"No records to display\"\r\n\t\t\t *        }\r\n\t\t\t *      } );\r\n\t\t\t *    } );\r\n                 */\r\n                \"sZeroRecords\": \"No matching records found\"\r\n            },\r\n\r\n\r\n            /**\r\n             * This parameter allows you to have define the global filtering state at\r\n             * initialisation time. As an object the `search` parameter must be\r\n             * defined, but all other parameters are optional. When `regex` is true,\r\n             * the search string will be treated as a regular expression, when false\r\n             * (default) it will be treated as a straight string. When `smart`\r\n             * DataTables will use it's smart filtering methods (to word match at\r\n             * any point in the data), when false this will not be done.\r\n             *  @namespace\r\n             *  @extends DataTable.models.oSearch\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.search\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"search\": {\"search\": \"Initial search\"}\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"oSearch\": $.extend( {}, DataTable.models.oSearch ),\r\n\r\n\r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             * By default DataTables will look for the property `data` (or `aaData` for\r\n             * compatibility with DataTables 1.9-) when obtaining data from an Ajax\r\n             * source or for server-side processing - this parameter allows that\r\n             * property to be changed. You can use Javascript dotted object notation to\r\n             * get a data source for multiple levels of nesting.\r\n             *  @type string\r\n             *  @default data\r\n             *\r\n             *  @dtopt Options\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.ajaxDataProp\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"sAjaxDataProp\": \"data\",\r\n\r\n\r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             * You can instruct DataTables to load data from an external\r\n             * source using this parameter (use aData if you want to pass data in you\r\n             * already have). Simply provide a url a JSON object can be obtained from.\r\n             *  @type string\r\n             *  @default null\r\n             *\r\n             *  @dtopt Options\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.ajaxSource\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"sAjaxSource\": null,\r\n\r\n\r\n            /**\r\n             * This initialisation variable allows you to specify exactly where in the\r\n             * DOM you want DataTables to inject the various controls it adds to the page\r\n             * (for example you might want the pagination controls at the top of the\r\n             * table). DIV elements (with or without a custom class) can also be added to\r\n             * aid styling. The follow syntax is used:\r\n             *   <ul>\r\n             *     <li>The following options are allowed:\r\n             *       <ul>\r\n             *         <li>'l' - Length changing</li>\r\n             *         <li>'f' - Filtering input</li>\r\n             *         <li>'t' - The table!</li>\r\n             *         <li>'i' - Information</li>\r\n             *         <li>'p' - Pagination</li>\r\n             *         <li>'r' - pRocessing</li>\r\n             *       </ul>\r\n             *     </li>\r\n             *     <li>The following constants are allowed:\r\n             *       <ul>\r\n             *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\r\n             *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\r\n             *       </ul>\r\n             *     </li>\r\n             *     <li>The following syntax is expected:\r\n             *       <ul>\r\n             *         <li>'&lt;' and '&gt;' - div elements</li>\r\n             *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\r\n             *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\r\n             *       </ul>\r\n             *     </li>\r\n             *     <li>Examples:\r\n             *       <ul>\r\n             *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\r\n             *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\r\n             *       </ul>\r\n             *     </li>\r\n             *   </ul>\r\n             *  @type string\r\n             *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\r\n             *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.dom\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sDom\": \"lfrtip\",\r\n\r\n\r\n            /**\r\n             * DataTables features four different built-in options for the buttons to\r\n             * display for pagination control:\r\n             *\r\n             * * `simple` - 'Previous' and 'Next' buttons only\r\n             * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\r\n             * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\r\n             * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus\r\n             *   page numbers\r\n             *\r\n             * Further methods can be added using {@link DataTable.ext.oPagination}.\r\n             *  @type string\r\n             *  @default simple_numbers\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.pagingType\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"pagingType\": \"full_numbers\"\r\n\t\t *      } );\r\n\t\t *    } )\r\n             */\r\n            \"sPaginationType\": \"simple_numbers\",\r\n\r\n\r\n            /**\r\n             * Enable horizontal scrolling. When a table is too wide to fit into a\r\n             * certain layout, or you have a large number of columns in the table, you\r\n             * can enable x-scrolling to show the table in a viewport, which can be\r\n             * scrolled. This property can be `true` which will allow the table to\r\n             * scroll horizontally when needed, or any CSS unit, or a number (in which\r\n             * case it will be treated as a pixel measurement). Setting as simply `true`\r\n             * is recommended.\r\n             *  @type boolean|string\r\n             *  @default <i>blank string - i.e. disabled</i>\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.scrollX\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"scrollX\": true,\r\n\t\t *        \"scrollCollapse\": true\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sScrollX\": \"\",\r\n\r\n\r\n            /**\r\n             * This property can be used to force a DataTable to use more width than it\r\n             * might otherwise do when x-scrolling is enabled. For example if you have a\r\n             * table which requires to be well spaced, this parameter is useful for\r\n             * \"over-sizing\" the table, and thus forcing scrolling. This property can by\r\n             * any CSS unit, or a number (in which case it will be treated as a pixel\r\n             * measurement).\r\n             *  @type string\r\n             *  @default <i>blank string - i.e. disabled</i>\r\n             *\r\n             *  @dtopt Options\r\n             *  @name DataTable.defaults.scrollXInner\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"scrollX\": \"100%\",\r\n\t\t *        \"scrollXInner\": \"110%\"\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sScrollXInner\": \"\",\r\n\r\n\r\n            /**\r\n             * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\r\n             * to the given height, and enable scrolling for any data which overflows the\r\n             * current viewport. This can be used as an alternative to paging to display\r\n             * a lot of data in a small area (although paging and scrolling can both be\r\n             * enabled at the same time). This property can be any CSS unit, or a number\r\n             * (in which case it will be treated as a pixel measurement).\r\n             *  @type string\r\n             *  @default <i>blank string - i.e. disabled</i>\r\n             *\r\n             *  @dtopt Features\r\n             *  @name DataTable.defaults.scrollY\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"scrollY\": \"200px\",\r\n\t\t *        \"paginate\": false\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sScrollY\": \"\",\r\n\r\n\r\n            /**\r\n             * __Deprecated__ The functionality provided by this parameter has now been\r\n             * superseded by that provided through `ajax`, which should be used instead.\r\n             *\r\n             * Set the HTTP method that is used to make the Ajax call for server-side\r\n             * processing or Ajax sourced data.\r\n             *  @type string\r\n             *  @default GET\r\n             *\r\n             *  @dtopt Options\r\n             *  @dtopt Server-side\r\n             *  @name DataTable.defaults.serverMethod\r\n             *\r\n             *  @deprecated 1.10. Please use `ajax` for this functionality now.\r\n             */\r\n            \"sServerMethod\": \"GET\",\r\n\r\n\r\n            /**\r\n             * DataTables makes use of renderers when displaying HTML elements for\r\n             * a table. These renderers can be added or modified by plug-ins to\r\n             * generate suitable mark-up for a site. For example the Bootstrap\r\n             * integration plug-in for DataTables uses a paging button renderer to\r\n             * display pagination buttons in the mark-up required by Bootstrap.\r\n             *\r\n             * For further information about the renderers available see\r\n             * DataTable.ext.renderer\r\n             *  @type string|object\r\n             *  @default null\r\n             *\r\n             *  @name DataTable.defaults.renderer\r\n             *\r\n             */\r\n            \"renderer\": null\r\n        };\r\n\r\n        _fnHungarianMap( DataTable.defaults );\r\n\r\n\r\n\r\n        /*\r\n         * Developer note - See note in model.defaults.js about the use of Hungarian\r\n         * notation and camel case.\r\n         */\r\n\r\n        /**\r\n         * Column options that can be given to DataTables at initialisation time.\r\n         *  @namespace\r\n         */\r\n        DataTable.defaults.column = {\r\n            /**\r\n             * Define which column(s) an order will occur on for this column. This\r\n             * allows a column's ordering to take multiple columns into account when\r\n             * doing a sort or use the data from a different column. For example first\r\n             * name / last name columns make sense to do a multi-column sort over the\r\n             * two columns.\r\n             *  @type array|int\r\n             *  @default null <i>Takes the value of the column index automatically</i>\r\n             *\r\n             *  @name DataTable.defaults.column.orderData\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\r\n\t\t *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\r\n\t\t *          { \"orderData\": 2, \"targets\": [ 2 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"orderData\": [ 0, 1 ] },\r\n\t\t *          { \"orderData\": [ 1, 0 ] },\r\n\t\t *          { \"orderData\": 2 },\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"aDataSort\": null,\r\n            \"iDataSort\": -1,\r\n\r\n\r\n            /**\r\n             * You can control the default ordering direction, and even alter the\r\n             * behaviour of the sort handler (i.e. only allow ascending ordering etc)\r\n             * using this parameter.\r\n             *  @type array\r\n             *  @default [ 'asc', 'desc' ]\r\n             *\r\n             *  @name DataTable.defaults.column.orderSequence\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\r\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\r\n\t\t *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          null,\r\n\t\t *          { \"orderSequence\": [ \"asc\" ] },\r\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\r\n\t\t *          { \"orderSequence\": [ \"desc\" ] },\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"asSorting\": [ 'asc', 'desc' ],\r\n\r\n\r\n            /**\r\n             * Enable or disable filtering on the data in this column.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @name DataTable.defaults.column.searchable\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"searchable\": false, \"targets\": [ 0 ] }\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"searchable\": false },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             */\r\n            \"bSearchable\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable ordering on this column.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @name DataTable.defaults.column.orderable\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"orderable\": false, \"targets\": [ 0 ] }\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"orderable\": false },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             */\r\n            \"bSortable\": true,\r\n\r\n\r\n            /**\r\n             * Enable or disable the display of this column.\r\n             *  @type boolean\r\n             *  @default true\r\n             *\r\n             *  @name DataTable.defaults.column.visible\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"visible\": false, \"targets\": [ 0 ] }\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"visible\": false },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ] } );\r\n\t\t *    } );\r\n             */\r\n            \"bVisible\": true,\r\n\r\n\r\n            /**\r\n             * Developer definable function that is called whenever a cell is created (Ajax source,\r\n             * etc) or processed for input (DOM source). This can be used as a compliment to mRender\r\n             * allowing you to modify the DOM element (add background colour for example) when the\r\n             * element is available.\r\n             *  @type function\r\n             *  @param {element} td The TD node that has been created\r\n             *  @param {*} cellData The Data for the cell\r\n             *  @param {array|object} rowData The data for the whole row\r\n             *  @param {int} row The row index for the aoData data store\r\n             *  @param {int} col The column index for aoColumns\r\n             *\r\n             *  @name DataTable.defaults.column.createdCell\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [3],\r\n\t\t *          \"createdCell\": function (td, cellData, rowData, row, col) {\r\n\t\t *            if ( cellData == \"1.7\" ) {\r\n\t\t *              $(td).css('color', 'blue')\r\n\t\t *            }\r\n\t\t *          }\r\n\t\t *        } ]\r\n\t\t *      });\r\n\t\t *    } );\r\n             */\r\n            \"fnCreatedCell\": null,\r\n\r\n\r\n            /**\r\n             * This parameter has been replaced by `data` in DataTables to ensure naming\r\n             * consistency. `dataProp` can still be used, as there is backwards\r\n             * compatibility in DataTables for this option, but it is strongly\r\n             * recommended that you use `data` in preference to `dataProp`.\r\n             *  @name DataTable.defaults.column.dataProp\r\n             */\r\n\r\n\r\n            /**\r\n             * This property can be used to read data from any data source property,\r\n             * including deeply nested objects / properties. `data` can be given in a\r\n             * number of different ways which effect its behaviour:\r\n             *\r\n             * * `integer` - treated as an array index for the data source. This is the\r\n             *   default that DataTables uses (incrementally increased for each column).\r\n             * * `string` - read an object property from the data source. There are\r\n             *   three 'special' options that can be used in the string to alter how\r\n             *   DataTables reads the data from the source object:\r\n             *    * `.` - Dotted Javascript notation. Just as you use a `.` in\r\n             *      Javascript to read from nested objects, so to can the options\r\n             *      specified in `data`. For example: `browser.version` or\r\n             *      `browser.name`. If your object parameter name contains a period, use\r\n             *      `\\\\` to escape it - i.e. `first\\\\.name`.\r\n             *    * `[]` - Array notation. DataTables can automatically combine data\r\n             *      from and array source, joining the data with the characters provided\r\n             *      between the two brackets. For example: `name[, ]` would provide a\r\n             *      comma-space separated list from the source array. If no characters\r\n             *      are provided between the brackets, the original array source is\r\n             *      returned.\r\n             *    * `()` - Function notation. Adding `()` to the end of a parameter will\r\n             *      execute a function of the name given. For example: `browser()` for a\r\n             *      simple function on the data source, `browser.version()` for a\r\n             *      function in a nested property or even `browser().version` to get an\r\n             *      object property if the function called returns an object. Note that\r\n             *      function notation is recommended for use in `render` rather than\r\n             *      `data` as it is much simpler to use as a renderer.\r\n             * * `null` - use the original data source for the row rather than plucking\r\n             *   data directly from it. This action has effects on two other\r\n             *   initialisation options:\r\n             *    * `defaultContent` - When null is given as the `data` option and\r\n             *      `defaultContent` is specified for the column, the value defined by\r\n             *      `defaultContent` will be used for the cell.\r\n             *    * `render` - When null is used for the `data` option and the `render`\r\n             *      option is specified for the column, the whole data source for the\r\n             *      row is used for the renderer.\r\n             * * `function` - the function given will be executed whenever DataTables\r\n             *   needs to set or get the data for a cell in the column. The function\r\n             *   takes three parameters:\r\n             *    * Parameters:\r\n             *      * `{array|object}` The data source for the row\r\n             *      * `{string}` The type call data requested - this will be 'set' when\r\n             *        setting data or 'filter', 'display', 'type', 'sort' or undefined\r\n             *        when gathering data. Note that when `undefined` is given for the\r\n             *        type DataTables expects to get the raw data for the object back<\r\n             *      * `{*}` Data to set when the second parameter is 'set'.\r\n             *    * Return:\r\n             *      * The return value from the function is not required when 'set' is\r\n             *        the type of call, but otherwise the return is what will be used\r\n             *        for the data requested.\r\n             *\r\n             * Note that `data` is a getter and setter option. If you just require\r\n             * formatting of data for output, you will likely want to use `render` which\r\n             * is simply a getter and thus simpler to use.\r\n             *\r\n             * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\r\n             * name change reflects the flexibility of this property and is consistent\r\n             * with the naming of mRender. If 'mDataProp' is given, then it will still\r\n             * be used by DataTables, as it automatically maps the old name to the new\r\n             * if required.\r\n             *\r\n             *  @type string|int|function|null\r\n             *  @default null <i>Use automatically calculated column index</i>\r\n             *\r\n             *  @name DataTable.defaults.column.data\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Read table data from objects\r\n             *    // JSON structure for each row:\r\n             *    //   {\r\n\t\t *    //      \"engine\": {value},\r\n\t\t *    //      \"browser\": {value},\r\n\t\t *    //      \"platform\": {value},\r\n\t\t *    //      \"version\": {value},\r\n\t\t *    //      \"grade\": {value}\r\n\t\t *    //   }\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"ajaxSource\": \"sources/objects.txt\",\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"data\": \"engine\" },\r\n\t\t *          { \"data\": \"browser\" },\r\n\t\t *          { \"data\": \"platform\" },\r\n\t\t *          { \"data\": \"version\" },\r\n\t\t *          { \"data\": \"grade\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Read information from deeply nested objects\r\n             *    // JSON structure for each row:\r\n             *    //   {\r\n\t\t *    //      \"engine\": {value},\r\n\t\t *    //      \"browser\": {value},\r\n\t\t *    //      \"platform\": {\r\n\t\t *    //         \"inner\": {value}\r\n\t\t *    //      },\r\n\t\t *    //      \"details\": [\r\n\t\t *    //         {value}, {value}\r\n\t\t *    //      ]\r\n\t\t *    //   }\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"data\": \"engine\" },\r\n\t\t *          { \"data\": \"browser\" },\r\n\t\t *          { \"data\": \"platform.inner\" },\r\n\t\t *          { \"data\": \"platform.details.0\" },\r\n\t\t *          { \"data\": \"platform.details.1\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `data` as a function to provide different information for\r\n             *    // sorting, filtering and display. In this case, currency (price)\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": function ( source, type, val ) {\r\n\t\t *            if (type === 'set') {\r\n\t\t *              source.price = val;\r\n\t\t *              // Store the computed dislay and filter values for efficiency\r\n\t\t *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\r\n\t\t *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\r\n\t\t *              return;\r\n\t\t *            }\r\n\t\t *            else if (type === 'display') {\r\n\t\t *              return source.price_display;\r\n\t\t *            }\r\n\t\t *            else if (type === 'filter') {\r\n\t\t *              return source.price_filter;\r\n\t\t *            }\r\n\t\t *            // 'sort', 'type' and undefined all just use the integer\r\n\t\t *            return source.price;\r\n\t\t *          }\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using default content\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": null,\r\n\t\t *          \"defaultContent\": \"Click to edit\"\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using array notation - outputting a list from an array\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": \"name[, ]\"\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             */\r\n            \"mData\": null,\r\n\r\n\r\n            /**\r\n             * This property is the rendering partner to `data` and it is suggested that\r\n             * when you want to manipulate data for display (including filtering,\r\n             * sorting etc) without altering the underlying data for the table, use this\r\n             * property. `render` can be considered to be the the read only companion to\r\n             * `data` which is read / write (then as such more complex). Like `data`\r\n             * this option can be given in a number of different ways to effect its\r\n             * behaviour:\r\n             *\r\n             * * `integer` - treated as an array index for the data source. This is the\r\n             *   default that DataTables uses (incrementally increased for each column).\r\n             * * `string` - read an object property from the data source. There are\r\n             *   three 'special' options that can be used in the string to alter how\r\n             *   DataTables reads the data from the source object:\r\n             *    * `.` - Dotted Javascript notation. Just as you use a `.` in\r\n             *      Javascript to read from nested objects, so to can the options\r\n             *      specified in `data`. For example: `browser.version` or\r\n             *      `browser.name`. If your object parameter name contains a period, use\r\n             *      `\\\\` to escape it - i.e. `first\\\\.name`.\r\n             *    * `[]` - Array notation. DataTables can automatically combine data\r\n             *      from and array source, joining the data with the characters provided\r\n             *      between the two brackets. For example: `name[, ]` would provide a\r\n             *      comma-space separated list from the source array. If no characters\r\n             *      are provided between the brackets, the original array source is\r\n             *      returned.\r\n             *    * `()` - Function notation. Adding `()` to the end of a parameter will\r\n             *      execute a function of the name given. For example: `browser()` for a\r\n             *      simple function on the data source, `browser.version()` for a\r\n             *      function in a nested property or even `browser().version` to get an\r\n             *      object property if the function called returns an object.\r\n             * * `object` - use different data for the different data types requested by\r\n             *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\r\n             *   of the object is the data type the property refers to and the value can\r\n             *   defined using an integer, string or function using the same rules as\r\n             *   `render` normally does. Note that an `_` option _must_ be specified.\r\n             *   This is the default value to use if you haven't specified a value for\r\n             *   the data type requested by DataTables.\r\n             * * `function` - the function given will be executed whenever DataTables\r\n             *   needs to set or get the data for a cell in the column. The function\r\n             *   takes three parameters:\r\n             *    * Parameters:\r\n             *      * {array|object} The data source for the row (based on `data`)\r\n             *      * {string} The type call data requested - this will be 'filter',\r\n             *        'display', 'type' or 'sort'.\r\n             *      * {array|object} The full data source for the row (not based on\r\n             *        `data`)\r\n             *    * Return:\r\n             *      * The return value from the function is what will be used for the\r\n             *        data requested.\r\n             *\r\n             *  @type string|int|function|object|null\r\n             *  @default null Use the data source value.\r\n             *\r\n             *  @name DataTable.defaults.column.render\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Create a comma separated list from an array of objects\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"data\": \"engine\" },\r\n\t\t *          { \"data\": \"browser\" },\r\n\t\t *          {\r\n\t\t *            \"data\": \"platform\",\r\n\t\t *            \"render\": \"[, ].name\"\r\n\t\t *          }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Execute a function to obtain data\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source\r\n\t\t *          \"render\": \"browserName()\"\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // As an object, extracting different data for the different types\r\n             *    // This would be used with a data source such as:\r\n             *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\r\n             *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\r\n             *    // (which has both forms) is used for filtering for if a user inputs either format, while\r\n             *    // the formatted phone number is the one that is shown in the table.\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source\r\n\t\t *          \"render\": {\r\n\t\t *            \"_\": \"phone\",\r\n\t\t *            \"filter\": \"phone_filter\",\r\n\t\t *            \"display\": \"phone_display\"\r\n\t\t *          }\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Use as a function to create a link from the data source\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"data\": \"download_link\",\r\n\t\t *          \"render\": function ( data, type, full ) {\r\n\t\t *            return '<a href=\"'+data+'\">Download</a>';\r\n\t\t *          }\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"mRender\": null,\r\n\r\n\r\n            /**\r\n             * Change the cell type created for the column - either TD cells or TH cells. This\r\n             * can be useful as TH cells have semantic meaning in the table body, allowing them\r\n             * to act as a header for a row (you may wish to add scope='row' to the TH elements).\r\n             *  @type string\r\n             *  @default td\r\n             *\r\n             *  @name DataTable.defaults.column.cellType\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Make the first column use TH cells\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [ {\r\n\t\t *          \"targets\": [ 0 ],\r\n\t\t *          \"cellType\": \"th\"\r\n\t\t *        } ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sCellType\": \"td\",\r\n\r\n\r\n            /**\r\n             * Class to give to each cell in this column.\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             *\r\n             *  @name DataTable.defaults.column.class\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"class\": \"my_class\" },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sClass\": \"\",\r\n\r\n            /**\r\n             * When DataTables calculates the column widths to assign to each column,\r\n             * it finds the longest string in each column and then constructs a\r\n             * temporary table and reads the widths from that. The problem with this\r\n             * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\r\n             * string - thus the calculation can go wrong (doing it properly and putting\r\n             * it into an DOM object and measuring that is horribly(!) slow). Thus as\r\n             * a \"work around\" we provide this option. It will append its value to the\r\n             * text that is found to be the longest string for the column - i.e. padding.\r\n             * Generally you shouldn't need this!\r\n             *  @type string\r\n             *  @default <i>Empty string<i>\r\n             *\r\n             *  @name DataTable.defaults.column.contentPadding\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          {\r\n\t\t *            \"contentPadding\": \"mmm\"\r\n\t\t *          }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sContentPadding\": \"\",\r\n\r\n\r\n            /**\r\n             * Allows a default value to be given for a column's data, and will be used\r\n             * whenever a null data source is encountered (this can be because `data`\r\n             * is set to null, or because the data source itself is null).\r\n             *  @type string\r\n             *  @default null\r\n             *\r\n             *  @name DataTable.defaults.column.defaultContent\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          {\r\n\t\t *            \"data\": null,\r\n\t\t *            \"defaultContent\": \"Edit\",\r\n\t\t *            \"targets\": [ -1 ]\r\n\t\t *          }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          {\r\n\t\t *            \"data\": null,\r\n\t\t *            \"defaultContent\": \"Edit\"\r\n\t\t *          }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sDefaultContent\": null,\r\n\r\n\r\n            /**\r\n             * This parameter is only used in DataTables' server-side processing. It can\r\n             * be exceptionally useful to know what columns are being displayed on the\r\n             * client side, and to map these to database fields. When defined, the names\r\n             * also allow DataTables to reorder information from the server if it comes\r\n             * back in an unexpected order (i.e. if you switch your columns around on the\r\n             * client-side, your server-side code does not also need updating).\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             *\r\n             *  @name DataTable.defaults.column.name\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"name\": \"engine\", \"targets\": [ 0 ] },\r\n\t\t *          { \"name\": \"browser\", \"targets\": [ 1 ] },\r\n\t\t *          { \"name\": \"platform\", \"targets\": [ 2 ] },\r\n\t\t *          { \"name\": \"version\", \"targets\": [ 3 ] },\r\n\t\t *          { \"name\": \"grade\", \"targets\": [ 4 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"name\": \"engine\" },\r\n\t\t *          { \"name\": \"browser\" },\r\n\t\t *          { \"name\": \"platform\" },\r\n\t\t *          { \"name\": \"version\" },\r\n\t\t *          { \"name\": \"grade\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sName\": \"\",\r\n\r\n\r\n            /**\r\n             * Defines a data source type for the ordering which can be used to read\r\n             * real-time information from the table (updating the internally cached\r\n             * version) prior to ordering. This allows ordering to occur on user\r\n             * editable elements such as form inputs.\r\n             *  @type string\r\n             *  @default std\r\n             *\r\n             *  @name DataTable.defaults.column.orderDataType\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\r\n\t\t *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\r\n\t\t *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\r\n\t\t *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          { \"orderDataType\": \"dom-text\" },\r\n\t\t *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\r\n\t\t *          { \"orderDataType\": \"dom-select\" },\r\n\t\t *          { \"orderDataType\": \"dom-checkbox\" }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sSortDataType\": \"std\",\r\n\r\n\r\n            /**\r\n             * The title of this column.\r\n             *  @type string\r\n             *  @default null <i>Derived from the 'TH' value for this column in the\r\n             *    original HTML table.</i>\r\n             *\r\n             *  @name DataTable.defaults.column.title\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"title\": \"My column title\" },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sTitle\": null,\r\n\r\n\r\n            /**\r\n             * The type allows you to specify how the data for this column will be\r\n             * ordered. Four types (string, numeric, date and html (which will strip\r\n             * HTML tags before ordering)) are currently available. Note that only date\r\n             * formats understood by Javascript's Date() object will be accepted as type\r\n             * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\r\n             * 'numeric', 'date' or 'html' (by default). Further types can be adding\r\n             * through plug-ins.\r\n             *  @type string\r\n             *  @default null <i>Auto-detected from raw data</i>\r\n             *\r\n             *  @name DataTable.defaults.column.type\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"type\": \"html\", \"targets\": [ 0 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"type\": \"html\" },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sType\": null,\r\n\r\n\r\n            /**\r\n             * Defining the width of the column, this parameter may take any CSS value\r\n             * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\r\n             * been given a specific width through this interface ensuring that the table\r\n             * remains readable.\r\n             *  @type string\r\n             *  @default null <i>Automatic</i>\r\n             *\r\n             *  @name DataTable.defaults.column.width\r\n             *  @dtopt Columns\r\n             *\r\n             *  @example\r\n             *    // Using `columnDefs`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columnDefs\": [\r\n\t\t *          { \"width\": \"20%\", \"targets\": [ 0 ] }\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             *\r\n             *  @example\r\n             *    // Using `columns`\r\n             *    $(document).ready( function() {\r\n\t\t *      $('#example').dataTable( {\r\n\t\t *        \"columns\": [\r\n\t\t *          { \"width\": \"20%\" },\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null,\r\n\t\t *          null\r\n\t\t *        ]\r\n\t\t *      } );\r\n\t\t *    } );\r\n             */\r\n            \"sWidth\": null\r\n        };\r\n\r\n        _fnHungarianMap( DataTable.defaults.column );\r\n\r\n\r\n\r\n        /**\r\n         * DataTables settings object - this holds all the information needed for a\r\n         * given table, including configuration, data and current application of the\r\n         * table options. DataTables does not have a single instance for each DataTable\r\n         * with the settings attached to that instance, but rather instances of the\r\n         * DataTable \"class\" are created on-the-fly as needed (typically by a\r\n         * $().dataTable() call) and the settings object is then applied to that\r\n         * instance.\r\n         *\r\n         * Note that this object is related to {@link DataTable.defaults} but this\r\n         * one is the internal data store for DataTables's cache of columns. It should\r\n         * NOT be manipulated outside of DataTables. Any configuration should be done\r\n         * through the initialisation options.\r\n         *  @namespace\r\n         *  @todo Really should attach the settings object to individual instances so we\r\n         *    don't need to create new instances on each $().dataTable() call (if the\r\n         *    table already exists). It would also save passing oSettings around and\r\n         *    into every single function. However, this is a very significant\r\n         *    architecture change for DataTables and will almost certainly break\r\n         *    backwards compatibility with older installations. This is something that\r\n         *    will be done in 2.0.\r\n         */\r\n        DataTable.models.oSettings = {\r\n            /**\r\n             * Primary features of DataTables and their enablement state.\r\n             *  @namespace\r\n             */\r\n            \"oFeatures\": {\r\n\r\n                /**\r\n                 * Flag to say if DataTables should automatically try to calculate the\r\n                 * optimum table and columns widths (true) or not (false).\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bAutoWidth\": null,\r\n\r\n                /**\r\n                 * Delay the creation of TR and TD elements until they are actually\r\n                 * needed by a driven page draw. This can give a significant speed\r\n                 * increase for Ajax source and Javascript source data, but makes no\r\n                 * difference at all fro DOM and server-side processing tables.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bDeferRender\": null,\r\n\r\n                /**\r\n                 * Enable filtering on the table or not. Note that if this is disabled\r\n                 * then there is no filtering at all on the table, including fnFilter.\r\n                 * To just remove the filtering input use sDom and remove the 'f' option.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bFilter\": null,\r\n\r\n                /**\r\n                 * Table information element (the 'Showing x of y records' div) enable\r\n                 * flag.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bInfo\": null,\r\n\r\n                /**\r\n                 * Present a user control allowing the end user to change the page size\r\n                 * when pagination is enabled.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bLengthChange\": null,\r\n\r\n                /**\r\n                 * Pagination enabled or not. Note that if this is disabled then length\r\n                 * changing must also be disabled.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bPaginate\": null,\r\n\r\n                /**\r\n                 * Processing indicator enable flag whenever DataTables is enacting a\r\n                 * user request - typically an Ajax request for server-side processing.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bProcessing\": null,\r\n\r\n                /**\r\n                 * Server-side processing enabled flag - when enabled DataTables will\r\n                 * get all data from the server for every draw - there is no filtering,\r\n                 * sorting or paging done on the client-side.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bServerSide\": null,\r\n\r\n                /**\r\n                 * Sorting enablement flag.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bSort\": null,\r\n\r\n                /**\r\n                 * Multi-column sorting\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bSortMulti\": null,\r\n\r\n                /**\r\n                 * Apply a class to the columns which are being sorted to provide a\r\n                 * visual highlight or not. This can slow things down when enabled since\r\n                 * there is a lot of DOM interaction.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bSortClasses\": null,\r\n\r\n                /**\r\n                 * State saving enablement flag.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bStateSave\": null\r\n            },\r\n\r\n\r\n            /**\r\n             * Scrolling settings for a table.\r\n             *  @namespace\r\n             */\r\n            \"oScroll\": {\r\n                /**\r\n                 * When the table is shorter in height than sScrollY, collapse the\r\n                 * table container down to the height of the table (when true).\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type boolean\r\n                 */\r\n                \"bCollapse\": null,\r\n\r\n                /**\r\n                 * Width of the scrollbar for the web-browser's platform. Calculated\r\n                 * during table initialisation.\r\n                 *  @type int\r\n                 *  @default 0\r\n                 */\r\n                \"iBarWidth\": 0,\r\n\r\n                /**\r\n                 * Viewport width for horizontal scrolling. Horizontal scrolling is\r\n                 * disabled if an empty string.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type string\r\n                 */\r\n                \"sX\": null,\r\n\r\n                /**\r\n                 * Width to expand the table to when using x-scrolling. Typically you\r\n                 * should not need to use this.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type string\r\n                 *  @deprecated\r\n                 */\r\n                \"sXInner\": null,\r\n\r\n                /**\r\n                 * Viewport height for vertical scrolling. Vertical scrolling is disabled\r\n                 * if an empty string.\r\n                 * Note that this parameter will be set by the initialisation routine. To\r\n                 * set a default use {@link DataTable.defaults}.\r\n                 *  @type string\r\n                 */\r\n                \"sY\": null\r\n            },\r\n\r\n            /**\r\n             * Language information for the table.\r\n             *  @namespace\r\n             *  @extends DataTable.defaults.oLanguage\r\n             */\r\n            \"oLanguage\": {\r\n                /**\r\n                 * Information callback function. See\r\n                 * {@link DataTable.defaults.fnInfoCallback}\r\n                 *  @type function\r\n                 *  @default null\r\n                 */\r\n                \"fnInfoCallback\": null\r\n            },\r\n\r\n            /**\r\n             * Browser support parameters\r\n             *  @namespace\r\n             */\r\n            \"oBrowser\": {\r\n                /**\r\n                 * Indicate if the browser incorrectly calculates width:100% inside a\r\n                 * scrolling element (IE6/7)\r\n                 *  @type boolean\r\n                 *  @default false\r\n                 */\r\n                \"bScrollOversize\": false,\r\n\r\n                /**\r\n                 * Determine if the vertical scrollbar is on the right or left of the\r\n                 * scrolling container - needed for rtl language layout, although not\r\n                 * all browsers move the scrollbar (Safari).\r\n                 *  @type boolean\r\n                 *  @default false\r\n                 */\r\n                \"bScrollbarLeft\": false\r\n            },\r\n\r\n\r\n            \"ajax\": null,\r\n\r\n\r\n            /**\r\n             * Array referencing the nodes which are used for the features. The\r\n             * parameters of this object match what is allowed by sDom - i.e.\r\n             *   <ul>\r\n             *     <li>'l' - Length changing</li>\r\n             *     <li>'f' - Filtering input</li>\r\n             *     <li>'t' - The table!</li>\r\n             *     <li>'i' - Information</li>\r\n             *     <li>'p' - Pagination</li>\r\n             *     <li>'r' - pRocessing</li>\r\n             *   </ul>\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aanFeatures\": [],\r\n\r\n            /**\r\n             * Store data information - see {@link DataTable.models.oRow} for detailed\r\n             * information.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoData\": [],\r\n\r\n            /**\r\n             * Array of indexes which are in the current display (after filtering etc)\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aiDisplay\": [],\r\n\r\n            /**\r\n             * Array of indexes for display - no filtering\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aiDisplayMaster\": [],\r\n\r\n            /**\r\n             * Store information about each column that is in use\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoColumns\": [],\r\n\r\n            /**\r\n             * Store information about the table's header\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoHeader\": [],\r\n\r\n            /**\r\n             * Store information about the table's footer\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoFooter\": [],\r\n\r\n            /**\r\n             * Store the applied global search information in case we want to force a\r\n             * research or compare the old search to a new one.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @namespace\r\n             *  @extends DataTable.models.oSearch\r\n             */\r\n            \"oPreviousSearch\": {},\r\n\r\n            /**\r\n             * Store the applied search for each column - see\r\n             * {@link DataTable.models.oSearch} for the format that is used for the\r\n             * filtering information for each column.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoPreSearchCols\": [],\r\n\r\n            /**\r\n             * Sorting that is applied to the table. Note that the inner arrays are\r\n             * used in the following manner:\r\n             * <ul>\r\n             *   <li>Index 0 - column number</li>\r\n             *   <li>Index 1 - current sorting direction</li>\r\n             * </ul>\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type array\r\n             *  @todo These inner arrays should really be objects\r\n             */\r\n            \"aaSorting\": null,\r\n\r\n            /**\r\n             * Sorting that is always applied to the table (i.e. prefixed in front of\r\n             * aaSorting).\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aaSortingFixed\": [],\r\n\r\n            /**\r\n             * Classes to use for the striping of a table.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"asStripeClasses\": null,\r\n\r\n            /**\r\n             * If restoring a table - we should restore its striping classes as well\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"asDestroyStripes\": [],\r\n\r\n            /**\r\n             * If restoring a table - we should restore its width\r\n             *  @type int\r\n             *  @default 0\r\n             */\r\n            \"sDestroyWidth\": 0,\r\n\r\n            /**\r\n             * Callback functions array for every time a row is inserted (i.e. on a draw).\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoRowCallback\": [],\r\n\r\n            /**\r\n             * Callback functions for the header on each draw.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoHeaderCallback\": [],\r\n\r\n            /**\r\n             * Callback function for the footer on each draw.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoFooterCallback\": [],\r\n\r\n            /**\r\n             * Array of callback functions for draw callback functions\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoDrawCallback\": [],\r\n\r\n            /**\r\n             * Array of callback functions for row created function\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoRowCreatedCallback\": [],\r\n\r\n            /**\r\n             * Callback functions for just before the table is redrawn. A return of\r\n             * false will be used to cancel the draw.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoPreDrawCallback\": [],\r\n\r\n            /**\r\n             * Callback functions for when the table has been initialised.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoInitComplete\": [],\r\n\r\n\r\n            /**\r\n             * Callbacks for modifying the settings to be stored for state saving, prior to\r\n             * saving state.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateSaveParams\": [],\r\n\r\n            /**\r\n             * Callbacks for modifying the settings that have been stored for state saving\r\n             * prior to using the stored values to restore the state.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateLoadParams\": [],\r\n\r\n            /**\r\n             * Callbacks for operating on the settings object once the saved state has been\r\n             * loaded\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateLoaded\": [],\r\n\r\n            /**\r\n             * Cache the table ID for quick access\r\n             *  @type string\r\n             *  @default <i>Empty string</i>\r\n             */\r\n            \"sTableId\": \"\",\r\n\r\n            /**\r\n             * The TABLE node for the main table\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTable\": null,\r\n\r\n            /**\r\n             * Permanent ref to the thead element\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTHead\": null,\r\n\r\n            /**\r\n             * Permanent ref to the tfoot element - if it exists\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTFoot\": null,\r\n\r\n            /**\r\n             * Permanent ref to the tbody element\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTBody\": null,\r\n\r\n            /**\r\n             * Cache the wrapper node (contains all DataTables controlled elements)\r\n             *  @type node\r\n             *  @default null\r\n             */\r\n            \"nTableWrapper\": null,\r\n\r\n            /**\r\n             * Indicate if when using server-side processing the loading of data\r\n             * should be deferred until the second draw.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bDeferLoading\": false,\r\n\r\n            /**\r\n             * Indicate if all required information has been read in\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bInitialised\": false,\r\n\r\n            /**\r\n             * Information about open rows. Each object in the array has the parameters\r\n             * 'nTr' and 'nParent'\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoOpenRows\": [],\r\n\r\n            /**\r\n             * Dictate the positioning of DataTables' control elements - see\r\n             * {@link DataTable.model.oInit.sDom}.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sDom\": null,\r\n\r\n            /**\r\n             * Which type of pagination should be used.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             *  @default two_button\r\n             */\r\n            \"sPaginationType\": \"two_button\",\r\n\r\n            /**\r\n             * The state duration (for `stateSave`) in seconds.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type int\r\n             *  @default 0\r\n             */\r\n            \"iStateDuration\": 0,\r\n\r\n            /**\r\n             * Array of callback functions for state saving. Each array element is an\r\n             * object with the following parameters:\r\n             *   <ul>\r\n             *     <li>function:fn - function to call. Takes two parameters, oSettings\r\n             *       and the JSON string to save that has been thus far created. Returns\r\n             *       a JSON string to be inserted into a json object\r\n             *       (i.e. '\"param\": [ 0, 1, 2]')</li>\r\n             *     <li>string:sName - name of callback</li>\r\n             *   </ul>\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateSave\": [],\r\n\r\n            /**\r\n             * Array of callback functions for state loading. Each array element is an\r\n             * object with the following parameters:\r\n             *   <ul>\r\n             *     <li>function:fn - function to call. Takes two parameters, oSettings\r\n             *       and the object stored. May return false to cancel state loading</li>\r\n             *     <li>string:sName - name of callback</li>\r\n             *   </ul>\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoStateLoad\": [],\r\n\r\n            /**\r\n             * State that was saved. Useful for back reference\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"oSavedState\": null,\r\n\r\n            /**\r\n             * State that was loaded. Useful for back reference\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"oLoadedState\": null,\r\n\r\n            /**\r\n             * Source url for AJAX data for the table.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sAjaxSource\": null,\r\n\r\n            /**\r\n             * Property from a given object from which to read the table data from. This\r\n             * can be an empty string (when not server-side processing), in which case\r\n             * it is  assumed an an array is given directly.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             */\r\n            \"sAjaxDataProp\": null,\r\n\r\n            /**\r\n             * Note if draw should be blocked while getting data\r\n             *  @type boolean\r\n             *  @default true\r\n             */\r\n            \"bAjaxDataGet\": true,\r\n\r\n            /**\r\n             * The last jQuery XHR object that was used for server-side data gathering.\r\n             * This can be used for working with the XHR information in one of the\r\n             * callbacks\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"jqXHR\": null,\r\n\r\n            /**\r\n             * JSON returned from the server in the last Ajax request\r\n             *  @type object\r\n             *  @default undefined\r\n             */\r\n            \"json\": undefined,\r\n\r\n            /**\r\n             * Data submitted as part of the last Ajax request\r\n             *  @type object\r\n             *  @default undefined\r\n             */\r\n            \"oAjaxData\": undefined,\r\n\r\n            /**\r\n             * Function to get the server-side data.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type function\r\n             */\r\n            \"fnServerData\": null,\r\n\r\n            /**\r\n             * Functions which are called prior to sending an Ajax request so extra\r\n             * parameters can easily be sent to the server\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoServerParams\": [],\r\n\r\n            /**\r\n             * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\r\n             * required).\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type string\r\n             */\r\n            \"sServerMethod\": null,\r\n\r\n            /**\r\n             * Format numbers for display.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type function\r\n             */\r\n            \"fnFormatNumber\": null,\r\n\r\n            /**\r\n             * List of options that can be used for the user selectable length menu.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aLengthMenu\": null,\r\n\r\n            /**\r\n             * Counter for the draws that the table does. Also used as a tracker for\r\n             * server-side processing\r\n             *  @type int\r\n             *  @default 0\r\n             */\r\n            \"iDraw\": 0,\r\n\r\n            /**\r\n             * Indicate if a redraw is being done - useful for Ajax\r\n             *  @type boolean\r\n             *  @default false\r\n             */\r\n            \"bDrawing\": false,\r\n\r\n            /**\r\n             * Draw index (iDraw) of the last error when parsing the returned data\r\n             *  @type int\r\n             *  @default -1\r\n             */\r\n            \"iDrawError\": -1,\r\n\r\n            /**\r\n             * Paging display length\r\n             *  @type int\r\n             *  @default 10\r\n             */\r\n            \"_iDisplayLength\": 10,\r\n\r\n            /**\r\n             * Paging start point - aiDisplay index\r\n             *  @type int\r\n             *  @default 0\r\n             */\r\n            \"_iDisplayStart\": 0,\r\n\r\n            /**\r\n             * Server-side processing - number of records in the result set\r\n             * (i.e. before filtering), Use fnRecordsTotal rather than\r\n             * this property to get the value of the number of records, regardless of\r\n             * the server-side processing setting.\r\n             *  @type int\r\n             *  @default 0\r\n             *  @private\r\n             */\r\n            \"_iRecordsTotal\": 0,\r\n\r\n            /**\r\n             * Server-side processing - number of records in the current display set\r\n             * (i.e. after filtering). Use fnRecordsDisplay rather than\r\n             * this property to get the value of the number of records, regardless of\r\n             * the server-side processing setting.\r\n             *  @type boolean\r\n             *  @default 0\r\n             *  @private\r\n             */\r\n            \"_iRecordsDisplay\": 0,\r\n\r\n            /**\r\n             * Flag to indicate if jQuery UI marking and classes should be used.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bJUI\": null,\r\n\r\n            /**\r\n             * The classes to use for the table\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            \"oClasses\": {},\r\n\r\n            /**\r\n             * Flag attached to the settings object so you can check in the draw\r\n             * callback if filtering has been done in the draw. Deprecated in favour of\r\n             * events.\r\n             *  @type boolean\r\n             *  @default false\r\n             *  @deprecated\r\n             */\r\n            \"bFiltered\": false,\r\n\r\n            /**\r\n             * Flag attached to the settings object so you can check in the draw\r\n             * callback if sorting has been done in the draw. Deprecated in favour of\r\n             * events.\r\n             *  @type boolean\r\n             *  @default false\r\n             *  @deprecated\r\n             */\r\n            \"bSorted\": false,\r\n\r\n            /**\r\n             * Indicate that if multiple rows are in the header and there is more than\r\n             * one unique cell per column, if the top one (true) or bottom one (false)\r\n             * should be used for sorting / title by DataTables.\r\n             * Note that this parameter will be set by the initialisation routine. To\r\n             * set a default use {@link DataTable.defaults}.\r\n             *  @type boolean\r\n             */\r\n            \"bSortCellsTop\": null,\r\n\r\n            /**\r\n             * Initialisation object that is used for the table\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"oInit\": null,\r\n\r\n            /**\r\n             * Destroy callback functions - for plug-ins to attach themselves to the\r\n             * destroy so they can clean up markup and events.\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aoDestroyCallback\": [],\r\n\r\n\r\n            /**\r\n             * Get the number of records in the current record set, before filtering\r\n             *  @type function\r\n             */\r\n            \"fnRecordsTotal\": function ()\r\n            {\r\n                return _fnDataSource( this ) == 'ssp' ?\r\n                this._iRecordsTotal * 1 :\r\n                    this.aiDisplayMaster.length;\r\n            },\r\n\r\n            /**\r\n             * Get the number of records in the current record set, after filtering\r\n             *  @type function\r\n             */\r\n            \"fnRecordsDisplay\": function ()\r\n            {\r\n                return _fnDataSource( this ) == 'ssp' ?\r\n                this._iRecordsDisplay * 1 :\r\n                    this.aiDisplay.length;\r\n            },\r\n\r\n            /**\r\n             * Get the display end point - aiDisplay index\r\n             *  @type function\r\n             */\r\n            \"fnDisplayEnd\": function ()\r\n            {\r\n                var\r\n                    len      = this._iDisplayLength,\r\n                    start    = this._iDisplayStart,\r\n                    calc     = start + len,\r\n                    records  = this.aiDisplay.length,\r\n                    features = this.oFeatures,\r\n                    paginate = features.bPaginate;\r\n\r\n                if ( features.bServerSide ) {\r\n                    return paginate === false || len === -1 ?\r\n                    start + records :\r\n                        Math.min( start+len, this._iRecordsDisplay );\r\n                }\r\n                else {\r\n                    return ! paginate || calc>records || len===-1 ?\r\n                        records :\r\n                        calc;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * The DataTables object for this table\r\n             *  @type object\r\n             *  @default null\r\n             */\r\n            \"oInstance\": null,\r\n\r\n            /**\r\n             * Unique identifier for each instance of the DataTables object. If there\r\n             * is an ID on the table node, then it takes that value, otherwise an\r\n             * incrementing internal counter is used.\r\n             *  @type string\r\n             *  @default null\r\n             */\r\n            \"sInstance\": null,\r\n\r\n            /**\r\n             * tabindex attribute value that is added to DataTables control elements, allowing\r\n             * keyboard navigation of the table and its controls.\r\n             */\r\n            \"iTabIndex\": 0,\r\n\r\n            /**\r\n             * DIV container for the footer scrolling table if scrolling\r\n             */\r\n            \"nScrollHead\": null,\r\n\r\n            /**\r\n             * DIV container for the footer scrolling table if scrolling\r\n             */\r\n            \"nScrollFoot\": null,\r\n\r\n            /**\r\n             * Last applied sort\r\n             *  @type array\r\n             *  @default []\r\n             */\r\n            \"aLastSort\": [],\r\n\r\n            /**\r\n             * Stored plug-in instances\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            \"oPlugins\": {}\r\n        };\r\n\r\n        /**\r\n         * Extension object for DataTables that is used to provide all extension\r\n         * options.\r\n         *\r\n         * Note that the `DataTable.ext` object is available through\r\n         * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\r\n         * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\r\n         *  @namespace\r\n         *  @extends DataTable.models.ext\r\n         */\r\n\r\n\r\n        /**\r\n         * DataTables extensions\r\n         *\r\n         * This namespace acts as a collection area for plug-ins that can be used to\r\n         * extend DataTables capabilities. Indeed many of the build in methods\r\n         * use this method to provide their own capabilities (sorting methods for\r\n         * example).\r\n         *\r\n         * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\r\n         * reasons\r\n         *\r\n         *  @namespace\r\n         */\r\n        DataTable.ext = _ext = {\r\n            /**\r\n             * Element class names\r\n             *\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            classes: {},\r\n\r\n\r\n            /**\r\n             * Error reporting.\r\n             *\r\n             * How should DataTables report an error. Can take the value 'alert' or\r\n             * 'throw'\r\n             *\r\n             *  @type string\r\n             *  @default alert\r\n             */\r\n            errMode: \"alert\",\r\n\r\n\r\n            /**\r\n             * Feature plug-ins.\r\n             *\r\n             * This is an array of objects which describe the feature plug-ins that are\r\n             * available to DataTables. These feature plug-ins are then available for\r\n             * use through the `dom` initialisation option.\r\n             *\r\n             * Each feature plug-in is described by an object which must have the\r\n             * following properties:\r\n             *\r\n             * * `fnInit` - function that is used to initialise the plug-in,\r\n             * * `cFeature` - a character so the feature can be enabled by the `dom`\r\n             *   instillation option. This is case sensitive.\r\n             *\r\n             * The `fnInit` function has the following input parameters:\r\n             *\r\n             * 1. `{object}` DataTables settings object: see\r\n             *    {@link DataTable.models.oSettings}\r\n             *\r\n             * And the following return is expected:\r\n             *\r\n             * * {node|null} The element which contains your feature. Note that the\r\n             *   return may also be void if your plug-in does not require to inject any\r\n             *   DOM elements into DataTables control (`dom`) - for example this might\r\n             *   be useful when developing a plug-in which allows table control via\r\n             *   keyboard entry\r\n             *\r\n             *  @type array\r\n             *\r\n             *  @example\r\n             *    $.fn.dataTable.ext.features.push( {\r\n\t\t *      \"fnInit\": function( oSettings ) {\r\n\t\t *        return new TableTools( { \"oDTSettings\": oSettings } );\r\n\t\t *      },\r\n\t\t *      \"cFeature\": \"T\"\r\n\t\t *    } );\r\n             */\r\n            feature: [],\r\n\r\n\r\n            /**\r\n             * Row searching.\r\n             *\r\n             * This method of searching is complimentary to the default type based\r\n             * searching, and a lot more comprehensive as it allows you complete control\r\n             * over the searching logic. Each element in this array is a function\r\n             * (parameters described below) that is called for every row in the table,\r\n             * and your logic decides if it should be included in the searching data set\r\n             * or not.\r\n             *\r\n             * Searching functions have the following input parameters:\r\n             *\r\n             * 1. `{object}` DataTables settings object: see\r\n             *    {@link DataTable.models.oSettings}\r\n             * 2. `{array|object}` Data for the row to be processed (same as the\r\n             *    original format that was passed in as the data source, or an array\r\n             *    from a DOM data source\r\n             * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\r\n             *    can be useful to retrieve the `TR` element if you need DOM interaction.\r\n             *\r\n             * And the following return is expected:\r\n             *\r\n             * * {boolean} Include the row in the searched result set (true) or not\r\n             *   (false)\r\n             *\r\n             * Note that as with the main search ability in DataTables, technically this\r\n             * is \"filtering\", since it is subtractive. However, for consistency in\r\n             * naming we call it searching here.\r\n             *\r\n             *  @type array\r\n             *  @default []\r\n             *\r\n             *  @example\r\n             *    // The following example shows custom search being applied to the\r\n             *    // fourth column (i.e. the data[3] index) based on two input values\r\n             *    // from the end-user, matching the data in a certain range.\r\n             *    $.fn.dataTable.ext.search.push(\r\n             *      function( settings, data, dataIndex ) {\r\n\t\t *        var min = document.getElementById('min').value * 1;\r\n\t\t *        var max = document.getElementById('max').value * 1;\r\n\t\t *        var version = data[3] == \"-\" ? 0 : data[3]*1;\r\n\t\t *\r\n\t\t *        if ( min == \"\" && max == \"\" ) {\r\n\t\t *          return true;\r\n\t\t *        }\r\n\t\t *        else if ( min == \"\" && version < max ) {\r\n\t\t *          return true;\r\n\t\t *        }\r\n\t\t *        else if ( min < version && \"\" == max ) {\r\n\t\t *          return true;\r\n\t\t *        }\r\n\t\t *        else if ( min < version && version < max ) {\r\n\t\t *          return true;\r\n\t\t *        }\r\n\t\t *        return false;\r\n\t\t *      }\r\n             *    );\r\n             */\r\n            search: [],\r\n\r\n\r\n            /**\r\n             * Internal functions, exposed for used in plug-ins.\r\n             *\r\n             * Please note that you should not need to use the internal methods for\r\n             * anything other than a plug-in (and even then, try to avoid if possible).\r\n             * The internal function may change between releases.\r\n             *\r\n             *  @type object\r\n             *  @default {}\r\n             */\r\n            internal: {},\r\n\r\n\r\n            /**\r\n             * Legacy configuration options. Enable and disable legacy options that\r\n             * are available in DataTables.\r\n             *\r\n             *  @type object\r\n             */\r\n            legacy: {\r\n                /**\r\n                 * Enable / disable DataTables 1.9 compatible server-side processing\r\n                 * requests\r\n                 *\r\n                 *  @type boolean\r\n                 *  @default null\r\n                 */\r\n                ajax: null\r\n            },\r\n\r\n\r\n            /**\r\n             * Pagination plug-in methods.\r\n             *\r\n             * Each entry in this object is a function and defines which buttons should\r\n             * be shown by the pagination rendering method that is used for the table:\r\n             * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\r\n             * buttons are displayed in the document, while the functions here tell it\r\n             * what buttons to display. This is done by returning an array of button\r\n             * descriptions (what each button will do).\r\n             *\r\n             * Pagination types (the four built in options and any additional plug-in\r\n             * options defined here) can be used through the `paginationType`\r\n             * initialisation parameter.\r\n             *\r\n             * The functions defined take two parameters:\r\n             *\r\n             * 1. `{int} page` The current page index\r\n             * 2. `{int} pages` The number of pages in the table\r\n             *\r\n             * Each function is expected to return an array where each element of the\r\n             * array can be one of:\r\n             *\r\n             * * `first` - Jump to first page when activated\r\n             * * `last` - Jump to last page when activated\r\n             * * `previous` - Show previous page when activated\r\n             * * `next` - Show next page when activated\r\n             * * `{int}` - Show page of the index given\r\n             * * `{array}` - A nested array containing the above elements to add a\r\n             *   containing 'DIV' element (might be useful for styling).\r\n             *\r\n             * Note that DataTables v1.9- used this object slightly differently whereby\r\n             * an object with two functions would be defined for each plug-in. That\r\n             * ability is still supported by DataTables 1.10+ to provide backwards\r\n             * compatibility, but this option of use is now decremented and no longer\r\n             * documented in DataTables 1.10+.\r\n             *\r\n             *  @type object\r\n             *  @default {}\r\n             *\r\n             *  @example\r\n             *    // Show previous, next and current page buttons only\r\n             *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\r\n\t\t *      return [ 'previous', page, 'next' ];\r\n\t\t *    };\r\n             */\r\n            pager: {},\r\n\r\n\r\n            renderer: {\r\n                pageButton: {},\r\n                header: {}\r\n            },\r\n\r\n\r\n            /**\r\n             * Ordering plug-ins - custom data source\r\n             *\r\n             * The extension options for ordering of data available here is complimentary\r\n             * to the default type based ordering that DataTables typically uses. It\r\n             * allows much greater control over the the data that is being used to\r\n             * order a column, but is necessarily therefore more complex.\r\n             *\r\n             * This type of ordering is useful if you want to do ordering based on data\r\n             * live from the DOM (for example the contents of an 'input' element) rather\r\n             * than just the static string that DataTables knows of.\r\n             *\r\n             * The way these plug-ins work is that you create an array of the values you\r\n             * wish to be ordering for the column in question and then return that\r\n             * array. The data in the array much be in the index order of the rows in\r\n             * the table (not the currently ordering order!). Which order data gathering\r\n             * function is run here depends on the `dt-init columns.orderDataType`\r\n             * parameter that is used for the column (if any).\r\n             *\r\n             * The functions defined take two parameters:\r\n             *\r\n             * 1. `{object}` DataTables settings object: see\r\n             *    {@link DataTable.models.oSettings}\r\n             * 2. `{int}` Target column index\r\n             *\r\n             * Each function is expected to return an array:\r\n             *\r\n             * * `{array}` Data for the column to be ordering upon\r\n             *\r\n             *  @type array\r\n             *\r\n             *  @example\r\n             *    // Ordering using `input` node values\r\n             *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\r\n             *    {\r\n\t\t *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\r\n\t\t *        return $('input', td).val();\r\n\t\t *      } );\r\n\t\t *    }\r\n             */\r\n            order: {},\r\n\r\n\r\n            /**\r\n             * Type based plug-ins.\r\n             *\r\n             * Each column in DataTables has a type assigned to it, either by automatic\r\n             * detection or by direct assignment using the `type` option for the column.\r\n             * The type of a column will effect how it is ordering and search (plug-ins\r\n             * can also make use of the column type if required).\r\n             *\r\n             * @namespace\r\n             */\r\n            type: {\r\n                /**\r\n                 * Type detection functions.\r\n                 *\r\n                 * The functions defined in this object are used to automatically detect\r\n                 * a column's type, making initialisation of DataTables super easy, even\r\n                 * when complex data is in the table.\r\n                 *\r\n                 * The functions defined take two parameters:\r\n                 *\r\n                 *  1. `{*}` Data from the column cell to be analysed\r\n                 *  2. `{settings}` DataTables settings object. This can be used to\r\n                 *     perform context specific type detection - for example detection\r\n                 *     based on language settings such as using a comma for a decimal\r\n                 *     place. Generally speaking the options from the settings will not\r\n                 *     be required\r\n                 *\r\n                 * Each function is expected to return:\r\n                 *\r\n                 * * `{string|null}` Data type detected, or null if unknown (and thus\r\n                 *   pass it on to the other type detection functions.\r\n                 *\r\n                 *  @type array\r\n                 *\r\n                 *  @example\r\n                 *    // Currency type detection plug-in:\r\n                 *    $.fn.dataTable.ext.type.detect.push(\r\n                 *      function ( data, settings ) {\r\n\t\t\t *        // Check the numeric part\r\n\t\t\t *        if ( ! $.isNumeric( data.substring(1) ) ) {\r\n\t\t\t *          return null;\r\n\t\t\t *        }\r\n\t\t\t *\r\n\t\t\t *        // Check prefixed by currency\r\n\t\t\t *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\r\n\t\t\t *          return 'currency';\r\n\t\t\t *        }\r\n\t\t\t *        return null;\r\n\t\t\t *      }\r\n                 *    );\r\n                 */\r\n                detect: [],\r\n\r\n\r\n                /**\r\n                 * Type based search formatting.\r\n                 *\r\n                 * The type based searching functions can be used to pre-format the\r\n                 * data to be search on. For example, it can be used to strip HTML\r\n                 * tags or to de-format telephone numbers for numeric only searching.\r\n                 *\r\n                 * Note that is a search is not defined for a column of a given type,\r\n                 * no search formatting will be performed.\r\n                 *\r\n                 * Pre-processing of searching data plug-ins - When you assign the sType\r\n                 * for a column (or have it automatically detected for you by DataTables\r\n                 * or a type detection plug-in), you will typically be using this for\r\n                 * custom sorting, but it can also be used to provide custom searching\r\n                 * by allowing you to pre-processing the data and returning the data in\r\n                 * the format that should be searched upon. This is done by adding\r\n                 * functions this object with a parameter name which matches the sType\r\n                 * for that target column. This is the corollary of <i>afnSortData</i>\r\n                 * for searching data.\r\n                 *\r\n                 * The functions defined take a single parameter:\r\n                 *\r\n                 *  1. `{*}` Data from the column cell to be prepared for searching\r\n                 *\r\n                 * Each function is expected to return:\r\n                 *\r\n                 * * `{string|null}` Formatted string that will be used for the searching.\r\n                 *\r\n                 *  @type object\r\n                 *  @default {}\r\n                 *\r\n                 *  @example\r\n                 *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\r\n\t\t\t *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\r\n\t\t\t *    }\r\n                 */\r\n                search: {},\r\n\r\n\r\n                /**\r\n                 * Type based ordering.\r\n                 *\r\n                 * The column type tells DataTables what ordering to apply to the table\r\n                 * when a column is sorted upon. The order for each type that is defined,\r\n                 * is defined by the functions available in this object.\r\n                 *\r\n                 * Each ordering option can be described by three properties added to\r\n                 * this object:\r\n                 *\r\n                 * * `{type}-pre` - Pre-formatting function\r\n                 * * `{type}-asc` - Ascending order function\r\n                 * * `{type}-desc` - Descending order function\r\n                 *\r\n                 * All three can be used together, only `{type}-pre` or only\r\n                 * `{type}-asc` and `{type}-desc` together. It is generally recommended\r\n                 * that only `{type}-pre` is used, as this provides the optimal\r\n                 * implementation in terms of speed, although the others are provided\r\n                 * for compatibility with existing Javascript sort functions.\r\n                 *\r\n                 * `{type}-pre`: Functions defined take a single parameter:\r\n                 *\r\n                 *  1. `{*}` Data from the column cell to be prepared for ordering\r\n                 *\r\n                 * And return:\r\n                 *\r\n                 * * `{*}` Data to be sorted upon\r\n                 *\r\n                 * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\r\n                 * functions, taking two parameters:\r\n                 *\r\n                 *  1. `{*}` Data to compare to the second parameter\r\n                 *  2. `{*}` Data to compare to the first parameter\r\n                 *\r\n                 * And returning:\r\n                 *\r\n                 * * `{*}` Ordering match: <0 if first parameter should be sorted lower\r\n                 *   than the second parameter, ===0 if the two parameters are equal and\r\n                 *   >0 if the first parameter should be sorted height than the second\r\n                 *   parameter.\r\n                 *\r\n                 *  @type object\r\n                 *  @default {}\r\n                 *\r\n                 *  @example\r\n                 *    // Numeric ordering of formatted numbers with a pre-formatter\r\n                 *    $.extend( $.fn.dataTable.ext.type.order, {\r\n\t\t\t *      \"string-pre\": function(x) {\r\n\t\t\t *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\r\n\t\t\t *        return parseFloat( a );\r\n\t\t\t *      }\r\n\t\t\t *    } );\r\n                 *\r\n                 *  @example\r\n                 *    // Case-sensitive string ordering, with no pre-formatting method\r\n                 *    $.extend( $.fn.dataTable.ext.order, {\r\n\t\t\t *      \"string-case-asc\": function(x,y) {\r\n\t\t\t *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n\t\t\t *      },\r\n\t\t\t *      \"string-case-desc\": function(x,y) {\r\n\t\t\t *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\r\n\t\t\t *      }\r\n\t\t\t *    } );\r\n                 */\r\n                order: {}\r\n            },\r\n\r\n            /**\r\n             * Unique DataTables instance counter\r\n             *\r\n             * @type int\r\n             * @private\r\n             */\r\n            _unique: 0,\r\n\r\n\r\n            //\r\n            // Depreciated\r\n            // The following properties are retained for backwards compatiblity only.\r\n            // The should not be used in new projects and will be removed in a future\r\n            // version\r\n            //\r\n\r\n            /**\r\n             * Version check function.\r\n             *  @type function\r\n             *  @depreciated Since 1.10\r\n             */\r\n            fnVersionCheck: DataTable.fnVersionCheck,\r\n\r\n\r\n            /**\r\n             * Index for what 'this' index API functions should use\r\n             *  @type int\r\n             *  @deprecated Since v1.10\r\n             */\r\n            iApiIndex: 0,\r\n\r\n\r\n            /**\r\n             * jQuery UI class container\r\n             *  @type object\r\n             *  @deprecated Since v1.10\r\n             */\r\n            oJUIClasses: {},\r\n\r\n\r\n            /**\r\n             * Software version\r\n             *  @type string\r\n             *  @deprecated Since v1.10\r\n             */\r\n            sVersion: DataTable.version\r\n        };\r\n\r\n\r\n        //\r\n        // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\r\n        //\r\n        $.extend( _ext, {\r\n            afnFiltering: _ext.search,\r\n            aTypes:       _ext.type.detect,\r\n            ofnSearch:    _ext.type.search,\r\n            oSort:        _ext.type.order,\r\n            afnSortData:  _ext.order,\r\n            aoFeatures:   _ext.feature,\r\n            oApi:         _ext.internal,\r\n            oStdClasses:  _ext.classes,\r\n            oPagination:  _ext.pager\r\n        } );\r\n\r\n\r\n        $.extend( DataTable.ext.classes, {\r\n            \"sTable\": \"dataTable\",\r\n            \"sNoFooter\": \"no-footer\",\r\n\r\n            /* Paging buttons */\r\n            \"sPageButton\": \"paginate_button\",\r\n            \"sPageButtonActive\": \"current\",\r\n            \"sPageButtonDisabled\": \"disabled\",\r\n\r\n            /* Striping classes */\r\n            \"sStripeOdd\": \"odd\",\r\n            \"sStripeEven\": \"even\",\r\n\r\n            /* Empty row */\r\n            \"sRowEmpty\": \"dataTables_empty\",\r\n\r\n            /* Features */\r\n            \"sWrapper\": \"dataTables_wrapper\",\r\n            \"sFilter\": \"dataTables_filter\",\r\n            \"sInfo\": \"dataTables_info\",\r\n            \"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */\r\n            \"sLength\": \"dataTables_length\",\r\n            \"sProcessing\": \"dataTables_processing\",\r\n\r\n            /* Sorting */\r\n            \"sSortAsc\": \"sorting_asc\",\r\n            \"sSortDesc\": \"sorting_desc\",\r\n            \"sSortable\": \"sorting\", /* Sortable in both directions */\r\n            \"sSortableAsc\": \"sorting_asc_disabled\",\r\n            \"sSortableDesc\": \"sorting_desc_disabled\",\r\n            \"sSortableNone\": \"sorting_disabled\",\r\n            \"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */\r\n\r\n            /* Filtering */\r\n            \"sFilterInput\": \"\",\r\n\r\n            /* Page length */\r\n            \"sLengthSelect\": \"\",\r\n\r\n            /* Scrolling */\r\n            \"sScrollWrapper\": \"dataTables_scroll\",\r\n            \"sScrollHead\": \"dataTables_scrollHead\",\r\n            \"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\r\n            \"sScrollBody\": \"dataTables_scrollBody\",\r\n            \"sScrollFoot\": \"dataTables_scrollFoot\",\r\n            \"sScrollFootInner\": \"dataTables_scrollFootInner\",\r\n\r\n            /* Misc */\r\n            \"sHeaderTH\": \"\",\r\n            \"sFooterTH\": \"\",\r\n\r\n            // Deprecated\r\n            \"sSortJUIAsc\": \"\",\r\n            \"sSortJUIDesc\": \"\",\r\n            \"sSortJUI\": \"\",\r\n            \"sSortJUIAscAllowed\": \"\",\r\n            \"sSortJUIDescAllowed\": \"\",\r\n            \"sSortJUIWrapper\": \"\",\r\n            \"sSortIcon\": \"\",\r\n            \"sJUIHeader\": \"\",\r\n            \"sJUIFooter\": \"\"\r\n        } );\r\n\r\n\r\n        (function() {\r\n\r\n            // Reused strings for better compression. Closure compiler appears to have a\r\n            // weird edge case where it is trying to expand strings rather than use the\r\n            // variable version. This results in about 200 bytes being added, for very\r\n            // little preference benefit since it this run on script load only.\r\n            var _empty = '';\r\n            _empty = '';\r\n\r\n            var _stateDefault = _empty + 'ui-state-default';\r\n            var _sortIcon     = _empty + 'css_right ui-icon ui-icon-';\r\n            var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';\r\n\r\n            $.extend( DataTable.ext.oJUIClasses, DataTable.ext.classes, {\r\n                /* Full numbers paging buttons */\r\n                \"sPageButton\":         \"fg-button ui-button \"+_stateDefault,\r\n                \"sPageButtonActive\":   \"ui-state-disabled\",\r\n                \"sPageButtonDisabled\": \"ui-state-disabled\",\r\n\r\n                /* Features */\r\n                \"sPaging\": \"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi \"+\r\n                \"ui-buttonset-multi paging_\", /* Note that the type is postfixed */\r\n\r\n                /* Sorting */\r\n                \"sSortAsc\":            _stateDefault+\" sorting_asc\",\r\n                \"sSortDesc\":           _stateDefault+\" sorting_desc\",\r\n                \"sSortable\":           _stateDefault+\" sorting\",\r\n                \"sSortableAsc\":        _stateDefault+\" sorting_asc_disabled\",\r\n                \"sSortableDesc\":       _stateDefault+\" sorting_desc_disabled\",\r\n                \"sSortableNone\":       _stateDefault+\" sorting_disabled\",\r\n                \"sSortJUIAsc\":         _sortIcon+\"triangle-1-n\",\r\n                \"sSortJUIDesc\":        _sortIcon+\"triangle-1-s\",\r\n                \"sSortJUI\":            _sortIcon+\"carat-2-n-s\",\r\n                \"sSortJUIAscAllowed\":  _sortIcon+\"carat-1-n\",\r\n                \"sSortJUIDescAllowed\": _sortIcon+\"carat-1-s\",\r\n                \"sSortJUIWrapper\":     \"DataTables_sort_wrapper\",\r\n                \"sSortIcon\":           \"DataTables_sort_icon\",\r\n\r\n                /* Scrolling */\r\n                \"sScrollHead\": \"dataTables_scrollHead \"+_stateDefault,\r\n                \"sScrollFoot\": \"dataTables_scrollFoot \"+_stateDefault,\r\n\r\n                /* Misc */\r\n                \"sHeaderTH\":  _stateDefault,\r\n                \"sFooterTH\":  _stateDefault,\r\n                \"sJUIHeader\": _headerFooter+\" ui-corner-tl ui-corner-tr\",\r\n                \"sJUIFooter\": _headerFooter+\" ui-corner-bl ui-corner-br\"\r\n            } );\r\n\r\n        }());\r\n\r\n\r\n\r\n        var extPagination = DataTable.ext.pager;\r\n\r\n        function _numbers ( page, pages ) {\r\n            var\r\n                numbers = [],\r\n                buttons = extPagination.numbers_length,\r\n                half = Math.floor( buttons / 2 ),\r\n                i = 1;\r\n\r\n            if ( pages <= buttons ) {\r\n                numbers = _range( 0, pages );\r\n            }\r\n            else if ( page <= half ) {\r\n                numbers = _range( 0, buttons-2 );\r\n                numbers.push( 'ellipsis' );\r\n                numbers.push( pages-1 );\r\n            }\r\n            else if ( page >= pages - 1 - half ) {\r\n                numbers = _range( pages-(buttons-2), pages );\r\n                numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6\r\n                numbers.splice( 0, 0, 0 );\r\n            }\r\n            else {\r\n                numbers = _range( page-1, page+2 );\r\n                numbers.push( 'ellipsis' );\r\n                numbers.push( pages-1 );\r\n                numbers.splice( 0, 0, 'ellipsis' );\r\n                numbers.splice( 0, 0, 0 );\r\n            }\r\n\r\n            numbers.DT_el = 'span';\r\n            return numbers;\r\n        }\r\n\r\n\r\n        $.extend( extPagination, {\r\n            simple: function ( page, pages ) {\r\n                return [ 'previous', 'next' ];\r\n            },\r\n\r\n            full: function ( page, pages ) {\r\n                return [  'first', 'previous', 'next', 'last' ];\r\n            },\r\n\r\n            simple_numbers: function ( page, pages ) {\r\n                return [ 'previous', _numbers(page, pages), 'next' ];\r\n            },\r\n\r\n            full_numbers: function ( page, pages ) {\r\n                return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];\r\n            },\r\n\r\n            // For testing and plug-ins to use\r\n            _numbers: _numbers,\r\n            numbers_length: 7\r\n        } );\r\n\r\n\r\n        $.extend( true, DataTable.ext.renderer, {\r\n            pageButton: {\r\n                _: function ( settings, host, idx, buttons, page, pages ) {\r\n                    var classes = settings.oClasses;\r\n                    var lang = settings.oLanguage.oPaginate;\r\n                    var btnDisplay, btnClass, counter=0;\r\n\r\n                    var attach = function( container, buttons ) {\r\n                        var i, ien, node, button;\r\n                        var clickHandler = function ( e ) {\r\n                            _fnPageChange( settings, e.data.action, true );\r\n                        };\r\n\r\n                        for ( i=0, ien=buttons.length ; i<ien ; i++ ) {\r\n                            button = buttons[i];\r\n\r\n                            if ( $.isArray( button ) ) {\r\n                                var inner = $( '<'+(button.DT_el || 'div')+'/>' )\r\n                                    .appendTo( container );\r\n                                attach( inner, button );\r\n                            }\r\n                            else {\r\n                                btnDisplay = '';\r\n                                btnClass = '';\r\n\r\n                                switch ( button ) {\r\n                                    case 'ellipsis':\r\n                                        container.append('<span>&hellip;</span>');\r\n                                        break;\r\n\r\n                                    case 'first':\r\n                                        btnDisplay = lang.sFirst;\r\n                                        btnClass = button + (page > 0 ?\r\n                                            '' : ' '+classes.sPageButtonDisabled);\r\n                                        break;\r\n\r\n                                    case 'previous':\r\n                                        btnDisplay = lang.sPrevious;\r\n                                        btnClass = button + (page > 0 ?\r\n                                            '' : ' '+classes.sPageButtonDisabled);\r\n                                        break;\r\n\r\n                                    case 'next':\r\n                                        btnDisplay = lang.sNext;\r\n                                        btnClass = button + (page < pages-1 ?\r\n                                            '' : ' '+classes.sPageButtonDisabled);\r\n                                        break;\r\n\r\n                                    case 'last':\r\n                                        btnDisplay = lang.sLast;\r\n                                        btnClass = button + (page < pages-1 ?\r\n                                            '' : ' '+classes.sPageButtonDisabled);\r\n                                        break;\r\n\r\n                                    default:\r\n                                        btnDisplay = button + 1;\r\n                                        btnClass = page === button ?\r\n                                            classes.sPageButtonActive : '';\r\n                                        break;\r\n                                }\r\n\r\n                                if ( btnDisplay ) {\r\n                                    node = $('<a>', {\r\n                                        'class': classes.sPageButton+' '+btnClass,\r\n                                        'aria-controls': settings.sTableId,\r\n                                        'data-dt-idx': counter,\r\n                                        'tabindex': settings.iTabIndex,\r\n                                        'id': idx === 0 && typeof button === 'string' ?\r\n                                        settings.sTableId +'_'+ button :\r\n                                            null\r\n                                    } )\r\n                                        .html( btnDisplay )\r\n                                        .appendTo( container );\r\n\r\n                                    _fnBindAction(\r\n                                        node, {action: button}, clickHandler\r\n                                    );\r\n\r\n                                    counter++;\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    // IE9 throws an 'unknown error' if document.activeElement is used\r\n                    // inside an iframe or frame. Try / catch the error. Not good for\r\n                    // accessibility, but neither are frames.\r\n                    try {\r\n                        // Because this approach is destroying and recreating the paging\r\n                        // elements, focus is lost on the select button which is bad for\r\n                        // accessibility. So we want to restore focus once the draw has\r\n                        // completed\r\n                        var activeEl = $(document.activeElement).data('dt-idx');\r\n\r\n                        attach( $(host).empty(), buttons );\r\n\r\n                        if ( activeEl !== null ) {\r\n                            $(host).find( '[data-dt-idx='+activeEl+']' ).focus();\r\n                        }\r\n                    }\r\n                    catch (e) {}\r\n                }\r\n            }\r\n        } );\r\n\r\n\r\n\r\n        var __numericReplace = function ( d, decimalPlace, re1, re2 ) {\r\n            if ( !d || d === '-' ) {\r\n                return -Infinity;\r\n            }\r\n\r\n            // If a decimal place other than `.` is used, it needs to be given to the\r\n            // function so we can detect it and replace with a `.` which is the only\r\n            // decimal place Javascript recognises - it is not locale aware.\r\n            if ( decimalPlace ) {\r\n                d = _numToDecimal( d, decimalPlace );\r\n            }\r\n\r\n            if ( d.replace ) {\r\n                if ( re1 ) {\r\n                    d = d.replace( re1, '' );\r\n                }\r\n\r\n                if ( re2 ) {\r\n                    d = d.replace( re2, '' );\r\n                }\r\n            }\r\n\r\n            return d * 1;\r\n        };\r\n\r\n\r\n        // Add the numeric 'deformatting' functions for sorting. This is done in a\r\n        // function to provide an easy ability for the language options to add\r\n        // additional methods if a non-period decimal place is used.\r\n        function _addNumericSort ( decimalPlace ) {\r\n            $.each(\r\n                {\r\n                    // Plain numbers\r\n                    \"num\": function ( d ) {\r\n                        return __numericReplace( d, decimalPlace );\r\n                    },\r\n\r\n                    // Formatted numbers\r\n                    \"num-fmt\": function ( d ) {\r\n                        return __numericReplace( d, decimalPlace, _re_formatted_numeric );\r\n                    },\r\n\r\n                    // HTML numeric\r\n                    \"html-num\": function ( d ) {\r\n                        return __numericReplace( d, decimalPlace, _re_html );\r\n                    },\r\n\r\n                    // HTML numeric, formatted\r\n                    \"html-num-fmt\": function ( d ) {\r\n                        return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );\r\n                    }\r\n                },\r\n                function ( key, fn ) {\r\n                    _ext.type.order[ key+decimalPlace+'-pre' ] = fn;\r\n                }\r\n            );\r\n        }\r\n\r\n\r\n        // Default sort methods\r\n        $.extend( _ext.type.order, {\r\n            // Dates\r\n            \"date-pre\": function ( d ) {\r\n                return Date.parse( d ) || 0;\r\n            },\r\n\r\n            // html\r\n            \"html-pre\": function ( a ) {\r\n                return _empty(a) ?\r\n                    '' :\r\n                    a.replace ?\r\n                        a.replace( /<.*?>/g, \"\" ).toLowerCase() :\r\n                    a+'';\r\n            },\r\n\r\n            // string\r\n            \"string-pre\": function ( a ) {\r\n                // This is a little complex, but faster than always calling toString,\r\n                // http://jsperf.com/tostring-v-check\r\n                return _empty(a) ?\r\n                    '' :\r\n                    typeof a === 'string' ?\r\n                        a.toLowerCase() :\r\n                        ! a.toString ?\r\n                            '' :\r\n                            a.toString();\r\n            },\r\n\r\n            // string-asc and -desc are retained only for compatibility with the old\r\n            // sort methods\r\n            \"string-asc\": function ( x, y ) {\r\n                return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n            },\r\n\r\n            \"string-desc\": function ( x, y ) {\r\n                return ((x < y) ? 1 : ((x > y) ? -1 : 0));\r\n            }\r\n        } );\r\n\r\n\r\n        // Numeric sorting types - order doesn't matter here\r\n        _addNumericSort( '' );\r\n\r\n\r\n        // Built in type detection. See model.ext.aTypes for information about\r\n        // what is required from this methods.\r\n        $.extend( DataTable.ext.type.detect, [\r\n            // Plain numbers - first since V8 detects some plain numbers as dates\r\n            // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\r\n            function ( d, settings )\r\n            {\r\n                var decimal = settings.oLanguage.sDecimal;\r\n                return _isNumber( d, decimal ) ? 'num'+decimal : null;\r\n            },\r\n\r\n            // Dates (only those recognised by the browser's Date.parse)\r\n            function ( d, settings )\r\n            {\r\n                // V8 will remove any unknown characters at the start and end of the\r\n                // expression, leading to false matches such as `$245.12` or `10%` being\r\n                // a valid date. See forum thread 18941 for detail.\r\n                if ( d && ( ! _re_date_start.test(d) || ! _re_date_end.test(d) ) ) {\r\n                    return null;\r\n                }\r\n                var parsed = Date.parse(d);\r\n                return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;\r\n            },\r\n\r\n            // Formatted numbers\r\n            function ( d, settings )\r\n            {\r\n                var decimal = settings.oLanguage.sDecimal;\r\n                return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;\r\n            },\r\n\r\n            // HTML numeric\r\n            function ( d, settings )\r\n            {\r\n                var decimal = settings.oLanguage.sDecimal;\r\n                return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;\r\n            },\r\n\r\n            // HTML numeric, formatted\r\n            function ( d, settings )\r\n            {\r\n                var decimal = settings.oLanguage.sDecimal;\r\n                return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;\r\n            },\r\n\r\n            // HTML (this is strict checking - there must be html)\r\n            function ( d, settings )\r\n            {\r\n                return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?\r\n                    'html' : null;\r\n            }\r\n        ] );\r\n\r\n\r\n\r\n        // Filter formatting functions. See model.ext.ofnSearch for information about\r\n        // what is required from these methods.\r\n\r\n\r\n        $.extend( DataTable.ext.type.search, {\r\n            html: function ( data ) {\r\n                return _empty(data) ?\r\n                    data :\r\n                    typeof data === 'string' ?\r\n                        data\r\n                            .replace( _re_new_lines, \" \" )\r\n                            .replace( _re_html, \"\" ) :\r\n                        '';\r\n            },\r\n\r\n            string: function ( data ) {\r\n                return _empty(data) ?\r\n                    data :\r\n                    typeof data === 'string' ?\r\n                        data.replace( _re_new_lines, \" \" ) :\r\n                        data;\r\n            }\r\n        } );\r\n\r\n\r\n\r\n        $.extend( true, DataTable.ext.renderer, {\r\n            header: {\r\n                _: function ( settings, cell, column, classes ) {\r\n                    // No additional mark-up required\r\n                    // Attach a sort listener to update on sort - note that using the\r\n                    // `DT` namespace will allow the event to be removed automatically\r\n                    // on destroy, while the `dt` namespaced event is the one we are\r\n                    // listening for\r\n                    $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\r\n                        if ( settings !== ctx ) { // need to check this this is the host\r\n                            return;               // table, not a nested one\r\n                        }\r\n\r\n                        var colIdx = column.idx;\r\n\r\n                        cell\r\n                            .removeClass(\r\n                            column.sSortingClass +' '+\r\n                            classes.sSortAsc +' '+\r\n                            classes.sSortDesc\r\n                        )\r\n                            .addClass( columns[ colIdx ] == 'asc' ?\r\n                                classes.sSortAsc : columns[ colIdx ] == 'desc' ?\r\n                                classes.sSortDesc :\r\n                                column.sSortingClass\r\n                        );\r\n                    } );\r\n                },\r\n\r\n                jqueryui: function ( settings, cell, column, classes ) {\r\n                    var colIdx = column.idx;\r\n\r\n                    $('<div/>')\r\n                        .addClass( classes.sSortJUIWrapper )\r\n                        .append( cell.contents() )\r\n                        .append( $('<span/>')\r\n                            .addClass( classes.sSortIcon+' '+column.sSortingClassJUI )\r\n                    )\r\n                        .appendTo( cell );\r\n\r\n                    // Attach a sort listener to update on sort\r\n                    $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\r\n                        if ( settings !== ctx ) {\r\n                            return;\r\n                        }\r\n\r\n                        cell\r\n                            .removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )\r\n                            .addClass( columns[ colIdx ] == 'asc' ?\r\n                                classes.sSortAsc : columns[ colIdx ] == 'desc' ?\r\n                                classes.sSortDesc :\r\n                                column.sSortingClass\r\n                        );\r\n\r\n                        cell\r\n                            .find( 'span.'+classes.sSortIcon )\r\n                            .removeClass(\r\n                            classes.sSortJUIAsc +\" \"+\r\n                            classes.sSortJUIDesc +\" \"+\r\n                            classes.sSortJUI +\" \"+\r\n                            classes.sSortJUIAscAllowed +\" \"+\r\n                            classes.sSortJUIDescAllowed\r\n                        )\r\n                            .addClass( columns[ colIdx ] == 'asc' ?\r\n                                classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?\r\n                                classes.sSortJUIDesc :\r\n                                column.sSortingClassJUI\r\n                        );\r\n                    } );\r\n                }\r\n            }\r\n        } );\r\n\r\n        /*\r\n         * Public helper functions. These aren't used internally by DataTables, or\r\n         * called by any of the options passed into DataTables, but they can be used\r\n         * externally by developers working with DataTables. They are helper functions\r\n         * to make working with DataTables a little bit easier.\r\n         */\r\n\r\n        /**\r\n         * Helpers for `columns.render`.\r\n         *\r\n         * The options defined here can be used with the `columns.render` initialisation\r\n         * option to provide a display renderer. The following functions are defined:\r\n         *\r\n         * * `number` - Will format numeric data (defined by `columns.data`) for\r\n         *   display, retaining the original unformatted data for sorting and filtering.\r\n         *   It takes 4 parameters:\r\n         *   * `string` - Thousands grouping separator\r\n         *   * `string` - Decimal point indicator\r\n         *   * `integer` - Number of decimal points to show\r\n         *   * `string` (optional) - Prefix.\r\n         *\r\n         * @example\r\n         *   // Column definition using the number renderer\r\n         *   {\r\n\t *     data: \"salary\",\r\n\t *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\r\n\t *   }\r\n         *\r\n         * @namespace\r\n         */\r\n        DataTable.render = {\r\n            number: function ( thousands, decimal, precision, prefix ) {\r\n                return {\r\n                    display: function ( d ) {\r\n                        var negative = d < 0 ? '-' : '';\r\n                        d = Math.abs( parseFloat( d ) );\r\n\r\n                        var intPart = parseInt( d, 10 );\r\n                        var floatPart = precision ?\r\n                        decimal+(d - intPart).toFixed( precision ).substring( 2 ):\r\n                            '';\r\n\r\n                        return negative + (prefix||'') +\r\n                        intPart.toString().replace(\r\n                            /\\B(?=(\\d{3})+(?!\\d))/g, thousands\r\n                        ) +\r\n                        floatPart;\r\n                    }\r\n                };\r\n            }\r\n        };\r\n\r\n\r\n        /*\r\n         * This is really a good bit rubbish this method of exposing the internal methods\r\n         * publicly... - To be fixed in 2.0 using methods on the prototype\r\n         */\r\n\r\n\r\n        /**\r\n         * Create a wrapper function for exporting an internal functions to an external API.\r\n         *  @param {string} fn API function name\r\n         *  @returns {function} wrapped function\r\n         *  @memberof DataTable#internal\r\n         */\r\n        function _fnExternApiFunc (fn)\r\n        {\r\n            return function() {\r\n                var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(\r\n                    Array.prototype.slice.call(arguments)\r\n                );\r\n                return DataTable.ext.internal[fn].apply( this, args );\r\n            };\r\n        }\r\n\r\n\r\n        /**\r\n         * Reference to internal functions for use by plug-in developers. Note that\r\n         * these methods are references to internal functions and are considered to be\r\n         * private. If you use these methods, be aware that they are liable to change\r\n         * between versions.\r\n         *  @namespace\r\n         */\r\n        $.extend( DataTable.ext.internal, {\r\n            _fnExternApiFunc: _fnExternApiFunc,\r\n            _fnBuildAjax: _fnBuildAjax,\r\n            _fnAjaxUpdate: _fnAjaxUpdate,\r\n            _fnAjaxParameters: _fnAjaxParameters,\r\n            _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\r\n            _fnAjaxDataSrc: _fnAjaxDataSrc,\r\n            _fnAddColumn: _fnAddColumn,\r\n            _fnColumnOptions: _fnColumnOptions,\r\n            _fnAdjustColumnSizing: _fnAdjustColumnSizing,\r\n            _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\r\n            _fnColumnIndexToVisible: _fnColumnIndexToVisible,\r\n            _fnVisbleColumns: _fnVisbleColumns,\r\n            _fnGetColumns: _fnGetColumns,\r\n            _fnColumnTypes: _fnColumnTypes,\r\n            _fnApplyColumnDefs: _fnApplyColumnDefs,\r\n            _fnHungarianMap: _fnHungarianMap,\r\n            _fnCamelToHungarian: _fnCamelToHungarian,\r\n            _fnLanguageCompat: _fnLanguageCompat,\r\n            _fnBrowserDetect: _fnBrowserDetect,\r\n            _fnAddData: _fnAddData,\r\n            _fnAddTr: _fnAddTr,\r\n            _fnNodeToDataIndex: _fnNodeToDataIndex,\r\n            _fnNodeToColumnIndex: _fnNodeToColumnIndex,\r\n            _fnGetCellData: _fnGetCellData,\r\n            _fnSetCellData: _fnSetCellData,\r\n            _fnSplitObjNotation: _fnSplitObjNotation,\r\n            _fnGetObjectDataFn: _fnGetObjectDataFn,\r\n            _fnSetObjectDataFn: _fnSetObjectDataFn,\r\n            _fnGetDataMaster: _fnGetDataMaster,\r\n            _fnClearTable: _fnClearTable,\r\n            _fnDeleteIndex: _fnDeleteIndex,\r\n            _fnInvalidateRow: _fnInvalidateRow,\r\n            _fnGetRowElements: _fnGetRowElements,\r\n            _fnCreateTr: _fnCreateTr,\r\n            _fnBuildHead: _fnBuildHead,\r\n            _fnDrawHead: _fnDrawHead,\r\n            _fnDraw: _fnDraw,\r\n            _fnReDraw: _fnReDraw,\r\n            _fnAddOptionsHtml: _fnAddOptionsHtml,\r\n            _fnDetectHeader: _fnDetectHeader,\r\n            _fnGetUniqueThs: _fnGetUniqueThs,\r\n            _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\r\n            _fnFilterComplete: _fnFilterComplete,\r\n            _fnFilterCustom: _fnFilterCustom,\r\n            _fnFilterColumn: _fnFilterColumn,\r\n            _fnFilter: _fnFilter,\r\n            _fnFilterCreateSearch: _fnFilterCreateSearch,\r\n            _fnEscapeRegex: _fnEscapeRegex,\r\n            _fnFilterData: _fnFilterData,\r\n            _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\r\n            _fnUpdateInfo: _fnUpdateInfo,\r\n            _fnInfoMacros: _fnInfoMacros,\r\n            _fnInitialise: _fnInitialise,\r\n            _fnInitComplete: _fnInitComplete,\r\n            _fnLengthChange: _fnLengthChange,\r\n            _fnFeatureHtmlLength: _fnFeatureHtmlLength,\r\n            _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\r\n            _fnPageChange: _fnPageChange,\r\n            _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\r\n            _fnProcessingDisplay: _fnProcessingDisplay,\r\n            _fnFeatureHtmlTable: _fnFeatureHtmlTable,\r\n            _fnScrollDraw: _fnScrollDraw,\r\n            _fnApplyToChildren: _fnApplyToChildren,\r\n            _fnCalculateColumnWidths: _fnCalculateColumnWidths,\r\n            _fnThrottle: _fnThrottle,\r\n            _fnConvertToWidth: _fnConvertToWidth,\r\n            _fnScrollingWidthAdjust: _fnScrollingWidthAdjust,\r\n            _fnGetWidestNode: _fnGetWidestNode,\r\n            _fnGetMaxLenString: _fnGetMaxLenString,\r\n            _fnStringToCss: _fnStringToCss,\r\n            _fnScrollBarWidth: _fnScrollBarWidth,\r\n            _fnSortFlatten: _fnSortFlatten,\r\n            _fnSort: _fnSort,\r\n            _fnSortAria: _fnSortAria,\r\n            _fnSortListener: _fnSortListener,\r\n            _fnSortAttachListener: _fnSortAttachListener,\r\n            _fnSortingClasses: _fnSortingClasses,\r\n            _fnSortData: _fnSortData,\r\n            _fnSaveState: _fnSaveState,\r\n            _fnLoadState: _fnLoadState,\r\n            _fnSettingsFromNode: _fnSettingsFromNode,\r\n            _fnLog: _fnLog,\r\n            _fnMap: _fnMap,\r\n            _fnBindAction: _fnBindAction,\r\n            _fnCallbackReg: _fnCallbackReg,\r\n            _fnCallbackFire: _fnCallbackFire,\r\n            _fnLengthOverflow: _fnLengthOverflow,\r\n            _fnRenderer: _fnRenderer,\r\n            _fnDataSource: _fnDataSource,\r\n            _fnRowAttributes: _fnRowAttributes,\r\n            _fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant\r\n                                            // in 1.10, so this dead-end function is\r\n                                            // added to prevent errors\r\n        } );\r\n\r\n\r\n        // jQuery access\r\n        $.fn.dataTable = DataTable;\r\n\r\n        // Legacy aliases\r\n        $.fn.dataTableSettings = DataTable.settings;\r\n        $.fn.dataTableExt = DataTable.ext;\r\n\r\n        // With a capital `D` we return a DataTables API instance rather than a\r\n        // jQuery object\r\n        $.fn.DataTable = function ( opts ) {\r\n            return $(this).dataTable( opts ).api();\r\n        };\r\n\r\n        // All properties that are available to $.fn.dataTable should also be\r\n        // available on $.fn.DataTable\r\n        $.each( DataTable, function ( prop, val ) {\r\n            $.fn.DataTable[ prop ] = val;\r\n        } );\r\n\r\n\r\n        // Information about events fired by DataTables - for documentation.\r\n        /**\r\n         * Draw event, fired whenever the table is redrawn on the page, at the same\r\n         * point as fnDrawCallback. This may be useful for binding events or\r\n         * performing calculations when the table is altered at all.\r\n         *  @name DataTable#draw.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * Search event, fired when the searching applied to the table (using the\r\n         * built-in global search, or column filters) is altered.\r\n         *  @name DataTable#search.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * Page change event, fired when the paging of the table is altered.\r\n         *  @name DataTable#page.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * Order event, fired when the ordering applied to the table is altered.\r\n         *  @name DataTable#order.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * DataTables initialisation complete event, fired when the table is fully\r\n         * drawn, including Ajax data loaded, if Ajax data is required.\r\n         *  @name DataTable#init.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} oSettings DataTables settings object\r\n         *  @param {object} json The JSON object request from the server - only\r\n         *    present if client-side Ajax sourced data is used</li></ol>\r\n         */\r\n\r\n        /**\r\n         * State save event, fired when the table has changed state a new state save\r\n         * is required. This event allows modification of the state saving object\r\n         * prior to actually doing the save, including addition or other state\r\n         * properties (for plug-ins) or modification of a DataTables core property.\r\n         *  @name DataTable#stateSaveParams.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} oSettings DataTables settings object\r\n         *  @param {object} json The state information to be saved\r\n         */\r\n\r\n        /**\r\n         * State load event, fired when the table is loading state from the stored\r\n         * data, but prior to the settings object being modified by the saved state\r\n         * - allowing modification of the saved state is required or loading of\r\n         * state for a plug-in.\r\n         *  @name DataTable#stateLoadParams.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} oSettings DataTables settings object\r\n         *  @param {object} json The saved state information\r\n         */\r\n\r\n        /**\r\n         * State loaded event, fired when state has been loaded from stored data and\r\n         * the settings object has been modified by the loaded data.\r\n         *  @name DataTable#stateLoaded.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} oSettings DataTables settings object\r\n         *  @param {object} json The saved state information\r\n         */\r\n\r\n        /**\r\n         * Processing event, fired when DataTables is doing some kind of processing\r\n         * (be it, order, searcg or anything else). It can be used to indicate to\r\n         * the end user that there is something happening, or that something has\r\n         * finished.\r\n         *  @name DataTable#processing.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} oSettings DataTables settings object\r\n         *  @param {boolean} bShow Flag for if DataTables is doing processing or not\r\n         */\r\n\r\n        /**\r\n         * Ajax (XHR) event, fired whenever an Ajax request is completed from a\r\n         * request to made to the server for new data. This event is called before\r\n         * DataTables processed the returned data, so it can also be used to pre-\r\n         * process the data returned from the server, if needed.\r\n         *\r\n         * Note that this trigger is called in `fnServerData`, if you override\r\n         * `fnServerData` and which to use this event, you need to trigger it in you\r\n         * success function.\r\n         *  @name DataTable#xhr.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         *  @param {object} json JSON returned from the server\r\n         *\r\n         *  @example\r\n         *     // Use a custom property returned from the server in another DOM element\r\n         *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\r\n\t *       $('#status').html( json.status );\r\n\t *     } );\r\n         *\r\n         *  @example\r\n         *     // Pre-process the data returned from the server\r\n         *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\r\n\t *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {\r\n\t *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;\r\n\t *       }\r\n\t *       // Note no return - manipulate the data directly in the JSON object.\r\n\t *     } );\r\n         */\r\n\r\n        /**\r\n         * Destroy event, fired when the DataTable is destroyed by calling fnDestroy\r\n         * or passing the bDestroy:true parameter in the initialisation object. This\r\n         * can be used to remove bound events, added DOM nodes, etc.\r\n         *  @name DataTable#destroy.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * Page length change event, fired when number of records to show on each\r\n         * page (the length) is changed.\r\n         *  @name DataTable#length.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         *  @param {integer} len New length\r\n         */\r\n\r\n        /**\r\n         * Column sizing has changed.\r\n         *  @name DataTable#column-sizing.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         */\r\n\r\n        /**\r\n         * Column visibility has changed.\r\n         *  @name DataTable#column-visibility.dt\r\n         *  @event\r\n         *  @param {event} e jQuery event object\r\n         *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\r\n         *  @param {int} column Column index\r\n         *  @param {bool} vis `false` if column now hidden, or `true` if visible\r\n         */\r\n\r\n        return $.fn.dataTable;\r\n    }));\r\n\r\n}(window, document));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./resources/assets/node_modules/datatable/datatable.js\n// module id = 148\n// module chunks = 0","/* Set the defaults for DataTables initialisation */\r\n$.extend( true, $.fn.dataTable.defaults, {\r\n    \"sDom\":\r\n    \"<'row'<'col-sm-6'l><'col-sm-6'f>r>\"+\r\n    \"t\"+\r\n    \"<'row'<'col-sm-6'i><'col-sm-6'p>>\",\r\n    \"oLanguage\": {\r\n        \"sLengthMenu\": \"_MENU_ records per page\",\r\n        \"sSearch\": \"\"\r\n    }\r\n} );\r\n\r\n\r\n/* Default class modification */\r\n$.extend( $.fn.dataTableExt.oStdClasses, {\r\n    \"sWrapper\": \"dataTables_wrapper form-inline\",\r\n    \"sFilterInput\": \"form-control\",\r\n    \"sLengthSelect\": \"form-control\"\r\n} );\r\n\r\n// In 1.10 we use the pagination renderers to draw the Bootstrap paging,\r\n// rather than  custom plug-in\r\n// if ( $.fn.dataTable.Api ) {\r\n// \t$.fn.dataTable.defaults.renderer = 'bootstrap';\r\n// \t$.fn.dataTable.ext.renderer.pageButton.bootstrap = function ( settings, host, idx, buttons, page, pages ) {\r\n// \t\tvar api = new $.fn.dataTable.Api( settings );\r\n// \t\tvar classes = settings.oClasses;\r\n// \t\tvar lang = settings.oLanguage.oPaginate;\r\n// \t\tvar btnDisplay, btnClass;\r\n\r\n// \t\tvar attach = function( container, buttons ) {\r\n// \t\t\tvar i, ien, node, button;\r\n// \t\t\tvar clickHandler = function ( e ) {\r\n// \t\t\t\te.preventDefault();\r\n// \t\t\t\tif ( e.data.action !== 'ellipsis' ) {\r\n// \t\t\t\t\tapi.page( e.data.action ).draw( false );\r\n// \t\t\t\t}\r\n// \t\t\t};\r\n\r\n// \t\t\tfor ( i=0, ien=buttons.length ; i<ien ; i++ ) {\r\n// \t\t\t\tbutton = buttons[i];\r\n\r\n// \t\t\t\tif ( $.isArray( button ) ) {\r\n// \t\t\t\t\tattach( container, button );\r\n// \t\t\t\t}\r\n// \t\t\t\telse {\r\n// \t\t\t\t\tbtnDisplay = '';\r\n// \t\t\t\t\tbtnClass = '';\r\n\r\n// \t\t\t\t\tswitch ( button ) {\r\n// \t\t\t\t\t\tcase 'ellipsis':\r\n// \t\t\t\t\t\t\tbtnDisplay = '&hellip;';\r\n// \t\t\t\t\t\t\tbtnClass = 'disabled';\r\n// \t\t\t\t\t\t\tbreak;\r\n\r\n// \t\t\t\t\t\tcase 'first':\r\n// \t\t\t\t\t\t\tbtnDisplay = lang.sFirst;\r\n// \t\t\t\t\t\t\tbtnClass = button + (page > 0 ?\r\n// \t\t\t\t\t\t\t\t'' : ' disabled');\r\n// \t\t\t\t\t\t\tbreak;\r\n\r\n// \t\t\t\t\t\tcase 'previous':\r\n// \t\t\t\t\t\t\tbtnDisplay = lang.sPrevious;\r\n// \t\t\t\t\t\t\tbtnClass = button + (page > 0 ?\r\n// \t\t\t\t\t\t\t\t'' : ' disabled');\r\n// \t\t\t\t\t\t\tbreak;\r\n\r\n// \t\t\t\t\t\tcase 'next':\r\n// \t\t\t\t\t\t\tbtnDisplay = lang.sNext;\r\n// \t\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?\r\n// \t\t\t\t\t\t\t\t'' : ' disabled');\r\n// \t\t\t\t\t\t\tbreak;\r\n\r\n// \t\t\t\t\t\tcase 'last':\r\n// \t\t\t\t\t\t\tbtnDisplay = lang.sLast;\r\n// \t\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?\r\n// \t\t\t\t\t\t\t\t'' : ' disabled');\r\n// \t\t\t\t\t\t\tbreak;\r\n\r\n// \t\t\t\t\t\tdefault:\r\n// \t\t\t\t\t\t\tbtnDisplay = button + 1;\r\n// \t\t\t\t\t\t\tbtnClass = page === button ?\r\n// \t\t\t\t\t\t\t\t'active' : '';\r\n// \t\t\t\t\t\t\tbreak;\r\n// \t\t\t\t\t}\r\n\r\n// \t\t\t\t\tif ( btnDisplay ) {\r\n// \t\t\t\t\t\tnode = $('<li>', {\r\n// \t\t\t\t\t\t\t\t'class': classes.sPageButton+' '+btnClass,\r\n// \t\t\t\t\t\t\t\t'aria-controls': settings.sTableId,\r\n// \t\t\t\t\t\t\t\t'tabindex': settings.iTabIndex,\r\n// \t\t\t\t\t\t\t\t'id': idx === 0 && typeof button === 'string' ?\r\n// \t\t\t\t\t\t\t\t\tsettings.sTableId +'_'+ button :\r\n// \t\t\t\t\t\t\t\t\tnull\r\n// \t\t\t\t\t\t\t} )\r\n// \t\t\t\t\t\t\t.append( $('<a>', {\r\n// \t\t\t\t\t\t\t\t\t'href': '#'\r\n// \t\t\t\t\t\t\t\t} )\r\n// \t\t\t\t\t\t\t\t.html( btnDisplay )\r\n// \t\t\t\t\t\t\t)\r\n// \t\t\t\t\t\t\t.appendTo( container );\r\n\r\n// \t\t\t\t\t\tsettings.oApi._fnBindAction(\r\n// \t\t\t\t\t\t\tnode, {action: button}, clickHandler\r\n// \t\t\t\t\t\t);\r\n// \t\t\t\t\t}\r\n// \t\t\t\t}\r\n// \t\t\t}\r\n// \t\t};\r\n\r\n// \t\tattach(\r\n// \t\t\t$(host).empty().html('<ul class=\"pagination\"/>').children('ul'),\r\n// \t\t\tbuttons\r\n// \t\t);\r\n// \t}\r\n// }\r\n// else {\r\n// Integration for 1.9-\r\n$.fn.dataTable.defaults.sPaginationType = 'bootstrap';\r\n\r\n/* API method to get paging information */\r\n$.fn.dataTableExt.oApi.fnPagingInfo = function ( oSettings )\r\n{\r\n    return {\r\n        \"iStart\":         oSettings._iDisplayStart,\r\n        \"iEnd\":           oSettings.fnDisplayEnd(),\r\n        \"iLength\":        oSettings._iDisplayLength,\r\n        \"iTotal\":         oSettings.fnRecordsTotal(),\r\n        \"iFilteredTotal\": oSettings.fnRecordsDisplay(),\r\n        \"iPage\":          oSettings._iDisplayLength === -1 ?\r\n            0 : Math.ceil( oSettings._iDisplayStart / oSettings._iDisplayLength ),\r\n        \"iTotalPages\":    oSettings._iDisplayLength === -1 ?\r\n            0 : Math.ceil( oSettings.fnRecordsDisplay() / oSettings._iDisplayLength )\r\n    };\r\n};\r\n\r\n/* Bootstrap style pagination control */\r\n$.extend( $.fn.dataTableExt.oPagination, {\r\n    \"bootstrap\": {\r\n        \"fnInit\": function( oSettings, nPaging, fnDraw ) {\r\n            var oLang = oSettings.oLanguage.oPaginate;\r\n            var fnClickHandler = function ( e ) {\r\n                e.preventDefault();\r\n                if ( oSettings.oApi._fnPageChange(oSettings, e.data.action) ) {\r\n                    fnDraw( oSettings );\r\n                }\r\n            };\r\n\r\n            $(nPaging).append(\r\n                '<ul class=\"pagination\">'+\r\n                '<li class=\"previous disabled\"><a href=\"#\">'+oLang.sPrevious+'</a></li>'+\r\n                '<li class=\"next disabled\"><a href=\"#\">'+oLang.sNext+'</a></li>'+\r\n                '</ul>'\r\n            );\r\n            var els = $('a', nPaging);\r\n            $(els[0]).bind( 'click.DT', { action: \"previous\" }, fnClickHandler );\r\n            $(els[1]).bind( 'click.DT', { action: \"next\" }, fnClickHandler );\r\n        },\r\n\r\n        \"fnUpdate\": function ( oSettings, fnDraw ) {\r\n            var iListLength = 5;\r\n            var oPaging = oSettings.oInstance.fnPagingInfo();\r\n            var an = oSettings.aanFeatures.p;\r\n            var i, ien, j, sClass, iStart, iEnd, iHalf=Math.floor(iListLength/2);\r\n\r\n            if ( oPaging.iTotalPages < iListLength) {\r\n                iStart = 1;\r\n                iEnd = oPaging.iTotalPages;\r\n            }\r\n            else if ( oPaging.iPage <= iHalf ) {\r\n                iStart = 1;\r\n                iEnd = iListLength;\r\n            } else if ( oPaging.iPage >= (oPaging.iTotalPages-iHalf) ) {\r\n                iStart = oPaging.iTotalPages - iListLength + 1;\r\n                iEnd = oPaging.iTotalPages;\r\n            } else {\r\n                iStart = oPaging.iPage - iHalf + 1;\r\n                iEnd = iStart + iListLength - 1;\r\n            }\r\n\r\n            for ( i=0, ien=an.length ; i<ien ; i++ ) {\r\n                // Remove the middle elements\r\n                $('li:gt(0)', an[i]).filter(':not(:last)').remove();\r\n\r\n                // Add the new list items and their event handlers\r\n                for ( j=iStart ; j<=iEnd ; j++ ) {\r\n                    sClass = (j==oPaging.iPage+1) ? 'class=\"active\"' : '';\r\n                    $('<li '+sClass+'><a href=\"#\">'+j+'</a></li>')\r\n                        .insertBefore( $('li:last', an[i])[0] )\r\n                        .bind('click', function (e) {\r\n                            e.preventDefault();\r\n                            oSettings._iDisplayStart = (parseInt($('a', this).text(),10)-1) * oPaging.iLength;\r\n                            fnDraw( oSettings );\r\n                        } );\r\n                }\r\n\r\n                // Add / remove disabled classes from the static elements\r\n                if ( oPaging.iPage === 0 ) {\r\n                    $('li:first', an[i]).addClass('disabled');\r\n                } else {\r\n                    $('li:first', an[i]).removeClass('disabled');\r\n                }\r\n\r\n                if ( oPaging.iPage === oPaging.iTotalPages-1 || oPaging.iTotalPages === 0 ) {\r\n                    $('li:last', an[i]).addClass('disabled');\r\n                } else {\r\n                    $('li:last', an[i]).removeClass('disabled');\r\n                }\r\n            }\r\n        }\r\n    }\r\n} );\r\n//}\r\n\r\n\r\n/*\r\n * TableTools Bootstrap compatibility\r\n * Required TableTools 2.1+\r\n */\r\nif ( $.fn.DataTable.TableTools ) {\r\n    // Set the classes that TableTools uses to something suitable for Bootstrap\r\n    $.extend( true, $.fn.DataTable.TableTools.classes, {\r\n        \"container\": \"DTTT btn-group\",\r\n        \"buttons\": {\r\n            \"normal\": \"btn btn-default\",\r\n            \"disabled\": \"disabled\"\r\n        },\r\n        \"collection\": {\r\n            \"container\": \"DTTT_dropdown dropdown-menu\",\r\n            \"buttons\": {\r\n                \"normal\": \"\",\r\n                \"disabled\": \"disabled\"\r\n            }\r\n        },\r\n        \"print\": {\r\n            \"info\": \"DTTT_print_info modal\"\r\n        },\r\n        \"select\": {\r\n            \"row\": \"active\"\r\n        }\r\n    } );\r\n\r\n    // Have the collection use a bootstrap compatible dropdown\r\n    $.extend( true, $.fn.DataTable.TableTools.DEFAULTS.oTags, {\r\n        \"collection\": {\r\n            \"container\": \"ul\",\r\n            \"button\": \"li\",\r\n            \"liner\": \"a\"\r\n        }\r\n    } );\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./resources/assets/node_modules/datatable/datatable-bootstrap.js\n// module id = 149\n// module chunks = 0","$(document).ready(function() {\r\n\r\n    body_sizer();\r\n\r\n    $(\"div[id='#fixed-sidebar']\").on('click', function() {\r\n\r\n        if ($(this).hasClass(\"switch-on\")) {\r\n            var windowHeight = $(window).height();\r\n            var headerHeight = $('#page-header').height();\r\n            var contentHeight = windowHeight - headerHeight;\r\n\r\n            $('#page-sidebar').css('height', contentHeight);\r\n            $('.scroll-sidebar').css('height', contentHeight);\r\n\r\n            $('.scroll-sidebar').slimscroll({\r\n                height: '100%',\r\n                color: 'rgba(155, 164, 169, 0.68)',\r\n                size: '6px'\r\n            });\r\n\r\n            var headerBg = $('#page-header').attr('class');\r\n            $('#header-logo').addClass(headerBg);\r\n\r\n        } else {\r\n            var windowHeight = $(document).height();\r\n            var headerHeight = $('#page-header').height();\r\n            var contentHeight = windowHeight - headerHeight;\r\n\r\n            $('#page-sidebar').css('height', contentHeight);\r\n            $('.scroll-sidebar').css('height', contentHeight);\r\n\r\n            $(\".scroll-sidebar\").slimScroll({\r\n                destroy: true\r\n            });\r\n\r\n            $('#header-logo').removeClass('bg-gradient-9');\r\n\r\n        }\r\n\r\n    });\r\n\r\n});\r\n\r\n$(window).on('resize', function() {\r\n    body_sizer();\r\n});\r\n\r\nfunction body_sizer() {\r\n\r\n    if ($('body').hasClass('fixed-sidebar')) {\r\n\r\n        var windowHeight = $(window).height();\r\n        var headerHeight = $('#page-header').height();\r\n        var contentHeight = windowHeight - headerHeight;\r\n\r\n        $('#page-sidebar').css('height', contentHeight);\r\n        $('.scroll-sidebar').css('height', contentHeight);\r\n        $('#page-content').css('min-height', contentHeight);\r\n\r\n    } else {\r\n\r\n        var windowHeight = $(document).height();\r\n        var headerHeight = $('#page-header').height();\r\n        var contentHeight = windowHeight - headerHeight;\r\n\r\n        $('#page-sidebar').css('height', contentHeight);\r\n        $('.scroll-sidebar').css('height', contentHeight);\r\n        $('#page-content').css('min-height', contentHeight);\r\n\r\n    }\r\n\r\n};\r\n\r\nfunction pageTransitions() {\r\n\r\n    var transitions = ['.pt-page-moveFromLeft', 'pt-page-moveFromRight', 'pt-page-moveFromTop', 'pt-page-moveFromBottom', 'pt-page-fade', 'pt-page-moveFromLeftFade', 'pt-page-moveFromRightFade', 'pt-page-moveFromTopFade', 'pt-page-moveFromBottomFade', 'pt-page-scaleUp', 'pt-page-scaleUpCenter', 'pt-page-flipInLeft', 'pt-page-flipInRight', 'pt-page-flipInBottom', 'pt-page-flipInTop', 'pt-page-rotatePullRight', 'pt-page-rotatePullLeft', 'pt-page-rotatePullTop', 'pt-page-rotatePullBottom', 'pt-page-rotateUnfoldLeft', 'pt-page-rotateUnfoldRight', 'pt-page-rotateUnfoldTop', 'pt-page-rotateUnfoldBottom'];\r\n    for (var i in transitions) {\r\n        var transition_name = transitions[i];\r\n        if ($('.add-transition').hasClass(transition_name)) {\r\n\r\n            $('.add-transition').addClass(transition_name + '-init page-transition');\r\n\r\n            setTimeout(function() {\r\n                $('.add-transition').removeClass(transition_name + ' ' + transition_name + '-init page-transition');\r\n            }, 1200);\r\n            return;\r\n        }\r\n    }\r\n\r\n};\r\n\r\n$(document).ready(function() {\r\n\r\n    pageTransitions();\r\n\r\n    // ADD SLIDEDOWN ANIMATION TO DROPDOWN //\r\n    $('.dropdown').on('show.bs.dropdown', function(e){\r\n        $(this).find('.dropdown-menu').first().stop(true, true).slideDown();\r\n    });\r\n\r\n    // ADD SLIDEUP ANIMATION TO DROPDOWN //\r\n    $('.dropdown').on('hide.bs.dropdown', function(e){\r\n        $(this).find('.dropdown-menu').first().stop(true, true).slideUp();\r\n    });\r\n\r\n    /* Sidebar menu */\r\n    $(function() {\r\n\r\n        $('#sidebar-menu').superclick({\r\n            animation: {\r\n                height: 'show'\r\n            },\r\n            animationOut: {\r\n                height: 'hide'\r\n            }\r\n        });\r\n\r\n        //automatically open the current path\r\n        // var path = window.location.pathname.split('/');\r\n        // path = path[path.length-1];\r\n        var path = window.location.pathname;\r\n        if (path !== undefined) {\r\n            $(\"#sidebar-menu\").find(\"a[href$='\" + path + \"']\").addClass('sfActive');\r\n            $(\"#sidebar-menu\").find(\"a[href$='\" + path + \"']\").parents().eq(3).superclick('show');\r\n        }\r\n\r\n    });\r\n\r\n    /* Colapse sidebar */\r\n    $(function() {\r\n\r\n        $('#close-sidebar').click(function() {\r\n            $('body').toggleClass('closed-sidebar');\r\n            $('.glyph-icon', this).toggleClass('icon-angle-right').toggleClass('icon-angle-left');\r\n        });\r\n\r\n    });\r\n\r\n    /* Sidebar scroll */\r\n\r\n\r\n\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./resources/assets/node_modules/js-init/layout.js\n// module id = 150\n// module chunks = 0","/* Prevent default on # hrefs */\r\n$(document).ready(function() {\r\n    $('#datatable').dataTable();\r\n});\r\n\r\n$(document).ready(function() {\r\n    $('.dataTables_filter input').attr(\"placeholder\", \"Search...\");\r\n});\r\n\r\n/* Datatables reorder */\r\n\r\n$(document).ready(function() {\r\n    $('#datatable-reorder').DataTable( {\r\n        dom: 'Rlfrtip'\r\n    });\r\n\r\n    $('#datatable-reorder_length').hide();\r\n    $('#datatable-reorder_filter').hide();\r\n\r\n});\r\n\r\n/* To do check toggle */\r\n\r\n$(function() { \"use strict\";\r\n  $(\".todo-box li input\").on('click', function() {\r\n      $(this).parent().toggleClass('todo-done');\r\n  });\r\n});\r\n\r\n/* Horizontal timeline */\r\n\r\n$(function() { \"use strict\";\r\n\r\n  var overall_width = 0;\r\n\r\n  $('.timeline-scroll .tl-row').each(function(index, elem) {\r\n      var $elem = $(elem);\r\n      overall_width += $elem.outerWidth() + parseInt($elem.css('margin-left'), 10) + parseInt($elem.css('margin-right'), 10);\r\n  });\r\n\r\n  $('.timeline-horizontal', this).width(overall_width);\r\n});\r\n\r\n/* Input switch alternate */\r\n\r\n$(function() { \"use strict\";\r\n    $('.input-switch-alt').simpleCheckbox();\r\n});\r\n\r\n\r\n/* Slim scrollbar */\r\n\r\n$(function() { \"use strict\";\r\n    $('.scrollable-slim').slimScroll({\r\n        color: '#8da0aa',\r\n        size: '10px',\r\n        alwaysVisible: true\r\n    });\r\n});\r\n\r\n$(function() { \"use strict\";\r\n    $('.scrollable-slim-sidebar').slimScroll({\r\n        color: '#8da0aa',\r\n        size: '10px',\r\n        height: '100%',\r\n        alwaysVisible: true\r\n    });\r\n});\r\n\r\n$(function() { \"use strict\";\r\n    $('.scrollable-slim-box').slimScroll({\r\n        color: '#8da0aa',\r\n        size: '6px',\r\n        alwaysVisible: false\r\n    });\r\n});\r\n\r\n/* Loading buttons */\r\n\r\n$(function() { \"use strict\";\r\n\r\n  $('.loading-button').click(function() {\r\n      var btn = $(this)\r\n      btn.button('loading');\r\n  });\r\n\r\n});\r\n\r\n/* Tooltips */\r\n\r\n$(function() { \"use strict\";\r\n\r\n  $('.tooltip-button').tooltip({\r\n      container: 'body'\r\n  });\r\n\r\n});\r\n\r\n/* Close response message */\r\n\r\n$(function() { \"use strict\";\r\n  $('.alert-close-btn').click(function() {\r\n      $(this).parent().addClass('animated fadeOutDown');\r\n  });\r\n});\r\n\r\n/* Popovers */\r\n\r\n$(function() { \"use strict\";\r\n\r\n  $('.popover-button').popover({\r\n      container: 'body',\r\n      html: true,\r\n      animation: true,\r\n      content: function() {\r\n          var dataID = $(this).attr('data-id');\r\n          return $(dataID).html();\r\n      }\r\n  }).click(function(evt) {\r\n      evt.preventDefault();\r\n  });\r\n\r\n});\r\n\r\n$(function() { \"use strict\";\r\n  $('.popover-button-default').popover({\r\n      container: 'body',\r\n      html: true,\r\n      animation: true\r\n  }).click(function(evt) {\r\n      evt.preventDefault();\r\n  });\r\n});\r\n/* Color schemes */\r\n\r\nvar mUIColors = {\r\n    'default':      '#3498db',\r\n    'gray':         '#d6dde2',\r\n    'primary':      '#00bca4',\r\n    'success':      '#2ecc71',\r\n    'warning':      '#e67e22',\r\n    'danger':       '#e74c3c',\r\n    'info':         '#3498db'\r\n};\r\n\r\nvar getUIColor = function (name) {\r\n    if (mUIColors[name]) {\r\n        return mUIColors[name];\r\n    } else {\r\n        return mUIColors['default'];\r\n    }\r\n}\r\n\r\n/* Screenfull */\r\n\r\nif(document.getElementById('fullscreen-btn')) {\r\n  document.getElementById('fullscreen-btn').addEventListener('click', function () {\r\n    if (screenfull.enabled) {\r\n        screenfull.request();\r\n    }\r\n  });\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./resources/assets/node_modules/js-init/widgets-init.js\n// module id = 151\n// module chunks = 0"],"sourceRoot":""}